:canonical-base-url: https://dckms.github.io/system-architecture


.. index::
   single: Collaborative Development; Code Review
   single: Code Review
   :name: emacsway-agile-practices-code-review

===========
Code Review
===========

.. sectionauthor:: Ivan Zakrevsky

.. contents:: Содержание


Является ли Code Review эффективной практикой?

Возможные результаты Code Review
================================

Давайте посмотрим, какие исходы обычно возникают в результате Code Review:

#. Когда новый инкремент знаний получен, тогда возникает:

   #. Конесенсус (обоюдное согласие на едином решении), который формируется, как правило, новым инкрементом знаний, полученным в процессе обсуждения Pull Request.
   #. `Психологическая защита <https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D1%89%D0%B8%D1%82%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%B7%D0%BC>`__. Чувство ущербности на фоне грамотного спикера вынуждает специалиста защищать свою зону комфорта и социальное положение путем агрессивных попыток дискредитации носителя неудобных компетенций. Увы, подобные случаи происходили даже в практике достаточно известных авторов по архитектуре. Иными словами, мало знать, нужно уметь еще донести.

#. Недостаток знаний для качественной аргументации вызывает борьбу мнений. Тогда возникает:

   #. `Внешний конформизм <https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%BD%D0%BE%D1%81%D1%82%D1%8C>`__, когда одному из участников Code Review не удалось аргументированно пояснить свою позицию другому, и тот решил прекратить прения, оставшись внутри себя несогласным.
   #. `Эффект иррационального усиления <https://ru.wikipedia.org/wiki/%D0%98%D1%80%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D1%83%D1%81%D0%B8%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5>`__ - когда психологически сложно расстаться с проделанным трудом.

Во всех перечисленных случаях, кроме первого, это приводит к демотивации и усиливает текучку кадров. Что, в свою очередь вызывает ущерб упущенной выгоды из-за сдвига графика выхода на рынок новых бизнес-фич в результате простаивания вакансий, проблемы Брукса (отвлекания опытных специалистов на обучение новых, низкая эффективность новых специалистов из-за недостатка знаний и трат времени на освоение новых знаний), прямые потери (обучение, поиск соискателей) и т.п.

Поскольку ключевым условием достижения консенсуса ревьюера и автора Pull Request является новый инкремент знаний, резонно возникает вопрос: а нужно ли получение этого инкремента привязывать во времени к инспекции уже воплощенной реализации?


Apaptation vs Prediction
========================

Можно еще провести такую аналогию: Code Review - это форма инспекции и адаптации, т.е. эмпирический (опытный) способ обработки неопределенности. Это сродни хождению на ощуп. Куда-то добраться таким образом можно, но происпектировать таким образом можно только то, что можно потрогать, т.е. когда "уже пришли".

Процесс можно сделать эффективней, если расширить горизонт "видения", т.е. внести определенную долю Prediction-активности, и получение основного инкремента знаний перенести с Code Review на Design Review. Тут возникает вопрос о том, как достигнуть Design наименьшими трудозатратами, и именно эту проблему хорошо решает Event Storming, т.к. его можно осуществлять прямо в процессе обсуждения.


Continuous Review
=================

Можно еще обратиться к народной пословице о том, что лучше один раз увидеть, чем сто раз услышать.
Т.е. использовать Continuous Review (Pair Programming, Mobbing Programming).

Вопрос не в том, чтобы исключить Code Review, а в том, чтобы уменьшить его негативные последствия путем добавления других форм передачи инкремента знаний.

..
    Это само собой. Но это и есть консенсус под влиянием нового инкремента знаний. Автору сообщили новое знание, и он его принял. Вопрос только в том, как дорого будет внести исправление и можно ли было получить этот инкремент знаний до инспекции.

    Другая ситуация возникает, когда инспектор не может ясно аргументировать свою позицию. Т.е. у него есть мнение, но аргументировать ее он не может. Возникает разногласие. И его исход зависит от того, насколько автор готов пожертвовать своим трудом. А поскольку каждый человек ассоциирует свое мнение со своей компетентностью, а компетентность - с социальным положением, то он начинает видеть в этом угрозу, что приводит к развитию психологической защиты.

    Наглядный пример. Один из грамотнейших людей, которого я только встречал в своей жизни, проработал в одной из моих предыдущих компаний всего один день. Он просто сказал исполнительному директору, что тот был не прав. Угроза авторититету естественно вызвала психологическую защиту и увольнение причины этой угрозы.
