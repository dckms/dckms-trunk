:canonical-base-url: https://dckms.github.io/system-architecture

.. index::
   single: Concerns; balancing business and technical concerns in Agile
   :name: emacsway-agile-balancing-business-technical-concerns

===========================================
–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–∏–∑–Ω–µ—Å/–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
===========================================

.. sectionauthor:: Ivan Zakrevsky

.. contents:: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ

–°—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–æ–≤–æ–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–∏—Å–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–º–∏ –±–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.

    üìù "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ —á–∞—Å—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏.
    –û–±—â–µ—Å—Ç–≤–æ —Ä–µ—à–∞–µ—Ç —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–∞–±–æ—Ä–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π, –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –º–∏—Ñ–∞–º–∏, —Ä–∏—Ç—É–∞–ª–∞–º–∏, –Ω–∞–∫–∞–∑–∞–Ω–∏—è–º–∏ –∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏.
    –ë–µ–∑ —É–≤–∞–∂–µ–Ω–∏—è –∫ —ç—Ç–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º –ª—é–¥–∏ –∑–∞–±—ã–≤–∞—é—Ç –æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω—É–∂–¥–∞—Ö –∏ —Å—Ç—Ä–µ–º—è—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å.
    –ß–µ—Ç—ã—Ä–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –•–† ‚Äî —ç—Ç–æ: –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è (communication), –ø—Ä–æ—Å—Ç–æ—Ç–∞ (simplicity), –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (feedback), —Ö—Ä–∞–±—Ä–æ—Å—Ç—å (courage).

    Short-term individual goals often conflict with long-term social goals.
    Societies have learned to deal with this problem by developing shared sets of values, backed up by myths, rituals, punishments, and rewards.
    Without these values, humans tend to revert to their own short-term best interest.
    The four values of XP are: Communication, Simplicity, Feedback, Courage."

    -- "Extreme Programming Explained" 1st edition by Kent Beck, "Chapter 7. Four Values", –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"

–°–ø—É—Å—Ç—è 23 –≥–æ–¥–∞ Kent Beck –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ–± –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã, —É–ø–æ–º–∏–Ω—É–≤ —Å—Ä–µ–¥–∏ –µ–µ –ø—Ä–∏—á–∏–Ω –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è:

    üí¨ "I've always been puzzled why the balance between structure & behavior investment seems so hard to maintain.
    I'm also puzzled why the balance we see in the wild is so heavily tilted towards behavior changes when as I geek I think it should be more balanced.

    If "behavior change = revenue" & "structure change = option", then the struggle for balance makes more sense.
    It's not about the personalities of Product versus Engineering.
    It's not about short-sighted versus visionary thinking.
    The struggle is economic ‚Äî **do we make some money now or more money later**?
    The answer is always "both". We have to make some money now to survive.
    We want to make more money later.
    **Fear versus greed. No wonder it's so hard to get time to refactor.**"

    ‚Äî "`Behavior Change = Revenue Versus Structure Change = Option <https://tidyfirst.substack.com/p/behavior-change-revenue-versus-structure>`__" by Kent Beck

–†–µ—à–µ–Ω–∏–µ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã –±—ã–ª–æ –æ–¥–Ω–æ–π –∏–∑ —Ü–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–∏—è Agile:

    üìù "During the `Snowbird meeting <https://martinfowler.com/articles/agileStory.html>`__, Kent Beck said that the goal of Agile was to heal the divide between business and development. To that end, the following bill of rights was developed by Kent, Ward Cunningham, and Ron Jeffries, among others."

    -- "Clean Agile: Back to Basics" by Robert C. Martin

..

    üìù "There is **always a tension between advancing product functionality and raising product quality**.

    Business pressures tend to make us view engineering problems, software bugs, and manufacturing line irregularities as necessary evils.
    We see them as distractions that lie outside the Sprint.
    And because developers really like to do new stuff, they often smooth over current product problems, or they postpone resolving them until **the tomorrow that never comes**.

    <...>

    Fixing issues takes time, so we often defer such work.
    We believe that the market benefit is not worth the effort to fix them, or that they displace the "more important," revenue-generating work.
    However, McConnell (Software Development 4 [McC96]) has shown that bugs in software :ref:`slow down the Development Team <emacsway-agile-development-difficulties>` because they cause "stumbling" and work-arounds that create a drag on development.
    These impediments actually **slow down other development that isn't directly related to fixing bugs**.

    [McC96]Steve McConnell. The XP Customer Role in Practice: Three Studies. Software Development. 4[8]:38--42, 1996, August."

    -- "A Scrum Book: The Spirit of the Game" by Jeff Sutherland, James Coplie, chapter "81 Whack the Mole"

..

    üìù "A frequent frustration amongst software developers is the perception that their management team only values things that can be sold. To management, they believe, architectural refactoring is wasted money, occupying development teams for months at a time without a single additional thing being produced that can be sold. And for that matter, why does it take so long for them to add a feature? (Possible answer: that would be because the architecture has not been refactored in years.)

    Management teams do have a business to run and customers do not typically hand over money for architectural refactorings, no matter how elegant they are; so without shiny new things to sell, there may be no money to continue to employ the development teams who want to do the refactoring.

    As such, this issue has two aspects: firstly, development teams need to learn how to justify such investment; and secondly, such non-functional investment will always have to be balanced with functional requirements."

    -- "Open Agile Architecture‚Ñ¢" by The Open Group, Chapter "`6.5.1. Justifying Ongoing Investment in Architectural Refactoring <https://pubs.opengroup.org/architecture/o-aa-standard-single/#KLP-CAR-justifying>`__"


–ü–æ–∏—Å–∫ –±–∞–ª–∞–Ω—Å–∞
=============

–í –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏ XP —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–ª–æ—Å—å –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —á–µ—Ç—ã—Ä–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:

- –∑–∞—Ç—Ä–∞—Ç—ã (cost)
- –≤—Ä–µ–º—è (time)
- –∫–∞—á–µ—Å—Ç–≤–æ (quality)
- –æ–±—ä–µ–º —Ä–∞–±–æ—Ç (scope)

–ò–Ω–æ–≥–¥–∞ —ç—Ç–∏ —á–µ—Ç—ã—Ä–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –≤ –≤–∏–¥–µ Iron Triangle, –≥–¥–µ `Quality –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Ç—Ä–µ–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ <https://en.m.wikipedia.org/wiki/Project_management_triangle>`__:

- –∑–∞—Ç—Ä–∞—Ç—ã (cost)
- –≤—Ä–µ–º—è (time)
- –æ–±—ä–µ–º —Ä–∞–±–æ—Ç (scope)

–•–æ—Ç—è —Å–∞–º Martin Barnes, PhD –≥–æ–≤–æ—Ä–∏–ª, —á—Ç–æ:

    üí¨ I sketched a diagram to make the point ‚Äì a triangle with time, cost and quality at the corners.

    -- "`HOW IT ALL BEGAN <https://pmworldlibrary.net/wp-content/uploads/2018/11/pmwl-barnes-how-it-all-began-pmwt-july-2006.pdf>`__" by Martin Barnes, PhD

–ò–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, Quality –±—ã–ª–æ —Ç–æ–∂–¥–µ—Å—Ç–≤–µ–Ω–Ω–æ (–∏–ª–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª–æ—Å—å –∫–∞–∫ —Å–æ—Å—Ç–∞–≤–Ω–∞—è —á–∞—Å—Ç—å) Scope.

–¢–∞–∫ –∏–ª–∏ –∏–Ω–∞—á–µ, –Ω–æ –Ω–∞ –∑–∞—Ä–µ Agile –∫–∞—á–µ—Å—Ç–≤–æ –∏–º–µ–ª–æ —Ç–∞–∫–æ–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ Iron Triangle —Å—Ç–∞–ª –∫–≤–∞–¥—Ä–∞—Ç–æ–º, –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ç–∞–∫–∂–µ –∫–∞–∫ The "Project Diamond" model, —Å–º.:

- "`It used to be the Iron Triangle <http://www.betterprojects.net/2009/03/it-used-to-be-iron-triangle.html>`__". Better Project. by Brown, Craig
- "`Introduction to Project Management <https://www.projectsmart.co.uk/lifecycle-and-methodology/introduction-to-project-management.php>`__" by Duncan Haughey

–ò —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ç–æ—Ä–æ–π –≤–µ—Ä—Å–∏–∏ XP –æ–Ω –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, –Ω–æ —É–∂–µ –±–µ–∑ Quality.
–ù–æ –æ–±–æ –≤—Å–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É.

    üìù "–û–¥–Ω–∏–º –∏–∑ –æ—Å–Ω–æ–≤–æ–ø–æ–ª–∞–≥–∞—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª –Ω–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ, —á—Ç–æ —Ç–µ—Ö–Ω–∞—Ä–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º, –∞ –±–∏–∑–Ω–µ—Å–º–µ–Ω—ã ‚Äî –Ω–∞ —Ä–µ—à–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–±–ª–µ–º.
    –ü—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –±–∏–∑–Ω–µ—Å-—Ä–µ—à–µ–Ω–∏—è–º–∏, –æ–¥–Ω–∞–∫–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –±–∏–∑–Ω–µ—Å-—Ä–µ—à–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ç—Ä–∞—Ç–∞—Ö –∏ —Ä–∏—Å–∫–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.

    –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π.
    **–°—É—â–µ—Å—Ç–≤—É—é—Ç –¥–≤–∞ —à–∏—Ä–æ–∫–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–∞ –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ–∂–¥—É –±–∏–∑–Ω–µ—Å–æ–º –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: –∫–æ–≥–¥–∞ –ª–∏–±–æ –±–∏–∑–Ω–µ—Å, –ª–∏–±–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é –≤–ª–∞—Å—Ç—å –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º, –ø—Ä–æ–µ–∫—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Å—Ç—Ä–∞–¥–∞—Ç—å.**

    One key to our strategy is to keep technical people focused on technical problems and business people focused on business problems.
    The project must be driven by business decisions, but the business decisions must be informed by technical decisions about cost and risk.

    There are two common failure modes in the relationship between Business and Development.
    **If either Business or Development gains too much power, the project suffers.**"

    -- "Extreme Programming Explained" 1st edition by Kent Beck, "Chapter 14. Splitting Business and Technical Responsibility", –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"


.. index::
   single: Concerns; predominance of technical concerns in Agile
   :name: emacsway-agile-technical-concerns-predominance

–ü—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
----------------------------------

–ù–∞—á–Ω–µ–º —Å –ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.

.. index::
   single: The Second-System Effect; in Agile
   :name: emacsway-second-system-effect

Frederick Brooks –≤ —Å–≤–æ–µ–º –±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä–µ "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π —á–µ–ª–æ–≤–µ–∫–æ-–º–µ—Å—è—Ü" –≥–æ–≤–æ—Ä–∏—Ç –æ–± "`–≠—Ñ—Ñ–µ–∫—Ç–µ –≤—Ç–æ—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã <https://ru.m.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%B2%D1%82%D0%BE%D1%80%D0%BE%D0%B9_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B>`__".
–Ø –ø—Ä–∏–≤–µ–¥—É –Ω–µ–±–æ–ª—å—à–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç:

    üìù "–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–¥–µ–ª–∏—Ç—å –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Ä–æ–≥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, —Ç–æ **—á–µ–º —Å–¥–µ—Ä–∂–∞—Ç—å –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å—Å–∫–∏–π —ç–Ω—Ç—É–∑–∏–∞–∑–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞**?

    If one separates responsibility for functional specification from responsibility for building a fast, cheap product, **what discipline bounds the architect's inventive enthusiasm**?"

    -- "The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr., –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"

–ü–æ—Ö–æ–∂—É—é –ø—Ä–æ–±–ª–µ–º—É –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∏ Kent Beck –≤ "Extreme Programming" 1st edition:

    üìù "–ö–æ–≥–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —á—Ä–µ–∑–º–µ—Ä–Ω–∞—è —Å–≤–æ–±–æ–¥–∞, –æ–Ω–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —É –Ω–∏—Ö –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ "—ç—Ç–∏ –±–µ–ª—ã–µ –≤–æ—Ä–æ—Ç–Ω–∏—á–∫–∏" –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–¥–≥–æ–Ω—è—é—Ç –∏—Ö.
    –ö–æ–≥–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–∞, –æ–Ω–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –∏ –Ω–∞—á–∏–Ω–∞—é—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –Ω–æ–≤—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.
    –ü—Ä–∏ —ç—Ç–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, —è–∑—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –æ–Ω–∏ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∏ —Å—É–ø–µ—Ä—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã.
    –í—Å–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—è–≤–∏–≤—à–µ–µ—Å—è –Ω–∞ —Ä—ã–Ω–∫–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∏—Å–∫–æ–º.
    (–ï—Å–ª–∏ –º—ã –Ω–µ –ø–æ–ø—Ä–æ–±—É–µ–º —ç—Ç–æ —Å–µ–π—á–∞—Å, —Ç–æ –∫–æ–≥–¥–∞ –∂–µ –µ—â–µ?)

    –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π, –æ–Ω–∏ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞—é—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—Å–∏–ª–∏–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∏—Å–∫–∞, –ø—Ä–∏ —ç—Ç–æ–º **–æ–Ω–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Å–ª–∏—à–∫–æ–º –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–¥–∞—á—É**.

    When Development is in charge, they put in place all the process and technology that they never had time for when "those suits" were pushing them around.
    They install new tools, new languages, new technologies.
    And the tools, languages, and technologies are chosen because they are interesting and cutting edge.
    Cutting edge implies risk.
    (If we haven't learned that by now, when will we?)

    So, the net result of the "Development in Charge" scenario is too much effort and way, way **too much risk for too little return**."

    -- "Extreme Programming Explained" 1st edition by Kent Beck, "Chapter 14. Splitting Business and Technical Responsibility", –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"

..

    üìù "Doing infrastructure without customer function leads to the following risks:

    - You spend a lot of time not delivering things that are valuable to the customer, which strains the relationship with the customer.
    - You try to make the infrastructure cover everything you think you might need, which leads to an overly complex infrastructure."

    -- "Planning Extreme Programming" by Kent Beck, Martin Fowler, "Chapter 10. Release Planning :: How Do You Plan Infrastructure?"

..

    üìù "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–µ—Ä–¥—Ü–µ–º –•–†.
    –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –µ—Å–ª–∏ –±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –º–æ–≥–ª–∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—â–∞—Ç–µ–ª—å–Ω–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω—É–∂–Ω—ã –±—ã–ª–∏ –±—ã –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏, –∫—Ä–æ–º–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤.
    –ö–æ–Ω–µ—á–Ω–æ –∂–µ –µ—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫—É –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞, —Ç–æ –Ω–∏–∫–∞–∫–æ–π –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞—Ö –Ω–µ –±—ã–ª–æ –±—ã.

    The programmer is the heart of XP.
    Actually, if programmers could always make decisions that carefully balanced short-term and long-term priorities, there would be no need for any other technical people on the project besides programmers.
    Of course, if the customer didn't absolutely need software to keep the business running, there would be no need for the programmers, so it won't do to get too big-headed about being the vital programmer."

    -- "Extreme Programming Explained" 1st edition by Kent Beck, "Chapter 22. Roles for People", –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"

..

    üìù "–ï—Å—Ç—å –º–∞—Å—Å–∞ –ø—Ä–∏–º–µ—Ä–æ–≤, –ø–æ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞–º–∏ –∏ —Ä–µ–º–µ—Å–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ
    –ø–æ–¥–≤–æ–¥—è—Ç –∫ –º–Ω–µ–Ω–∏—é, —á—Ç–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏–¥–µ—Ç –Ω–∞ –ø–æ–ª—å–∑—É.
    –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, –∞—Ñ–æ—Ä–∏–∑–º —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –≥–ª–∞—Å–∏—Ç, —á—Ç–æ "—Ñ–æ—Ä–º–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç".
    –°–∞–º—ã–µ —É–∂–∞—Å–Ω—ã–µ —Å—Ç—Ä–æ–µ–Ω–∏—è ‚Äî —ç—Ç–æ —Ç–µ, –±—é–¥–∂–µ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ –¥–ª—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.
    –¢–≤–æ—Ä—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ë–∞—Ö–∞ –µ–¥–≤–∞ –ª–∏ –º–æ–≥–ª–∞ –ø–æ–¥–∞–≤–ª—è—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞—Ç—å –∫–∞–Ω—Ç–∞—Ç—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞.
    –Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ Stretch —Å—Ç–∞–ª–∞ –±—ã –ª—É—á—à–µ, –µ—Å–ª–∏ –±—ã –Ω–∞ –Ω–µ–µ –Ω–∞–ª–æ–∂–∏–ª–∏ –±–æ–ª–µ–µ –∂–µ—Å—Ç–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è; —Ç–∞–∫, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –±—é–¥–∂–µ—Ç–æ–º –Ω–∞ System/360 Model 30, –ø–æ –º–æ–µ–º—É –º–Ω–µ–Ω–∏—é, –ø—Ä–∏–Ω–µ—Å–ª–∏ –ª–∏—à—å –ø–æ–ª—å–∑—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Model 75.

    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, —è —Å—á–∏—Ç–∞—é, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–∑–≤–Ω–µ —É—Å–∏–ª–∏–≤–∞–µ—Ç, –∞ –Ω–µ –ø–æ–¥–∞–≤–ª—è–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.
    –û–Ω–∏ —Å—Ä–∞–∑—É —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Ç–æ–π —á–∞—Å—Ç–∏ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä–æ–π –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–Ω–∏–º–∞–ª—Å—è, –∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—å–µ—Ç –∫–ª—é—á–æ–º.
    –í –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º–æ–π –≥—Ä—É–ø–ø–µ –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ—Å–≤—è—â–µ–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º –≤ —É—â–µ—Ä–± —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏. [5]

    There are many examples from other arts and crafts that lead one to believe that discipline is good for art.
    Indeed, an artist's aphorism asserts, "Form is liberating."
    The worst buildings are those whose budget was too great for the purposes to be served.
    Bach's creative output hardly seems to have been squelched by the necessity of producing a limited-form cantata each week.
    I am sure that the Stretch computer would have had a better architecture had it been more tightly constrained; the constraints imposed by the System/360 Model 30's budget were in my opinion entirely beneficial for the Model 75's architecture.

    Similarly, I observe that the external provision of an architecture enhances, not cramps, the creative style of an implementing group.
    They focus at once on the part of the problem no one has addressed, and inventions begin to flow.
    In an unconstrained implementing group, most thought and debate goes into architectural decisions, and implementation proper gets short shrift. [5]"

    5. Englebart, D., and W. English, "A research center for augmenting human intellect," AFIPS Conference Proceedings, Fall Joint Computer Conference, San Francisco (Dec. 9-11, 1968), pp. 395-410.

    -- "The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr., –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"

–ö —ç—Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∏ —Ç.–Ω. Resume-Driven Development, –∫–æ–≥–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ –ø–µ—Ä–µ—É—Å–ª–æ–∂–Ω—è—é—Ç –ø—Ä–æ–µ–∫—Ç —Å–ª–æ–∂–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ —Ä–∞–¥–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤ —Ä–µ–∑—é–º–µ.


.. index::
   single: Concerns; predominance of business concerns in Agile
   :name: emacsway-agile-business-concerns-predominance

–ü—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
-----------------------------

–ù–æ –µ—Å—Ç—å –∏ –æ–±—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - –∫–æ–≥–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É—â–µ–º–ª–µ–Ω—ã –≤ —Å–≤–æ–∏—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏—è—Ö –≤ –ø–æ–ª—å–∑—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –±–∏–∑–Ω–µ—Å–∞, –ø—Ä–æ–µ–∫—Ç –Ω–µ–∏–∑–º–µ–Ω–Ω–æ –∑–∞–≥–Ω–∏–≤–∞–µ—Ç, –∞ :ref:`—ç–∫–æ–Ω–æ–º–∏–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–≥—Ä–∞–¥–∏—Ä—É–µ—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é, –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–π –∫ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π <emacsway-agile-development-difficulties>`.

    üìù "–ö–æ–≥–¥–∞ –±–∏–∑–Ω–µ—Å–º–µ–Ω—ã –ø–æ–ª—É—á–∞—é—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–º–æ—á–∏–π, –æ–Ω–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –¥–∏–∫—Ç–æ–≤–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —á–µ—Ç—ã—Ä–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
    "–í–æ—Ç —Ç–æ, —á—Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å.
    –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω–æ —Ç–æ–≥–¥–∞-—Ç–æ –∏ —Ç–æ–≥–¥–∞-—Ç–æ.
    –ù–µ—Ç, —Ç–µ–±–µ –Ω–µ –¥–∞–¥—É—Ç –Ω–∏ –æ–¥–Ω–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏.
    –ò –¥–ª—è —Ç–µ–±—è –±—É–¥–µ—Ç –ª—É—á—à–µ, –µ—Å–ª–∏ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å —ç—Ç—É —Ä–∞–±–æ—Ç—É —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º, –∏–Ω–∞—á–µ —É —Ç–µ–±—è –±—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã.
    –¢—ã –º–µ–Ω—è —Ö–æ—Ä–æ—à–æ –ø–æ–Ω—è–ª? –°–∫–æ—Ç–∏–Ω–∞ –ª–µ–Ω–∏–≤–∞—è!"

    –í —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å –ø—Ä–µ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ–µ.
    –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ ‚Äî –Ω–µ—Ç.
    –ò –µ—Å–ª–∏ —É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–µ –±—É–¥–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π, –æ–Ω–∏ –Ω–µ —Å–º–æ–≥—É—Ç –≤–æ–∑—Ä–∞–∑–∏—Ç—å.
    –û–Ω–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç—å –±–∏–∑–Ω–µ—Å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
    –ò —Ç–æ–≥–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏, –ø–æ–Ω—É—Ä–∏–≤ –≥–æ–ª–æ–≤—É, –∏–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–æ–π –∑–∞–¥–∞—á–µ–π, –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–¥ –Ω–∏–º–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏.

    –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –Ω–∞–∏–º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏—á–∏–Ω–æ–π –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∏—Å–∫–∞.
    –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º –∏—Ö –ø—Ä–∏—Ä–æ–¥—ã.
    –û–Ω–∏ –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –æ–±–¥—É–º—ã–≤–∞—é—Ç—Å—è, –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∏ –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –æ—Å–º—ã—Å–ª–∏–≤–∞—é—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–Ω–∏ –∏–∑–º–µ–Ω—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –≤—ã—à–µ –≤—Å–µ–≥–æ.
    –û—á–µ–Ω—å —á–∞—Å—Ç–æ —Ç–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–∞–∫–∂–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–º–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è.

    **–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –µ—Å–ª–∏ –±–∏–∑–Ω–µ—Å –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –ø–æ–ª–Ω–æ–º–æ—á–∏—è, –ø—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—Å–∏–ª–∏–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∏—Å–∫–∞, –ø—Ä–∏ —ç—Ç–æ–º –æ–Ω** :ref:`–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–¥–∞—á—É <emacsway-agile-development-difficulties>`.

    If Business has the power, they feel fit to dictate all four variables to Development.
    "Here is what you will do.
    Here is when it will be done.
    No, you can't have any new workstations.
    And it better be of the highest quality or you're in trouble, buster."

    In this scenario, Business always specifies too much.
    Some of the items on the list of requirements are absolutely essential.
    But some are not.
    And if Development doesn't have any power, they can't object; they can't force Business to choose which is which.
    So Development dutifully goes to work, heads down, on the impossible task they have been given.

    It seems to be in the nature of the less important requirements that they entail the greatest risk.
    They are typically the poorest understood, so there is great risk that the requirements will change all during development.
    Somehow, they also tend to be technically riskier.

    **The result of the "Business in Charge" scenario, then, is that the project takes on too much effort and way, way too much risk for** :ref:`too little return <emacsway-agile-development-difficulties>`."

    -- "Extreme Programming Explained" 1st edition by Kent Beck, "Chapter 14. Splitting Business and Technical Responsibility", –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"

..

    üìù "–ó–∞–∫–æ–Ω –í–∞–π–Ω–±–µ—Ä–≥–∞-–ë—Ä—É–∫—Å–∞: –û—Ç –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö —Å–∏—Å—Ç–µ–º—ã, –ø–æ—Å—Ç—Ä–∞–¥–∞–ª–æ –±–æ–ª—å—à–µ –ø—Ä–æ–µ–∫—Ç–æ–≤, —á–µ–º –æ—Ç –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –≤–º–µ—Å—Ç–µ –≤–∑—è—Ç—ã—Ö.

    Weinberg-Brooks' Law: More software projects have gone awry from management's taking action based on incorrect system models than for all other causes combined."

    -- "`Systems Thinking <https://less.works/less/principles/systems-thinking.html>`__" by Craig Larman (`–Ω–∞ —Ä—É—Å—Å–∫–æ–º <https://less.works/ru/less/principles/systems-thinking.html>`__)

..

    üìù "Scrum is by far the most widely used agile framework in the world, but we've also found that 58% of Scrum implementations fail."

    -- "`Better Scrum with Essence <https://www.scruminc.com/better-scrum-with-essence/>`__" Jeff Sutherland

..

    üìù "–ú—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏.
    –ú—ã –ø—Ä–æ–±–æ–≤–∞–ª–∏ —Å—á–∏—Ç–∞—Ç—å –∏—Ö —Å–∞–º—ã–º–∏ –æ–±—ã—á–Ω—ã–º–∏ user story.
    –≠—Ç–æ –±—ã–ª–∞ –Ω–µ—É–¥–∞—á–Ω–∞—è –∏–¥–µ—è: –¥–ª—è product owner'–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ product backlog'–µ –±—ã–ª–æ –≤—Å—ë —Ä–∞–≤–Ω–æ, —á—Ç–æ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ç—ë–ø–ª–æ–µ —Å –º—è–≥–∫–∏–º.
    –ü–æ –æ—á–µ–≤–∏–¥–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—É—á–∞–ª–∏ —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º:
    "–î–∞, —Ä–µ–±—è—Ç–∞, –Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ, –≤–∞—à —Å–µ—Ä–≤–µ—Ä –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Äì –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞—è —à—Ç—É–∫–∞, –Ω–æ –¥–∞–≤–∞–π—Ç–µ —Å–ø–µ—Ä–≤–∞ —Ä–µ–∞–ª–∏–∑—É–µ–º –∫–æ–µ-–∫–∞–∫–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏?
    –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å –≤–∞—à—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Ñ–µ—Ç–∫—É, –æ–∫–µ–π?"

    –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö product owner –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∞–≤, –Ω–æ —á–∞—â–µ –≤—Å–µ-—Ç–∞–∫–∏ –Ω–µ—Ç.
    –ú—ã –ø—Ä–∏—à–ª–∏ –∫ –≤—ã–≤–æ–¥—É, —á—Ç–æ product owner –Ω–µ –≤—Å–µ–≥–¥–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–µ–Ω, —á—Ç–æ–±—ã –∏–¥—Ç–∏ –Ω–∞ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å.

    We've experimented a lot with different ways of handling tech stories.
    We tried treating them as first-class stories, just like any others.
    That was no good; when the product owner prioritized the product backlog, it was like comparing apples with oranges.
    In fact, for obvious reasons, the tech stories were often given low priority with the motivation like
    "Yeah guys, I'm sure a continuous-build server is important and all, but let's build some revenue-driving features first shall we?
    Then you can add your tech candy later, OK?"

    In some cases the product owner is right, but often not.
    We've concluded that the product owner is not always qualified to be making that tradeoff."

    -- "Scrum and XP from the Trenches: How We Do Scrum" 2nd edition by Henrik Kniberg, –ø–µ—Ä–µ–≤–æ–¥ –ø–æ–¥ —Ä–µ–¥–∞–∫—Ü–∏–µ–π –ê–ª–µ–∫—Å–µ—è –ö—Ä–∏–≤–∏—Ü–∫–æ–≥–æ


.. index::
   single: Concerns; solution to balancing business and technical concerns in Agile
   :name: emacsway-agile-solution-to-balancing-business-technical-concerns

–†–µ—à–µ–Ω–∏–µ
-------

    üìù "You notice we have two different criteria set by two different groups of people.
    How do we resolve the two of them?
    Programmers want to tackle high-risk stories first, and customers want to tackle high-value stories first.
    There are plenty of times when these conflicting priorities have to be resolved."

    -- "Planning Extreme Programming" by Kent Beck, Martin Fowler, "Chapter 13. Ordering the Stories :: Negotiating Between the Two"

..

    üìù "Our planning process relies on clearly separating the roles of business people and software people.
    This ensures that business people make all the business decisions and software people make all the technical decisions.

    The key to project management is balancing power between the business people and the programmers.
    Done right, software project management has

    - Business people making business decisions
    - Technical people making technical decisions"

    -- "Planning Extreme Programming" by Kent Beck, Martin Fowler, "Chapter 4. Balancing Power"

..

    üìù "–≠—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–∂–Ω–æ ‚Äî —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –ª–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å–ª—É–∂–∞—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã.
    –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Ä–∞—Å—Å—É–∂–¥–∞—Ç—å –Ω–∞ —Ç–µ–º—É, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–∞ –∏–ª–∏ –∏–Ω–∞—è –º–µ—Ç–æ–¥–∏–∫–∞ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –≤—Å–µ–æ–±—â–µ–π —Ü–µ–ª–∏, –æ–¥–Ω–∞–∫–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ—Å—å –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º, –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç–µ, —á—Ç–æ –µ—Å–ª–∏ –º–µ—Ç–æ–¥–∏–∫–∞ –Ω–µ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —Ä–µ—à–µ–Ω–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã, —Å—Ç–æ—è—â–µ–π –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—ã –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç–µ –µ–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É.
    –ï—Å–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –•–† –Ω–µ –±—É–¥–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—Ç—å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–º –ª–∏—á–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ª—é–¥–µ–π, –æ–Ω–∞ –æ–±—Ä–µ—á–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–∞–ª.

    It's been tricky, designing a process where following short-term self-interest also serves long-term team interest.
    You can expound all you want on how some practice or other is in everybody's best interest long-term, but when the pressure mounts, if the practice doesn't solve an immediate problem it will be discarded.
    If XP can't work with people's short-term interest, it is doomed to the outer methodological darkness."

    -- "Extreme Programming Explained" 1st edition by Kent Beck, "Chapter 8. Basic Principles", –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"

–•–æ—Ä–æ—à–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ –≤–∑–∞–∏–º–æ–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ –ø–µ—Ä–µ–∫–æ—Å—ã.

–ü–æ–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø–æ–Ω–∏–º–∞—é—Ç—Å—è, –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, —Ç–∞–∫–∏–µ Quality Attributes, –∫–∞–∫ `Modifiability <https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=8299>`__, Evolvability, Flexibility, Modularity, Testabilty, Deployability etc.

–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø —Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä–æ–≤ —Ö–æ—Ä–æ—à–æ –∏–∑—É—á–µ–Ω—ã –∞–Ω–∞–ª–∏–∑–æ–º –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.

    üìù "Stakeholder Priority. The **priority of each requirement** should be identified.
    This may be established through a consensus process among potential stakeholders.
    As appropriate, a scale such as 1-5 or a simple scheme such as High, Medium or Low, could be used for identifying the priority of each requirement.
    The priority is not intended to imply that some requirements are not necessary, but it may indicate what **requirements are candidates for the trade space when decisions regarding alternatives are necessary**.
    Prioritization needs to consider the stakeholders who need the requirements.
    This **facilitates trading off requirements** and balancing the impact of changes among stakeholders."

    üìù "trade-off - decision-making actions that select from various requirements (3.1.19) and alternative solutions on the basis of net benefit to the stakeholders (3.1.28)"

    üìù "It is important to continue to perform requirements negotiation during the analysis and allocation of requirements, **because conflicts will occur**.
    Negotiation might be needed among stakeholders requiring mutually incompatible features, or due to **conflicts between desired performance requirements, constraints, available budget, and delivery schedule**.
    In most cases, it is necessary to consult with the stakeholder(s) **to reach a consensus on an appropriate trade-off**.
    It is often important for contractual reasons that such decisions are traceable to the stakeholder.
    **Various analysis methods and conflict resolution techniques may be applicable to facilitate the resolution and are dependent on the specific situation.**
    Some organizations consider requirements negotiation to be part of requirements validation.
    The specific process subcategory is not important as long as the conflict resolution occurs as early as possible in the requirements analysis task."

    -- "ISO/IEC/IEEE 29148:2018 Systems and software engineering ‚Äî Life cycle processes ‚Äî Requirements engineering", "6.2.3.3 Analyze and maintain stakeholder requirements."

–°—É—â–µ—Å—Ç–≤—É–µ—Ç —Ü–µ–ª—ã–π —Ä—è–¥ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑—Ä–µ–ª—ã—Ö –º–µ—Ç–æ–¥–∏–∫, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.
–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –∏–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ "Software Architecture in Practice" 4th edition by Len Bass, Paul Clements, Rick Kazman –Ω–∞–≥–ª—è–¥–Ω–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—É—é (agile) —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É.

–ü–æ—è–≤–∏–ª–∏—Å—å –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç—Ç–∏—Ö –º–µ—Ç–æ–¥–∏–∫: Lightweight Architecture Evaluation (LAE), Mini-QAW etc.
–ú–Ω–æ–≥–∏–µ –∏–∑ —ç—Ç–∏—Ö –º–µ—Ç–æ–¥–∏–∫ –æ–ø–∏—Å–∞–Ω—ã –≤ "`ISO/IEC/IEEE 42030:2019 Software, systems and enterprise ‚Äî Architecture evaluation framework <https://www.iso.org/standard/73436.html>`__".

–û–¥–Ω–∞–∫–æ, –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ agile-–º–æ–¥–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —Å–≤–æ–∏, –ø—Ä–µ–¥–µ–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ, –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–º–∏ –±–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏.

–ï—Å–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö —ç—Ç–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö, —Ç–æ –º–æ–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è –≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.
–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –Ω–µ–∏–∑–±–µ–∂–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø —Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—á–∞—Å—Ç—É—é –æ–±—Ä–∞—Ç–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—Ç.
–ù—É–∂–Ω–æ –Ω–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç, - —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –µ—Å—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞—è, –∞ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º –ø—É—Ç–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π.
–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –≤–ø–æ–ª–Ω–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Ä–∞—Å—Ç–∏ –≤ –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π (–≤ –ª—É—á—à–µ–º —Å–ª—É—á–∞–µ), –∏–ª–∏ –¥–∞–∂–µ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ :ref:`–ø–æ—Ç–µ—Ä–µ –∫–∞–¥—Ä–æ–≤ <emacsway-developer-motivation>` (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ).


.. index::
   single: Concerns; balancing business and technical concerns in XP
   :name: emacsway-xp-balancing-business-technical-concerns

Extreme Programming
^^^^^^^^^^^^^^^^^^^


.. index::
   single: Concerns; balancing business and technical concerns in XP 1st edition
   :name: emacsway-xp1-balancing-business-technical-concerns

–ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è XP
""""""""""""""""

–†–µ—à–µ–Ω–∏–µ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Ö–æ—Ä–æ—à–æ –æ–ø–∏—Å–∞–Ω–æ –≤ –≥–ª–∞–≤–µ "Chapter 14. Splitting Business and Technical Responsibility" –∫–Ω–∏–≥–∏ "Extreme Programming Explained" 1st edition by Kent Beck.
–†–µ—à–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –æ–±—ä–µ–º–Ω–æ–µ, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ —Å—é–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø–æ—ç—Ç–æ–º—É, —è –ø—Ä–∏–≤–µ–¥—É —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –µ–≥–æ –º–æ–º–µ–Ω—Ç—ã.

    üìù "–ß—Ç–æ –¥–µ–ª–∞—Ç—å?

    –†–µ—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º **—Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ–ª–Ω–æ–º–æ—á–∏—è –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –±–∏–∑–Ω–µ—Å–æ–º –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏**.
    **–ë–∏–∑–Ω–µ—Å–º–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏, –∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏.**
    –†–µ—à–µ–Ω–∏—è, –ø—Ä–∏–Ω—è—Ç—ã–µ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π, –¥–æ–ª–∂–Ω—ã —Å—Ç–∞—Ç—å –±–∞–∑–æ–π –¥–ª—è —Ä–µ—à–µ–Ω–∏–π, –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π.
    –ù–∏ –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –ø–æ—Ä—è–¥–∫–µ —Ä–µ—à–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ.

    What to Do?

    The solution is to somehow **split the responsibility and power between Business and Development**.
    **Business people should make the decisions for which they are suited.**
    **Programmers should make the decisions for which they are suited.**
    Each party's decisions should inform the other's.
    Neither party should be able to unilaterally decide anything."

    -- "Extreme Programming Explained" 1st edition by Kent Beck, "Chapter 14. Splitting Business and Technical Responsibility", –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"

..

    üìù "–í –¥–∞–Ω–Ω–æ–π –≥–ª–∞–≤–µ —è —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –æ –º–æ–¥–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
    –í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö —á–µ—Ç—ã—Ä–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:

    - –∑–∞—Ç—Ä–∞—Ç—ã (cost);
    - –≤—Ä–µ–º—è (time);
    - –∫–∞—á–µ—Å—Ç–≤–æ (quality);
    - –æ–±—ä–µ–º —Ä–∞–±–æ—Ç (scope).

    –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∏–≥—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: **–≤–Ω–µ—à–Ω–∏–µ —Å–∏–ª—ã (–∑–∞–∫–∞–∑—á–∏–∫–∏, –º–µ–Ω–µ–¥–∂–µ—Ä—ã) –¥–æ–ª–∂–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª—é–±—ã—Ö —Ç—Ä–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞, –ø—Ä–∏ —ç—Ç–æ–º –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–∞ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–π—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π**.

    –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –∑–∞–∫–∞–∑—á–∏–∫–∏ –ø–æ–ª–∞–≥–∞—é—Ç, —á—Ç–æ –æ–Ω–∏ –æ–±–ª–∞–¥–∞—é—Ç –ø—Ä–∞–≤–æ–º —Å —É—Å–ø–µ—Ö–æ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —á–µ—Ç—ã—Ä–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
    "–í—ã –æ–±—è–∑–∞–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—Å–µ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –∑–∞–¥–∞–Ω–∏–∏ –∫ –ø–µ—Ä–≤–æ–º—É —á–∏—Å–ª—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞, —Ä–∞–±–æ—Ç–∞—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–∞–≤–µ, —Ç–æ –µ—Å—Ç—å –±–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏, –ø—Ä–∏ —ç—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å—Ç–æ—è—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ –∏ –Ω–µ —É—Å—Ç—É–ø–∞—Ç—å –Ω–∞—à–∏–º –æ–±—ã—á–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º".
    –ö–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥–æ–±–Ω–æ–µ, :ref:`–∫–∞—á–µ—Å—Ç–≤–æ, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –ª–µ—Ç–∏—Ç –∫–æ –≤—Å–µ–º —á–µ—Ä—Ç—è–º <emacsway-agile-development-difficulties>` (–∏ —ç—Ç–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞–∫ —Ä–∞–∑ –∏ —è–≤–ª—è–µ—Ç—Å—è –æ–±—â–µ—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º), –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ö–æ—Ä–æ—à–æ –¥–µ–ª–∞—Ç—å —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –ø–æ–¥ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –¥–∞–≤–ª–µ–Ω–∏–µ–º.
    –ü–æ–º–∏–º–æ –∫–∞—á–µ—Å—Ç–≤–∞, –≤—Ä–µ–º—è, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, —Ç–∞–∫–∂–µ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑-–ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—è.
    –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –≤—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ, –Ω–µ —É—Å–ø–µ–≤–∞—è –ø—Ä–∏ —ç—Ç–æ–º —Å–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫ —Å—Ä–æ–∫—É.

    –ß—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ —á–µ—Ç—ã—Ä–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–º–∏.
    –ï—Å–ª–∏ –≤—Å–µ ‚Äî –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã, –∑–∞–∫–∞–∑—á–∏–∫–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã ‚Äî —Å–º–æ–≥—É—Ç –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –≤—Å–µ—Ö —á–µ—Ç—ã—Ä–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –±—É–¥–µ—Ç –ª–µ–≥—á–µ —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–∏–µ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–µ–¥—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å.
    –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫–∞–∂–µ—Ç—Å—è –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–º, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ª–∏–±–æ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥—Ä—É–≥–∏–µ —Ç—Ä–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.

    Here is a model of software development from the perspective of a system of control variables.
    In this model, there are four variables in software development:

    - Cost
    - Time
    - Quality
    - Scope

    The way the software development game is played in this model is that **external forces (customers, managers) get to pick the values of any three of the variables**.
    **The development team gets to pick the resultant value of the fourth variable.**

    Some managers and customers believe they can pick the value of all four variables.
    "You are going to get all these requirements done by the first of next month with exactly this team.
    And quality is job one here, so it will be up to our usual standards."
    When this happens, :ref:`quality always goes out the window <emacsway-agile-development-difficulties>` (this is generally up to the usual standards, though), since nobody does good work under too much stress.
    Also likely to go out of control is time.
    You get crappy software late.

    The solution is to make the four variables visible.
    If everyone‚Äîprogrammers, customers, and managers‚Äîcan see all four variables, they can consciously choose which variables to control.
    If they don't like the result implied for the fourth variable, they can change the inputs, or they can pick a different three variables to control."

    -- "Extreme Programming Explained" 1st edition by Kent Beck, "Chapter 4. Four Variables", –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"


.. index::
   single: Concerns; balancing business and technical concerns in XP 2d edition
   :name: emacsway-xp2-balancing-business-technical-concerns

–í—Ç–æ—Ä–∞—è –≤–µ—Ä—Å–∏—è XP
""""""""""""""""

–°–∞–º –∂–µ Kent Beck –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª –ø–æ–∑–∂–µ –∫–≤–∞–¥—Ä–∞—Ç (Quality, Cost, Time, Scope) –≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ (Cost, Time, Scope), –ø—É—Ç–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ (Quality) –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É.

–ï—Å–ª–∏ –≤ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏ XP –æ–Ω –±–æ—Ä–æ–ª—Å—è –∑–∞ —Ç–æ, —á—Ç–æ–±—ã Quality (–∏–ª–∏ —Ö–æ—Ç—è –±—ã –ª—é–±—É—é –æ–¥–Ω—É –∏–∑ 4-—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π) –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, —Ç–æ –≤–æ –≤—Ç–æ—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –æ–Ω –∏ –≤–æ–≤—Å–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª –∫–∞—á–µ—Å—Ç–≤–æ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É.

–í–æ—Ç —á—Ç–æ –æ–Ω –ø–∏—à–µ—Ç –≤–æ –≤—Ç–æ—Ä–æ–º –∏–∑–¥–∞–Ω–∏–∏:

    üìù "Quality

    Sacrificing quality is not effective as a means of control.
    **Quality is not a control variable.**
    Projects don't go faster by accepting lower quality.
    They don't go slower by demanding higher quality.
    Pushing quality higher often results in faster delivery; while lowering quality standards often results in later, less predictable delivery.

    One of my biggest surprises since the first edition of Extreme Programming Explained was released has been just how far teams have been able to push quality as measured in defects, design quality, and the experience of development.
    Each increase in quality leads to improvements in other desirable project properties, like productivity and effectiveness, as well.
    **There is no apparent limit to the benefits of quality, only limits in our ability to understand how to achieve higher quality.**

    Quality isn't a purely economic factor.
    People need to do work :ref:`they are proud of <emacsway-developer-motivation>`.
    I remember talking to the manager of a mediocre team.
    He went home on the weekends and made fancy ironwork as a blacksmith.
    He met his need for quality; he just met it outside of work.

    **If you can't control projects by controlling quality, how can you control them?**
    Time and cost are most often fixed.
    XP chooses scope as the primary means of planning, tracking, and steering projects.
    Since scope is never known precisely in advance, it makes a good lever.
    The weekly and quarterly cycles provide explicit points for tracking and choosing scope.

    A concern for quality is no excuse for inaction.
    If you don't know a clean way to do a job that has to be done, do it the best way you can.
    If you know a clean way but it would take too long, do the job as well as you have time for now.
    Resolve to finish doing it the clean way later.
    This often occurs during architectural evolution, where you have to live with two architectures solving the same problem while you transition from one to the other.
    Then the transition itself becomes a demonstration of quality: making a big change efficiently in small, safe steps."

    -- "Extreme Programming Explained" 2nd edition by Kent Beck

–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤–æ –≤—Ç–æ—Ä–æ–º –∏–∑–¥–∞–Ω–∏–∏ Kent Beck —É–ø–æ–º–∏–Ω–∞–µ—Ç –∫–Ω–∏–≥—É "Joint Application Development", –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç –µ—ë —Ç–∞–∫–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º:

    üìù "Annotated Bibliography

    Reading a wide range of books around a topic adds to the richness of my understanding. Here are a few suggestions for interesting reading on ideas related to XP."

    -- "Extreme Programming Explained" 2nd edition by Kent Beck, "Annotated Bibliography :: Project Management"

..

    üìù "Jane Wood and Denise Silver , Joint Application Development, 2nd edition, John Wiley and Sons, 1995; ISBN 0471042994. 

    JAD facilitators facilitate without directing, give power to people who know best how to make a decision, and eventually fade away.
    **JAD is focused on creating a requirements document that the developers and customers agree can and should be implemented.**"

    -- "Extreme Programming Explained" 2nd edition by Kent Beck, "Annotated Bibliography :: Project Management"

..

    üìù "The facilitated **JAD workshop brings key users (stakeholders) and systems professionals together to resolve their differences in a neutral, non-hostile atmosphere**.
    **Key to the workshop is a specially trained, unbiased facilitator who is not a member of the project team and therefore has no political stake in the outcome of the workshop.**
    The workshop will build a team that will stay together, psychologically at least, for the life of the project.

    <...>

    The Key Players

    1) The Facilitator

    The facilitator is in charge of the workshop - the guardian of the process.
    It is the facilitator's responsibility to ensure that the expected workshop deliverables are produced and the expected consensus is achieved.
    The facilitator is an unbiased leader who has no ties to the project.
    He can come from some other department or from outside the company.
    Some companies are training facilitators who work out of a facilitation center attached to the human resources department."

    -- "`Joint Application Design. Business Requirements Analysis for Successful Re-engineering <https://web.archive.org/web/20090221042620/http://www.bee.net/bluebird/jaddoc.htm>`__" by Bill Jennerich 

–ë–∞–ª–∞–Ω—Å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ Kent Beck —Ç–µ–ø–µ—Ä—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç –≤ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ "`Design Payoff Line <https://martinfowler.com/bliki/DesignPayoffLine.html>`__" –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–∞ :ref:`YAGNI <emacsway-yagni>`, —Å–º. ":ref:`emacsway-software-development-economics-literature`".
–ò–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –≤–æ–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–µ—Ä–µ—à–µ–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –∏ –≤–º–µ—Å—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –≥—Ä—É–ø–ø–∞–º–∏ —Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä–æ–≤ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ –≤–æ–ø—Ä–æ—Å –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —É—â–µ—Ä–±–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–º –±–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–µ—Å–∞–º –æ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π.

    üìù "You have the right to produce quality work at all times."

    -- "Programmer Bill of Rights", "Planning Extreme Programming" by Kent Beck, Martin Fowler, "Chapter 2. Fear"

–í–æ—Ç –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —ç—Ç—É —Ñ—Ä–∞–∑—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω–∏—è Agile Manifesto:

    üìù

        "Developers have the right to produce high-quality work at all times." -- Kent Beck

    This may be the most profound of all these rights. Developers have the right to do good work.
    The business has no right to tell developers to cut corners or do low-quality work.
    Or, to say this differently, the business has no right to force developers to ruin their professional reputations or violate their professional ethics.

    -- "Clean Agile: Back to Basics" by Robert C. Martin

.. index::
   single: Concerns; balancing business and technical concerns in Scrum
   :name: emacsway-scrum-balancing-business-technical-concerns

Scrum
^^^^^


The Scrum Guide‚Ñ¢
""""""""""""""""

Dean Leffingwell –≤–æ–∑–ª–∞–≥–∞–µ—Ç –Ω–∞ Product Owner –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:

    üìù "Each project stakeholder will have their own vision, requirements, and priorities. As the primary representative to all those stakeholders, this provides a particular challenge to product owners‚Äîbecause all those requirements must be aligned and expectations must be managed toward a single solution.

    **The product owner's primary job is to merge these diverse stakeholder voices into a single prioritized backlog for the team.**
    They can do this by facilitating or leading, or some appropriate mix of each."

    -- "Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise" by Dean Leffingwell

–ù–æ –æ–±–ª–∞–¥–∞–µ—Ç –ª–∏ Product Owner –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –Ω–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç–æ–º –¥–ª—è —ç—Ç–æ–≥–æ, –∏–ª–∏ –∂–µ –æ–Ω —Å–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ñ–µ—Ä–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –æ–¥–Ω–æ–π –∏–∑ –≥—Ä—É–ø–ø —Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä–æ–≤?
–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–µ–Ω –ª–∏ –æ–Ω –∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞?

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π "The 2020 Scrum Guide‚Ñ¢" –≤–æ–∑–ª–∞–≥–∞–µ—Ç –Ω–∞ Product Owner –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –ø–æ "*maximizing the value of the product*".
–°–ª–æ–≤–æ "value" - –ø–æ–ª–∏—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ –≥–∞–π–¥–∞, –≤ —Ç.—á. –∏ –≤ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è—Ö Scrum Master –∏ Scrum Team.
–ò–∑ –≥–∞–π–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –≤–µ—Å—å–º–∞ –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç–µ–ª—å–Ω–æ.

–ò–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –æ —Ç–æ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–µ–Ω, –ø–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ, –±—ã–ª –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º, –∏–±–æ –≤ 2020 –≥–æ–¥—É –º–æ–¥–µ–ª—å —Ä–æ–ª–µ–π —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –∏, –≤–µ—Ä–æ—è—Ç–Ω–æ, –µ—â–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –º–µ–Ω—è—Ç—å—Å—è.

    üìù "The Product Owner is responsible to those funding the project for delivering the vision in a manner that maximizes their ROI.

    <...>

    The Product Owner's focus is return on investment (ROI)."

    -- "Agile Project Management with Scrum" by Ken Schwaber

..

    üìù "Four, the Product Owner needs to be accountable for value.
    In a business context what matters is revenue.
    I measure a Product Owner by how much revenue they deliver per "point" of effort."

    -- "Scrum: The Art of Doing Twice the Work in Half the Time" by Jeffrey Sutherland

..

    üìù "The Product Owner is responsible for maximizing return on investment (ROI) by identifying product features, translating these into a prioritized feature list, deciding which should be at the top of the list for the next Sprint, and continually re-prioritizing and refining the list.

    The Product Owner has profit and loss responsibility for the product, assuming it is a commercial product.
    In the case of an internal application, the Product Owner is not responsible for ROI in the sense of a commercial product (that will generate revenue), but they are still responsible for maximizing ROI in the sense of choosing ‚Äì each Sprint ‚Äì the highest-business-value lowest-cost items."

    -- "Jeff Sutherland's Scrum Handbook" by Jeff Sutherland

..

    üìù "The product owner is responsible for ensuring that good economic decisions are continuously being made at the release, sprint, and product backlog levels."

    -- "Essential Scrum: A Practical Guide to the Most Popular Agile Process" by Kenneth Rubin

..

    üìù "The Product Owner is responsible for maximizing return on investment (ROI)"

    -- "`Scrum Roles <https://less.works/less/scrum/roles>`__" by Craig Larman

–û–¥–Ω–∞–∫–æ, –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ Value –≥–æ—Ä–∞–∑–¥–æ —à–∏—Ä–µ, –æ —á–µ–º –ø–∏—à–µ—Ç Ken Schwaber –≤ —Å—Ç–∞—Ç—å–µ "`Evidence of Software's Value to an Organization <https://kenschwaber.wordpress.com/2014/03/28/evidence-of-softwares-value-to-an-organization/>`__", –≥–¥–µ Value —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö:

    1. Current value
    2. Time-to-market
    3. Ability to innovate

–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –æ–Ω–∏ –ø—ã—Ç–∞–ª–∏—Å—å —Ä–µ—à–∏—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ–∂–µ —Å–≤—è–∑–∞–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:

    üìù "One common approach is to hire a project manager to oversee the team's day-to-day work.
    The project manager does the work that management may feel is too important to ignore but not important enough to distract from their own pressing agendas.
    Though this is very common‚Äîalmost ubiquitous‚Äîthe approach in fact slows product delivery and may reduce quality and profitability.
    First, the organization is building a product rather than carrying out a project.
    When project development completes, the product is still in the field and questions of maintenance and added feature development find only awkward answers.
    **Organizationally separating product creation from ongoing development ("maintenance") creates many problems.**
    Secondly, the company rarely gives the project manager responsibility for value such as ROI or net present value (see Value and ROI), so his or her incentive is to deliver as fast as possible within the financial constraints.
    **Without this responsibility, the project manager is more likely to make short-term decisions with long-term consequences, and short-term decisions tend not to have positive long-term consequences.**"

    -- "A Scrum Book: The Spirit of the Game" by Jeff Sutherland, James Coplie, chapter "11 Product Owner"

–ö–∞–∫–∏–µ –≤—ã–≤–æ–¥—ã –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?

–†–µ—à–∞—è –æ–¥–Ω—É –ø—Ä–æ–±–ª–µ–º—É, –æ–Ω–∏ —Å–æ–∑–¥–∞–ª–∏ –¥—Ä—É–≥—É—é (—Å–º. –¥—Ä—É–≥–∏–µ —Ü–∏—Ç–∞—Ç—ã Jeff Sutherland –Ω–∞ —ç—Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ).
–° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, Product Owner —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–º –ª–∏—Ü–æ–º –∏ —Ç–µ—Ä—è–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç —Å–≤–æ–µ–π –ø–æ–∑–∏—Ü–∏–∏, –∞ –∑–Ω–∞—á–∏—Ç, –≤ —Å–∏–ª—É –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –∏—Å–∫–∞–∂–µ–Ω–∏–π –∏ –¥–∞–≤–ª–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤, –æ–Ω –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–µ–¥–≤–∑—è—Ç, –∏ –±—É–¥–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–º–∏ –±–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –≤ —É—â–µ—Ä–± –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç —Ä–∞–∑–≤–∏—Ç—ã–º :ref:`—Å–∏—Å—Ç–µ–º–Ω—ã–º –º—ã—à–ª–µ–Ω–∏–µ–º –∏ –≤–æ–ª–µ–π <emacsway-planning-technical-task>`.

–ù—É –∞ –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–∏–∫–∞–∫–∏—Ö –º–µ—Ç–æ–¥–∏–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä–æ–≤ Scrum –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç, —Ç–æ –≤ —Ä–∞–Ω–Ω–µ–π –≤–µ—Ä—Å–∏–∏ "The 2011 Scrum Guide‚Ñ¢" —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–∞–ª—Å—è —Ç–µ–º, —á—Ç–æ Product Owner –Ω–µ –º–æ–≥ –Ω–∞–≤—è–∑—ã–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, –æ—Å—Ç–∞–≤–ª—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π Quality –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, :ref:`–∫–∞–∫ –∏ –≤ XP1 <emacsway-xp1-balancing-business-technical-concerns>`:

    üìù "They [The Development Team] are self-organizing.
    No one (not even the Scrum Master) tells the Development Team how to turn Product Backlog into Increments of potentially releasable functionality;"

    -- "The 2011 Scrum Guide‚Ñ¢"

–ò–º–µ–Ω–Ω–æ –æ–± —ç—Ç–æ–º –≥–æ–≤–æ—Ä–∏—Ç Jeffrey Sutherland –≤ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ–º—Å—è.

–ê –≤–æ—Ç –≤ –≥–∞–π–¥–µ 2020 –≥–æ–¥–∞ —ç—Ç–æ –∑–≤—É—á–∏—Ç —É–∂–µ —Ç–∞–∫:

    üìù "They [Scrum Team] are also self-managing, meaning they internally decide who does what, when, and how."

    -- "`The 2020 Scrum Guide‚Ñ¢ <https://scrumguides.org/scrum-guide.html>`__"

, –≥–¥–µ Scrum Team —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –∏ Product Owner —Ç–æ–∂–µ, —á—Ç–æ –≤–Ω–æ—Å–∏—Ç –ø—É—Ç–∞–Ω–∏—Ü—É –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ Product Owner —Ç–µ–ø–µ—Ä—å —É–∂–µ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é (how).
–ü—Ä–∏—á–µ–º, —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–æ –±—ã–ª–æ, –∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–≥–∞–¥–∞—Ç—å—Å—è, –∏–∑-–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –º–µ–∂–¥—É Product Owner –∏ Development Teams:

    üìù "One Team, Focused on One Product

       The goal was to eliminate the concept of a separate team within a team that has led to "proxy" or "us and them" behavior between the PO and Dev Team.
       There is now just one Scrum Team focused on the same objective, with three different sets of accountabilities: PO, SM, and Developers."

    -- "`Changes between 2017 and 2020 Scrum Guides <https://scrumguides.org/revisions.html>`__"

–û–¥–Ω–∞–∫–æ, –ø—Ä–∏ —ç—Ç–æ–º Quality —Å–¥–µ–ª–∞–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π, :ref:`–∫–∞–∫ –∏ –≤ XP2 <emacsway-xp2-balancing-business-technical-concerns>`:

    üìù "During the Sprint: Quality does not decrease;"

    -- "`The 2020 Scrum Guide‚Ñ¢ <https://scrumguides.org/scrum-guide.html>`__"

–ê –≤—Å–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω—ã —É—Å—Ç—Ä–∞–Ω—è—Ç—å—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ:

    üìù "If any aspects of a process deviate outside acceptable limits or if the resulting **product is unacceptable**, the process being applied or the **materials being produced must be adjusted**.
    The adjustment must be made **as soon as possible to minimize further deviation**".

    -- "`The 2020 Scrum Guide‚Ñ¢ <https://scrumguides.org/scrum-guide.html>`__"

–ò –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏ –æ –ø—Ä–æ–±–ª–µ–º–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:

    üìù "Adaptation becomes more difficult when the people involved are not empowered or self-managing."

    -- "`The 2020 Scrum Guide‚Ñ¢ <https://scrumguides.org/scrum-guide.html>`__"

–°–∞–º Ken Schwaber –ø–æ–¥ "–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é" –ø–æ–Ω–∏–º–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Technical Debt:

    üìù "Transparency means the software is ready.
    It can either be immediately deployed or built upon without regression.
    **It has no technical debt.**"

    -- "`Can Software Developers Meet the Need? <https://kenschwaber.wordpress.com/2014/04/09/can-software-developers-meet-the-needs/>`__" by Ken Schwaber

..

    üìù "I also reminded the team members that Scrum requires transparency.
    When the Team demonstrates functionality to the Product Owner and stakeholders at the Sprint review, those viewing the functionality have a right to presume that the code is complete, meaning not only that the code is written but also that it is written according to standards, easy to read, refactored, unit tested, harness tested, and even functionality tested.
    If this isn't true, the Team isn't allowed to demonstrate the functionality, because in that case, the viewer's assumption would be incorrect."

    -- "Agile Project Management with Scrum" by Ken Schwaber

Jeff Sutherland –≤–æ–∑–ª–∞–≥–∞–µ—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ Technical Debt –Ω–∞ Definition of Done:

    üìù "In the long run, Definition of Done helps to remove technical debt."

    <...>

    With a good Definition of Done, the team will avoid technical debt."

    -- "A Scrum Book: The Spirit of the Game" by Jeff Sutherland, James Coplie, chapter "82 Definition of Done"

Jeff Sutherland —Ç–∞–∫ –∂–µ —Å–æ–≤–µ—Ç—É–µ—Ç —É—Å—Ç—Ä–∞–Ω—è—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –≤ –≥–ª–∞–≤–µ "81 Whack the Mole" –∫–Ω–∏–≥–∏ "A Scrum Book: The Spirit of the Game" by Jeff Sutherland, James Coplie (—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –æ–±—ä–µ–º–Ω—ã–π –¥–ª—è –µ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è).

–ê –±–∞–ª–∞–Ω—Å –±–∏–∑–Ω–µ—Å –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è —Ç–µ–º, —á—Ç–æ —Ä–µ—à–µ–Ω–∏—è Product Owner –∏–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–µ–º—ã:

    üìù "For Product Owners to succeed, the entireorganization must respect their decisions.
    These decisions are visible in the content and ordering of the Product Backlog,
    and through the **inspectable** Increment at the Sprint Review."

    -- "`The 2020 Scrum Guide‚Ñ¢ <https://scrumguides.org/scrum-guide.html>`__"

–ê –∏–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–µ—Ç –∏—Ö —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—Ä—É–≥ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö (–∫–æ–º–∞–Ω–¥–∞) –∏ –≤–Ω–µ—à–Ω–∏—Ö —Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä–æ–≤:

    üìù "Scrum Definition: The **Scrum Team and its stakeholders inspect** the results and adjust for the next Sprint.

    <...>

    Sprint Review: During the event, the **Scrum Team and stakeholders review** what was accomplished in the Sprint
    and what has changed in their environment."

    -- "`The 2020 Scrum Guide‚Ñ¢ <https://scrumguides.org/scrum-guide.html>`__"

–≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.
–í –±–æ–ª—å—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞—Ö –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä–∞–º–∏ —Ç–∏–ø–∞ QAW, Mini-QAW, etc.


–ö –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫—É –∑–∞ —Å—É—Ç—å—é
"""""""""""""""""""""""""

Bertrand Meyer –±—ã–ª –ø—Ä–∞–≤ - –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø–æ–Ω—è—Ç—å —Å—É—Ç—å –≤–µ—â–µ–π - —ç—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫—É.
Jeffrey Sutherland –æ —Ç–æ–º, –∫–∞–∫ –∏ –∑–∞—á–µ–º –æ–Ω –≤–≤–µ–ª —Ä–æ–ª—å Product Owner:

    üìù "When I started the first Scrum team in 1993, I didn't have a Product Owner.
    I was part of the leadership team and had a bunch of other responsibilities besides figuring out exactly what the team should do in each Sprint.
    I carried out management and marketing duties, dealt with customers, and plotted strategy.
    But in that first Sprint I figured I could handle the Backlog.
    I just needed to make sure I had enough "stories" and features for the team to work on during the next Sprint.
    The problem was, after the second Sprint we introduced the Daily Stand-up meeting.
    Velocity went up 400 percent in the next Sprint, and the team finished in a week what we thought would take us a month.
    There was no more Backlog for them to work on! I thought I'd have a month to create more "stories." A great problem to have, admittedly, but one that had to be addressed.
    So I thought about this role of Product Owner and what qualities someone would need to execute it properly.

    My inspiration for the role came from Toyota's Chief Engineer.
    A Chief Engineer at Toyota is responsible for a whole product line, such as the Corolla or the Camry.
    To do this, they have to draw on the talents of groups specializing in body engineering, or chassis, or electrical, or whatever.
    The Chief Engineer has to draw from all those groups to create a cross-functional team capable of creating a car.
    Outside of Toyota everyone thinks of these legendary Chief Engineers (or Shusas, as they were originally called) as all-powerful leaders of the "Toyota Way." And in a way they are.
    But what they don't have is authority.
    No one reports to them‚Äîrather, they report to their own groups.
    People can tell Chief Engineers that they're wrong, so they have to make sure they're right.
    They don't give anyone performance appraisals or promotions or raises.
    But they do decide on the vision of the car, and how the car will be made‚Äîby persuasion, not coercion.

    It's this idea that I wanted to embody within Scrum.
    John Shook of the Lean Enterprise Institute once began his description of the Chief Engineer role by quoting the US Marine Corps leadership manual:

    "An individual's responsibility for leadership is not dependent on authority.‚Ä¶ the deep-rooted assumption that authority should equal responsibility is the root of much organizational evil.
    I believe misunderstanding around this issue is rampant, problematic, and runs so deep in our consciousness that we don't even realize it." [Shook, John. "The Remarkable Chief Engineer." Lean Enterprise Institute, February 3, 2009]

    Reflecting on my time at West Point and in Vietnam, I found myself agreeing that leadership has nothing to do with authority.
    Rather, it has to do with‚Äîamong other things‚Äîknowledge and being a servant-leader.
    The Chief Engineer can't simply say something has to be done a particular way.
    He has to persuade, cajole, and demonstrate that his way is the right way, the best way.
    It usually takes someone with thirty years of experience to fill the role.
    I wanted that in Scrum, but I'm also well aware that very few people have that level of skill and experience.
    So I split the role in two, giving the Scrum Master the how and the Product Owner the what.

    Even in those early days of Scrum I knew that I needed someone who was deeply connected to the customer.
    The Product Owner needed to be able to deliver feedback to the team from the customer each and every Sprint.
    They needed to spend half their time talking to the people buying the product (getting their thoughts on the latest incremental release and how it delivered value) and half their time with the team creating the Backlog (showing them what the customers valued and what they didn't)."

    -- "Scrum: The Art of Doing Twice the Work in Half the Time" by Jeffrey Sutherland

–û—Ç–¥–µ–ª—å–Ω–æ —Å–ª–µ–¥—É–µ—Ç –≤—ã–¥–µ–ª–∏—Ç—å –¥–≤–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞, –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä–Ω–µ–º –ø—Ä–æ–±–ª–µ–º –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ Scrum-–ø—Ä–æ–µ–∫—Ç–æ–≤:

    üìù "So I split the role in two, giving the Scrum Master the **how** and the Product Owner the **what**.

    <...>

    The Scrum Master and the team are responsible for **how fast they're going and how much faster they can get**.
    The Product Owner is accountable for **translating the team's productivity into value**."

    -- "Scrum: The Art of Doing Twice the Work in Half the Time" by Jeffrey Sutherland

–ò–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, Product Owner –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å (problem space), –∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞–¥–ª–µ–∂–∞—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (solution space).

–° –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å–Ω–∏–º–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —É—Ö—É–¥—à–µ–Ω–∏–µ —Ç–µ–º–ø–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–æ–π —ç—Ç–æ–≥–æ —É—Ö—É–¥—à–µ–Ω–∏—è —Å—Ç–∞–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–≥–ª–∞—Å–∏–ª–∞—Å—å –ø—Ä–æ—Ç–∏–≤ —Å–≤–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º Product Owner, –ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —Ç–µ–º —Å–∞–º—ã–º –æ–Ω–∞ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –µ–º—É —Å–≤–æ—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.
–ò–º–µ–Ω–Ω–æ —ç—Ç—É –æ—à–∏–±–∫—É —è –Ω–µ—Ä–µ–¥–∫–æ –Ω–∞–±–ª—é–¥–∞–ª —É –º–∞–ª–æ–æ–ø—ã—Ç–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∏, —É–≤—ã, –∫–æ–≥–¥–∞ –ø–∞–¥–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞—á–∏–Ω–∞–ª–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ä–æ–∫–∞–º–∏, —Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ "–í—ã –∂–µ —Å–∞–º–∏ —Ç–∞–∫ —Ä–µ—à–∏–ª–∏" –∏ "–í–∞—Å –∂–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª–∏" –Ω–µ –ø–æ–º–æ–≥–∞–ª–∏ –∏–º –ø–µ—Ä–µ–ª–æ–∂–∏—Ç—å –≤–∏–Ω—É –Ω–∞ Product Owner.
–ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –∑–∞ —ç—Ç–∏–º —Å–ª–µ–¥–æ–≤–∞–ª–∏ –∫–∞–¥—Ä–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è.
–ó–∞—á–∞—Å—Ç—É—é Product Owner —É–≤–µ—Ä–µ–Ω –≤ —Ç–æ–º, —á—Ç–æ, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–≥–ª–∞—Å–∏–ª–∞—Å—å, —Ç–æ –æ–Ω–∞ –∑–Ω–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∏ —Ç—Ä–µ–∑–≤–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é.

–¢—É—Ç –Ω—É–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ Product Owner –≤ Scrum –æ—Ç–≤–µ—á–∞–µ—Ç –∫–∞–∫ –∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ, —Ç–∞–∫ –∏ –∑–∞ –Ω–µ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –≤ –æ—Ç–ª–∏—á–∏–∏ –æ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, SAFe, –≥–¥–µ –∑–∞ NFR –æ—Ç–≤–µ—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä.

–î—Ä—É–≥–æ–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –∂–µ –ª–æ–≤—É—à–∫–∏ - —ç—Ç–æ –∫–æ–≥–¥–∞ –≤—Å–µ –¥—É–º–∞—é—Ç, —á—Ç–æ ":ref:`–ø–æ–∑–∂–µ –∏—Å–ø—Ä–∞–≤–∏–º <emacsway-agile-common-planning-errors>`".
–û–¥–Ω–∞–∫–æ, —Å–∞–º—ã–π –≤—ã–≥–æ–¥–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–≥—É–±–æ —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è, - —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å, –ø–æ–∫–∞ –≤–µ–ª–∏—á–∏–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ –Ω–∞–∏–º–µ–Ω—å—à–∞—è.
–ß–µ–º –±–æ–ª—å—à–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è :ref:`—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ <emacsway-compound-interest>`, —Ç–µ–º –±–æ–ª—å—à–µ :ref:`–ø–∞–¥–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ <emacsway-agile-development-difficulties>`, –∏ —Ç–µ–º –º–µ–Ω—å—à–µ –æ—Å—Ç–∞–µ—Ç—Å—è —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏.
–ü–æ—Ç–æ–º –±—É–¥–µ—Ç –º–µ–Ω–µ–µ –≤—ã–≥–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á–µ–º —Å–µ–π—á–∞—Å.

    | \- We don't have time to do it right!
    | \- Do you have time to do it twice?

    -- `Randy Shoup <https://www.infoq.com/presentations/microservices-data-centric>`_, VP Engineering at Stitch Fix in San Francisco

–≠—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å –æ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞ :ref:`YAGNI <emacsway-yagni>`, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è —Ç–µ–º, —á—Ç–æ:

1. YAGNI —É–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å—é –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
2. YAGNI –æ–ø—Ä–∞–≤–¥–∞–Ω –ª–∏—à—å –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –±—É–¥—É—â–µ–º –Ω–µ –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –¥–æ—Ä–æ–∂–µ, —á–µ–º —Å–µ–π—á–∞—Å.
3. YAGNI –∏–º–µ–µ—Ç —Ü–µ–ª—å—é —Å–≥–ª–∞–¥–∏—Ç—å "`Design Payoff Line <https://martinfowler.com/bliki/DesignPayoffLine.html>`__" –≤–µ—Ä–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è, –∞ –Ω–µ –ø–æ–¥–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã–º.
4. YAGNI –∏–º–µ–µ—Ç —Ü–µ–ª—å—é –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å –Ω–∞–∏–ª—É—á—à–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ –±–∞–ª–∞–Ω—Å–µ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, –∞ –Ω–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –≤ —É–≥–æ–¥—É –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–º.
5. YAGNI –¥–æ–ª–∂–µ–Ω —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞—Ç—å —ç–≤–æ–ª—é—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∞ –Ω–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –µ–π.

YAGNI –∫–∞–∫ —Ä–∞–∑ –∏ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–º —Å–∞–º—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è Product Owner, –Ω–µ –∂–µ—Ä—Ç–≤—É—è –ø—Ä–∏ —ç—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã.


.. index::
   single: ATAM; in Agile
   single: Concerns; balancing business and technical concerns with ATAM
   :name: emacsway-agile-atam

ATAM in Agile
^^^^^^^^^^^^^

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ATAM –≤ Agile-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ):

- "`Insights from 15 Years of ATAM Data: Towards Agile Architecture <https://www.researchgate.net/publication/276317148_Insights_from_15_Years_of_ATAM_Data_Towards_Agile_Architecture>`__" by Stephany Bellomo, Ian Gorton, and Rick Kazman, IEEE Software, September/October, 2015, 32:5, 38-45

..

    üìù "Agile teams strive to **balance short term feature development with longer term quality concerns**.
    These evolutionary approaches often hit a "complexity wall" from the cumulative effects of unplanned changes, resulting in unreliable, poorly performing software.
    Consequently, there is renewed focus on approaches to address architectural concerns within the Agile community.
    We present an analysis of quality attribute concerns from 15 years of Architecture Trade-off Analysis Method data, gathered from 31 projects.
    We found that modifiability is the dominant concern across all project types; additionally there was considerable focus on performance, availability, and interoperability.
    For information technology projects, a relatively new quality‚Äîdeployability‚Äîhas emerged as a key concern.
    Our results provide insights for Agile teams allocating architecture-related tasks to iterations.
    For example they can use these results to create checklists for release planning or retrospectives to help assess whether a given quality should be addressed to support future needs.

    <...>

    One of the major challenges Agile teams face in building an architecture foundation is balancing the competing concerns of delivery of near-term functional requirements (based on the Agile philosophy of delivering user value early and often) and near and long term quality attribute goals (without which the project can grind to a halt as system complexity makes efficient modifications impossible).
    In particular, quality attribute (QA) prioritization can be especially difficult in early increments, and a wrong decision can have serious ramifications resulting in hard-to-modify, unreliable, slow, or insecure systems [5].

    5. S. Bellomo, R. Nord, and I. Ozkaya. A Study of Enabling Factors for Rapid Fielding; Combined Practices to Balance Tension between Speed and Stability Proceedings of International Conference on Software Engineering 2013."

    -- "`Insights from 15 Years of ATAM Data: Towards Agile Architecture <https://www.researchgate.net/publication/276317148_Insights_from_15_Years_of_ATAM_Data_Towards_Agile_Architecture>`__" by Stephany Bellomo, Ian Gorton, and Rick Kazman, IEEE Software, September/October, 2015

–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ ATAM –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∑–¥–µ—Å—å:

- "`ATAM: Method for Architecture Evaluation <https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=5177>`__" by  Rick Kazman, Mark H. Klein, Paul C. Clements (`pdf <https://resources.sei.cmu.edu/asset_files/TechnicalReport/2000_005_001_13706.pdf>`__, `collection <https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=513908>`__)

–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ –æ–±–µ —ç—Ç–∏ —Å—Ç–∞—Ç—å–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ "`ISO/IEC/IEEE 42030:2019 Software, systems and enterprise ‚Äî Architecture evaluation framework <https://www.iso.org/standard/73436.html>`__".

–°–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–∫–∂–µ —Å—Ç–∞—Ç—å–∏ –ø—Ä–æ Mini-QAW –≤ Agile:

- "`Discover Quality Requirements with the Mini-QAW. A short and fun elicitation workshop for Agile teams and architects. <https://re-magazine.ireb.org/articles/discover-quality-requirements-with-the-mini-qaw>`__" by Thijmen de Gooijer Michael Keeling Will Chaparro
- "`Quality Attribute Workshop Participants Handbook <https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=4995>`__" by Mario R. Barbacci, Robert J. Ellison, Charles B. Weinstock, William G. Wood (`pdf <https://resources.sei.cmu.edu/asset_files/SpecialReport/2000_003_001_13640.pdf>`__)
- "`Facilitating the Mini-Quality Attributes Workshop. A Lightweight, Architecture-Focused Method. <https://resources.sei.cmu.edu/asset_files/Presentation/2014_017_101_89563.pdf>`__" by Will Chaparro IBM, Michael Keeling IBM

–°–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–∫–∂–µ –æ "Lightweight Architecture Evaluation (LAE)" –≤ "Software Architecture in Practice" 4th edition by Len Bass, Paul Clements, Rick Kazman.


.. index::
   single: Concerns; balancing business and technical concerns with fixed iteration ratio
   :name: emacsway-agile-balancing-business-technical-concerns-with-fixed-iteration-ratio

–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    üìù "Business should sequence stories.
    Business people understand uncertainty in estimates.
    They face risk all the time with financial projections.
    They also understand the cost of reworking in the cases where reworking is an issue.
    If they wish to run a risk in order to get better value now, it is really their call.
    It is the programmers' task to make the risk visible, not to make the decision for the customer.

    While this arrangement is the ideal, sometimes you need something extra to make it work, perhaps allowing developers to choose a certain amount of [technical high-risk] stories per iteration so that they can bring the risk forward."

    -- "Planning Extreme Programming" by Kent Beck, Martin Fowler, "Chapter 13. Ordering the Stories :: Negotiating Between the Two"

..

    üìù "–Ø –≤—Å—ë –µ—â–µ —Å—á–∏—Ç–∞—é —Ç–µ—Ö–Ω–∏–∫—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –∫–ª–∞—Å—Å–Ω–æ–π –∏ —á–∞—Å—Ç–æ –µ—ë –∏—Å–ø–æ–ª—å–∑—É—é.
    –ú–µ–ª–∫–∏–µ —Ç–µ—Ö-–∏—Å—Ç–æ—Ä–∏–∏, –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞–±–æ—Ç—É, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –±–æ–ª—å—à–∏–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ç–µ—Ö –±–µ–∫–ª–æ–≥, –≤–∏–¥–∏–º—ã–π product owner'—É, –Ω–æ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–æ–º–∞–Ω–¥–æ–π.
    –ö–æ–º–∞–Ω–¥–∞ –∏ product owner –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç—Å—è –æ –ø—Ä–∞–≤–∏–ª–µ, –∫ –ø—Ä–∏–º–µ—Ä—É: 10-20% –Ω–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞ —Ç–µ—Ö-–∏—Å—Ç–æ—Ä–∏–∏.
    –¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Å—Ö–µ–º—ã, –∫–∞–∫ focus factor –∏–ª–∏ time reports, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏—é.
    –°–ø—Ä–æ—Å–∏—Ç–µ –Ω–∞ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–µ: "–ì—Ä—É–±–æ, —Å–∫–æ–ª—å–∫–æ –Ω–∞—à–µ–π —ë–º–∫–æ—Å—Ç–∏ —Å–ø—Ä–∏–Ω—Ç–∞ —É—à–ª–æ –Ω–∞ —Ç–µ—Ö-–∏—Å—Ç–æ—Ä–∏–∏, –∏ –∫–∞–∂–µ—Ç—Å—è –ª–∏, —á—Ç–æ —ç—Ç–æ –±—ã–ª–∞ —Ö–æ—Ä–æ—à–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è?

    I still find tech stories to be a great pattern and use it a lot.
    Smaller tech stories are just embedded into the day-to-day work, while larger stories are written down and placed in a tech backlog, visible to the product owner but managed by the team.
    The team and product owner agree on a guideline such as "10-20% of our time is spent on tech stories".
    No need for elaborate tracking schemes like focus factor or time reports, just use gut feel.
    Ask at the retro, "Roughly how much of our sprint capacity did we spend on tech stories, and did that feel about right?"".

    -- "Scrum and XP from the Trenches: How We Do Scrum" 2nd edition by Henrik Kniberg, –ø–µ—Ä–µ–≤–æ–¥ –ø–æ–¥ —Ä–µ–¥–∞–∫—Ü–∏–µ–π –ê–ª–µ–∫—Å–µ—è –ö—Ä–∏–≤–∏—Ü–∫–æ–≥–æ


Open Agile Architecture‚Ñ¢
^^^^^^^^^^^^^^^^^^^^^^^^

    üìù "It is worth, at this point, returning to Fowler's distinction [Fowler 2019] between code refactoring and architectural restructuring. Fowler would strongly promote the view that code refactoring requires no justification; rather it is part of a developer's "day job". This does not mean that we have to take on a massive code restructuring exercise for a legacy codebase; on the contrary, there may be no reason whatsoever to restructure the code for a stable legacy project. However, that said, developers should refactor their code when the opportunity arises. Such activity constitutes a "Type 2" decision as documented in [Ries 2011].

    Architectural refactoring (restructuring), however, often requires explicit investment because the required effort is significant. In such cases, it is incumbent on development teams and architects to "sell" the refactoring in monetary, time, or customer success terms. For example, "if we perform refactoring A, the build for Product B will be reduced by seven minutes, resulting in us being able to deploy C times more frequently per day"; or, "implementing refactoring D will directly address key Customer E's escalated pain point; their annual subscription and support fee is $12 million per annum". Note, however, that claims that "refactoring F will make us G% more productive" should be avoided as software productivity is notoriously difficult to measure."

    - [Fowler 2019] Refactoring: Improving the Design of Existing Code, by Martin Fowler, January 2019, published by Addison-Wesley
    - [Ries 2011] The Lean Startup: How Constant Innovation Creates Radically Successful Businesses, by Eric Ries, October 2011, published by Portfolio Penguin

    -- "Open Agile Architecture‚Ñ¢" by The Open Group, Chapter "`6.5.1. Justifying Ongoing Investment in Architectural Refactoring <https://pubs.opengroup.org/architecture/o-aa-standard-single/#KLP-CAR-justifying>`__"


–°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ
^^^^^^^^^^^^^^^^^^

–°–º. "`Systems Thinking <https://less.works/less/principles/systems-thinking.html>`__" by Craig Larman (`–Ω–∞ —Ä—É—Å—Å–∫–æ–º <https://less.works/ru/less/principles/systems-thinking.html>`__).


–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞
===============================

–ü—Ä–æ–±–ª–µ–º–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–µ–∂–¥—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –±–∏–∑–Ω–µ—Å–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ –ø–æ—Å–≤—è—Ç–∏–ª–∏ —Å–≤–æ–∏ —Å—Ç–∞—Ç—å–∏ –¥–∞–∂–µ —Ç–∞–∫–∏–µ –≤—Å–µ–º–∏—Ä–Ω–æ-–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–≤–µ—Ç–∏–ª–∞, –∫–∞–∫ Gregor Hohpe, –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–ª—Å—è –æ–±—ä—è—Å–Ω–∏—Ç—å –±–∏–∑–Ω–µ—Å—É –≤–∞–∂–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ :ref:`—Ñ–æ–Ω–¥–æ–≤—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤ <emacsway-architecture-options>`.

–ê Ward Cunningham –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä—É :ref:`—Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (TechnicalDebt) <emacsway-compound-interest>`, —Ö–æ—Ä–æ—à–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â—É—é —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é velocity –ø—Ä–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å–µ —Ä–µ—à–µ–Ω–∏–π –≤ –ø–æ–ª—å–∑—É –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.

–î–∞–∂–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–∏ Agile, —Ç–∞–∫–∏–µ, –∫–∞–∫ Ron Jeffries, –∏–º–µ–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –±–∏–∑–Ω–µ—Å–∞, –∏ —Ç–µ—Ä–º–∏–Ω Story Point –≤–æ–∑–Ω–∏–∫ –∏–º–µ–Ω–Ω–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ –æ–Ω–∏ `–Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é –±–∏–∑–Ω–µ—Å–∞, –ø–æ—á–µ–º—É 2 –∏–¥–µ–∞–ª—å–Ω—ã—Ö –¥–Ω—è –∑–∞–Ω–∏–º–∞–ª–∏ 5 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π <https://twitter.com/RonJeffries/status/1052858860539658240?s=20>`__:

    üìù "we estimated stories initially in "ideal time", later in points, tracked number accomplished to adjust how many to pull each iteration.
    switched to points because ideal time confused people (why did 2 day story take 5 days). 

    it worked, i think, because we had low politics."

    -- `Ron Jeffries <https://twitter.com/RonJeffries/status/1052858860539658240?s=20>`__

–ü–æ —Å–ª–æ–≤–∞–º Craig Larman, –ø—Ä–æ–±–ª–µ–º—ã –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –¥–∞–∂–µ –≤ —Ç–∞–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö, –∫–∞–∫ Microsoft, —è–≤–ª—è—é—â–∏—Ö—Å—è "–∫–æ–ª—ã–±–µ–ª—å—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã" (–æ—Ç–∫—É–¥–∞ –≤—ã—à–ª–∏ —Ç–∞–∫–∏–µ –∞–≤—Ç–æ—Ä—ã, –∫–∞–∫ Steve McConnell), —Å–º. "`Systems Thinking <https://less.works/less/principles/systems-thinking.html>`__" by Craig Larman (`–Ω–∞ —Ä—É—Å—Å–∫–æ–º <https://less.works/ru/less/principles/systems-thinking.html>`__).

–ù—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –µ—â–µ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é.

–¢–µ—Ö–Ω–∞—Ä—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –æ—Ç—Å—Ç–∞–∏–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ—Ç–æ–º—É, —á—Ç–æ –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –µ–≥–æ velocity.
–û–Ω –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –∑–∞ —Å–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏ –≤–∏–Ω–æ–≤–∞—Ç—ã–º –±—É–¥–µ—Ç –∏–º–µ–Ω–Ω–æ –æ–Ω.
–ò –¥–∞–∂–µ, –µ—Å–ª–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –Ω–µ –æ–±–≤–∏–Ω–∏—Ç –µ–≥–æ —è–≤–Ω–æ, –Ω–æ –æ–Ω–æ –º–æ–∂–µ—Ç —ç—Ç–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å ("–≤–∑—è—Ç—å –Ω–∞ –∫–∞—Ä–∞–Ω–¥–∞—à") –∏ —É—á–µ—Å—Ç—å —ç—Ç–æ –≤ –±—É–¥—É—â–µ–º –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π (—á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –µ—â–µ –±–æ–ª—å—à–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å—Ç—Ä–∞—Ö–∞ –∏–∑-–∑–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –±—É–¥—É—â–µ–≥–æ).

–ù–∞–∫–æ–Ω–µ—Ü, –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –±–∏–∑–Ω–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–≥–æ–¥–Ω—è –≤—ã–¥–∞–µ—Ç –∏–Ω–¥—É–ª—å–≥–µ–Ω—Ü–∏–∏ –Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∑–∞–≤—Ç—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–π —ç—Ç–∏ –∏–Ω–¥—É–ª—å–≥–µ–Ω—Ü–∏–∏ –º–æ–∂–µ—Ç –ª–µ–≥–∫–æ –æ—Ç–æ–∑–≤–∞—Ç—å, –∏ —Ç–µ—Ö–Ω–∞—Ä–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π –Ω–∞–µ–¥–∏–Ω–µ.
–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–∞–∫ –∂–µ –±—ã—Å—Ç—Ä–æ, –∫–∞–∫ –æ—Ç–∑—ã–≤–∞—é—Ç—Å—è –∏–Ω–¥—É–ª—å–≥–µ–Ω—Ü–∏–∏, —á—Ç–æ —Å—Ç–∞–≤–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–µ—Ä—Å–æ–Ω—ã, –∫–æ—Ç–æ—Ä–∞—è, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤–µ—á–Ω–æ.

–≠—Ç–∏ —Ä–∏—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ "`–≠—Ñ—Ñ–µ–∫—Ç–∞ –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏ <https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%BD%D0%B5%D0%BE%D0%B4%D0%BD%D0%BE%D0%B7%D0%BD%D0%B0%D1%87%D0%BD%D0%BE%D1%81%D1%82%D0%B8>`__", –≤—ã–Ω—É–∂–¥–∞–µ—Ç —Ç–µ—Ö–Ω–∞—Ä—è –æ—Ç—Å—Ç–∞–∏–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ, –æ–±–ª–∞–¥–∞—é—â–µ–µ –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å—é (—Ç.–µ. –Ω–∞—Å—Ç–∞–∏–≤–∞—Ç—å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏).
–í–æ–∑–Ω–∏–∫–∞–µ—Ç "`–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ó–∞—â–∏—Ç–∞ <https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D1%89%D0%B8%D1%82%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%B7%D0%BC>`__", –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Ä–∞—Å—Ç–∏ –≤ –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç.
–≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –µ—â–µ –º—É–ª—å—Ç–∏–ø–ª–∏—Ü–∏—Ä—É–µ—Ç—Å—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å—Ä–µ–¥–∏ —Ç–µ—Ö–Ω–∞—Ä–µ–π "`–≠—Ñ—Ñ–µ–∫—Ç–æ–º –°–∞–º–æ–∑–≤–∞–Ω—Ü–∞ <https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D0%BD%D0%B4%D1%80%D0%BE%D0%BC_%D1%81%D0%B0%D0%BC%D0%BE%D0%B7%D0%B2%D0%B0%D0%BD%D1%86%D0%B0>`__".

–°—Ç—Ä–∞—Ö –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏ —É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –±–∏–∑–Ω–µ—Å–∞.
–ó–∞—á–∞—Å—Ç—É—é –æ–Ω –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ —Ç–æ–º, —Ö–≤–∞—Ç–∏—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏, –∏ –∑–∞—á–∞—Å—Ç—É—é —ç—Ç–∞ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –æ–ø—ã—Ç–æ–º –≤ –ø—Ä–æ—à–ª–æ–º.
–≠—Ç–∏ —Å—Ç—Ä–∞—Ö–∏, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, –æ–±–æ—Å–Ω–æ–≤–∞–Ω—ã, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–µ —Ç–∞–∫ —É–∂ –∏ –º–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –ø–∏—Å–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥.
–í —Å–∏–ª—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ "`–≠—Ñ—Ñ–µ–∫—Ç–∞ –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏ <https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%BD%D0%B5%D0%BE%D0%B4%D0%BD%D0%BE%D0%B7%D0%BD%D0%B0%D1%87%D0%BD%D0%BE%D1%81%D1%82%D0%B8>`__", –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –≤–∞—Ä–∏–∞–Ω—Ç—É, –æ–±–ª–∞–¥–∞—é—â–µ–º—É –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å—é, —Ç.–µ. –ª—É—á—à–µ "–∑–∞–ø–∏–ª–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –æ—Å—è–∑–∞–µ–º—É—é –±–∏–∑–Ω–µ—Å-—Ñ–∏—á—É" –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—ã—Å–∏—Ç—å velocity.

–¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∏ "`–≠—Ñ—Ñ–µ–∫—Ç –ù–µ–¥–∞–≤–Ω–µ–≥–æ <https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%BD%D0%B5%D0%B4%D0%B0%D0%B2%D0%BD%D0%B5%D0%B3%D0%BE>`__".
–ü—Å–∏—Ö–æ–ª–æ–≥, –Ω–æ–±–µ–ª–µ–≤—Å–∫–∏–π –ª–∞—É—Ä–µ–∞—Ç –î–∞–Ω–∏—ç–ª—å –ö–∞–Ω–µ–º–∞–Ω –≤—ã–¥–µ–ª–∏–ª ¬´–ø—Ä–∞–≤–∏–ª–æ –ø–∏–∫-–∫–æ–Ω–µ—Ü¬ª –Ω–∞—à–µ–π –ø–∞–º—è—Ç–∏.
–ú—ã –ø–æ–º–Ω–∏–º –ø—Ä–æ—à–ª–æ–µ –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ.
–ù–∞–∏–±–æ–ª—å—à–∏–π –≤–µ—Å –º—ã –ø—Ä–∏–¥–∞–µ–º –¥–≤—É–º –≤–∏–¥–∞–º —Å–æ–±—ã—Ç–∏–π: —Ç–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏ —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ.

–í —Å–∏–ª—É :ref:`–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –∏—Å–∫–∞–∂–µ–Ω–∏–π <emacsway-cognitive-biases>`, —Ç–µ—Ö–Ω–∞—Ä—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –∞ –±–∏–∑–Ω–µ—Å–º–µ–Ω - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.
–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
–ö —Ç–æ–º—É –∂–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ –±–∏–∑–Ω–µ—Å–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö —Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä–æ–≤ –±–∏–∑–Ω–µ—Å-–≥—Ä—É–ø–ø—ã.
–•–æ—Ä–æ—à–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ –≤–∑–∞–∏–º–æ–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ –ø–µ—Ä–µ–∫–æ—Å—ã.

    üìù "Software development is risky.
    **People involved have many fears of what may go wrong.**
    To develop effectively we must acknowledge these fears.

    **Why do we need a software process? For the same reason that we need laws, governments, and taxes: fear.**

    <...>

    Unacknowledged Fear Is the Source of All Software Project Failures

    <...>

    **In order to be successful, a development process must be instituted among customers and developers that secures certain inalienable rights.**

    <...>

    If we are going to develop well, we must create a culture that makes it possible for programmers and customers to acknowledge their fears and accept their rights and responsibilities.
    Without such guarantees, we cannot be courageous.
    We huddle in fear behind fortress walls, building them ever stronger, adding ever more weight to the development processes we have adopted.
    We continually add cannonades and battlements, documents and reviews, procedures and sign-offs, moats with crocodiles,
    torture chambers, and huge pots of boiling oil.

    But when our fears are acknowledged and our rights are accepted, then we can be courageous.
    We can set goals that are hard to reach and collaborate to make those goals.
    We can tear down the structures that we built out of fear and that impede us.
    We will have the courage to do only what is necessary and no more, to spend our time on what's important rather than on protecting ourselves."

    -- "Planning Extreme Programming" by Kent Beck, Martin Fowler, "Chapter 2. Fear"

–ì–ª–∞–≤–∞ "Chapter 2. Fear" –∫–Ω–∏–≥–∏ "Planning Extreme Programming" by Kent Beck, Martin Fowler –æ–±–ª–∞–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é, –Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤–µ–ª–∏–∫–æ–≤–∞—Ç–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å –µ—ë —Å—é–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é.


.. seealso::

   - ":ref:`emacsway-agile-nonfunctional-requirements`"
   - ":ref:`emacsway-compound-interest`"
   - ":ref:`emacsway-architecture-options`"
   - ":ref:`emacsway-agile-common-planning-errors`"
   - ":ref:`emacsway-cognitive-biases`"
   - ":ref:`emacsway-yagni`"
   - ":ref:`emacsway-software-development-economics-literature`"


   - ":ref:`emacsway-when-to-refactor`"
   - ":ref:`emacsway-when-to-write-unit-tests`"

.. todo::

   here

      - https://t.me/emacsway_log/488

   TechDebt

      - https://t.me/emacsway_log/393

   ???

      - https://t.me/emacsway_log/552
      - https://t.me/emacsway_log/157
