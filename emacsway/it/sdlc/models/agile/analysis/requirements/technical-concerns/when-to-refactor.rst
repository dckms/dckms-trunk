:canonical-base-url: https://dckms.github.io/system-architecture

.. index::
   single: Refactoring; when to do
   :name: emacsway-when-to-refactor

=================================
–ö–æ–≥–¥–∞ –¥–µ–ª–∞—Ç—å refactoring –≤ legacy
=================================

.. sectionauthor:: Ivan Zakrevsky

.. contents:: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ

–û —Ç–æ–º, –∫–æ–≥–¥–∞ –¥–µ–ª–∞—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤ —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ, –æ—Ç —Å–æ–∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏ "Refactoring: Improving the Design of Existing Code" 1st edition by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts.

    üìù "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤ —Å—Ç–∏–ª–µ –•–† –≤–æ –º–Ω–æ–≥–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç :ref:`–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤ —Å—Ç–∏–ª–µ –•–† <emacsway-when-to-write-unit-tests>`.
    –í—ã –æ–±–Ω–∞—Ä—É–∂–∏—Ç–µ, —á—Ç–æ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º, –Ω–æ–≤—ã–π –∫–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –ø–æ-–¥—Ä—É–≥–æ–º—É.
    –í–∞–º –∑–∞—Ö–æ—á–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Å—Ä–∞–∑—É.
    –ù–µ –¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ–≥–æ.
    –ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—é —Å–ª–µ–¥—É–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ.
    –ü–æ –º–µ—Ä–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É –∫–æ–¥–∞.
    –ö–æ–≥–¥–∞ –≤—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ —Ä–∞–º–∫–∞—Ö –•–†, –≤—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –≤–Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É, –æ–¥–Ω–∞–∫–æ –µ—Å–ª–∏ –≤—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –•–† —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É —á–∞—â–µ.

    –ù–∞ —Ä–∞–Ω–Ω–∏—Ö —Å—Ç–∞–¥–∏—è—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞.
    –í–æ–∑–º–æ–∂–Ω–æ, –≤ –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –∑–∞–ø—É—Ç–∞–Ω–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –≤–∞–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–±—Ä–æ—Å–∞–Ω–∞ –ø–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ –∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å –µ–µ –≤–æ–µ–¥–∏–Ω–æ.
    –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤—Å–µ —ç—Ç–∏ —Ü–µ–ª–∏, –∑–∞–ø–∏—à–∏—Ç–µ –∏—Ö –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –∏ —Ä–∞–∑–≤–µ—Å—å—Ç–µ —ç—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –≤–∏–¥–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö.
    –ö–æ–≥–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±–æ–ª—å—à–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ (–¥–ª—è —ç—Ç–æ–≥–æ –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –º–µ—Å—è—Ü—ã –∏–ª–∏ –¥–∞–∂–µ –≥–æ–¥ —Ä–∞–±–æ—Ç—ã –≤ –æ–ø–∏—Å–∞–Ω–Ω–æ–º ¬´–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–º¬ª —Å—Ç–∏–ª–µ), –º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Å–≤—è—â–µ–Ω–Ω—É—é —ç—Ç–æ–º—É –≤–µ—Å–µ–ª—É—é –≤–µ—á–µ—Ä–∏–Ω–∫—É.
    –¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–æ–∂–≥–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏.
    –•–æ—Ä–æ—à–µ–Ω—å–∫–æ –≤—ã–ø–µ–π—Ç–µ –∏ –∑–∞–∫—É—Å–∏—Ç–µ.

    –≠—Ñ—Ñ–µ–∫—Ç —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ –º–Ω–æ–≥–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    –¢–µ —á–∞—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å —á–∞—â–µ –≤—Å–µ–≥–æ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥—É—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–¥, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –•–†.
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç—Å—è –≤ –≤–æ–∑–¥—É—Ö–µ.

    Design

    Transitioning to XP design is much like :ref:`transitioning to XP testing <emacsway-when-to-write-unit-tests>`.
    You will notice that the new code feels completely different than the old code.
    You will want to fix everything at once.
    Don't.
    Take it a bit at a time.
    As you add new functionality, be prepared to refactor first.
    You are always prepared to refactor first before implementing in XP development, but you will have to do it more often as you are transitioning to XP.

    Early on in the process, have the team identify some large-scale refactoring goals.
    There may be a particularly tangled inheritance hierarchy, or a piece of functionality scattered across the system that you want to unify.
    Set these goals, put them on cards, and display them prominently.
    When you can say the big refactoring is done (it may take months or even a year of nibbling), have a big party.
    Ceremoniously burn the card.
    Eat and drink well.

    The effect of this strategy is much like the effect of the demand-driven testing strategy.
    Those parts of the system that you visit all the time in your development activities will soon feel just like the code that you are writing now.
    The overhead of extra refactorings will soon fade."

    -- "Extreme Programming Explained" 1st edition by Kent Beck, –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"

..

    üìù "–ü—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ö —Ä–∞–∑

    –î–æ–Ω –†–æ–±–µ—Ä—Ç—Å (Don Roberts) –æ–¥–Ω–∞–∂–¥—ã —Å–∫–∞–∑–∞–ª –º–Ω–µ —Å–ª–µ–¥—É—é—â–µ–µ.
    –ö–æ–≥–¥–∞ –≤—ã –¥–µ–ª–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –≤—ã –ø—Ä–æ—Å—Ç–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç–µ.
    –í–æ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –≤—ã –º–æ—Ä—â–∏—Ç–µ—Å—å –æ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ç–µ—Ö –∂–µ –¥–µ–π—Å—Ç–≤–∏–π, –Ω–æ –≤—Å–µ –∂–µ –¥–µ–ª–∞–µ—Ç–µ –∏—Ö.
    –ù–∞–∫–æ–Ω–µ—Ü, –¥–µ–ª–∞—è —ç—Ç–æ –∂–µ –≤ —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑, –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥.
    –ù–∞—á–∏–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ —Ç—Ä–µ—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤.

    The Rule of Three

    Here's a guideline Don Roberts gave me: The first time you do something, you just do it.
    The second time you do something similar, you wince at the duplication, but you do the duplicate thing anyway.
    The third time you do something similar, you refactor.
    Or for those who like baseball: Three strikes, then you refactor."

    -- "Refactoring: Improving the Design of Existing Code" 2nd edition by Martin Fowler, Kent Beck –ø–µ—Ä–µ–æ–≤–¥ –ò.–í. –ö—Ä–∞—Å–∏–∫–æ–≤–∞ –ø–æ–¥ —Ä–µ–¥–∞–∫—Ü–∏–µ–π –°.–ù. –¢—Ä–∏–≥—É–±


–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –±–∏–∑–Ω–µ—Å –Ω–µ –≤—ã–¥–µ–ª—è–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞?
=================================================================

–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –±–∏–∑–Ω–µ—Å –Ω–µ –≤—ã–¥–µ–ª—è–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞?
–°–æ–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –¥–∞–µ—Ç M.Fowler:

    üìù "–ö–æ–Ω–µ—á–Ω–æ, –º–Ω–æ–≥–∏–µ –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –¥–ª—è –Ω–∏—Ö –∫–∞—á–µ—Å—Ç–≤–æ, –∞ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –≥–ª–∞–≤–Ω–æ–µ –¥–ª—è –Ω–∏—Ö ‚Äì –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç.
    –í —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö —è –¥–∞—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Ä–Ω—ã–π —Å–æ–≤–µ—Ç: –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç–µ –∏–º –Ω–∏—á–µ–≥–æ!

    –ü–æ–¥—Ä—ã–≤–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å? –ù–µ –¥—É–º–∞—é.
    –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è ‚Äì —ç—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã.
    –ù–∞—à–∞ —Ä–∞–±–æ—Ç–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.
    –ü–æ –º–æ–µ–º—É –æ–ø—ã—Ç—É, —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –±—ã—Å—Ç—Ä–æ–º—É —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
    –ï—Å–ª–∏ –º–Ω–µ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∞ –ø—Ä–æ–µ–∫—Ç –ø–ª–æ—Ö–æ —Å–æ–≥–ª–∞—Å—É–µ—Ç—Å—è —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π, —Ç–æ –±—ã—Å—Ç—Ä–µ–µ —Å–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∞ –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é.
    –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞, –∏ —è —Å—á–∏—Ç–∞—é, —á—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å –ø–æ–º–æ—â—å—é —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.
    –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –ø–æ–¥–≥–æ–Ω—è–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–±–æ—Ç, —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã —è —Å–¥–µ–ª–∞–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ; –∫–∞–∫ –º–Ω–µ —ç—Ç–æ —É–¥–∞—Å—Ç—Å—è ‚Äì –º–æ–µ –¥–µ–ª–æ.
    –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å ‚Äì —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, –ø–æ—ç—Ç–æ–º—É —è –∏ –±—É–¥—É –∏–º –∑–∞–Ω–∏–º–∞—Ç—å—Å—è.

    Of course, many people say they are driven by quality but are more driven by schedule.
    In these cases I give my more controversial advice: Don't tell!

    Subversive? I don't think so.
    Software developers are professionals.
    Our job is to build effective software as rapidly as we can.
    My experience is that refactoring is a big aid to building software quickly.
    If I need to add a new function and the design does not suit the change, I find it's quicker to refactor first and then add the function.
    If I need to fix a bug, I need to understand how the software works‚Äîand I find refactoring is the fastest way to do this.
    A schedule-driven manager wants me to do things the fastest way I can; how I do it is my business.
    The fastest way is to refactor; therefore I refactor."

    -- "Refactoring: Improving the Design of Existing Code" by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts, –ø–µ—Ä–µ–≤–æ–¥ –°. –ú–∞–∫–∫–∞–≤–µ–µ–≤–∞

–ò–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –µ—Å–ª–∏ refactoring –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ä–æ–∫–∏ —Å–ø—Ä–∏–Ω—Ç–∞, —Ç–æ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ–æ–±—â–µ –ø–æ—Å–≤—è—â–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
–ê –µ—Å–ª–∏ refactoring –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ä–æ–∫–∏, —Ç–æ –≤ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –∫–∞–∫ —Å–Ω–∏–∑–∏—Ç—å –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –±–∞–ª–∞–Ω—Å–µ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: "`Technical Debt <https://www.martinfowler.com/bliki/TechnicalDebt.html>`__" by M.Fowler.


.. seealso::

   - https://t.me/emacsway_log/131
   - ":ref:`emacsway-when-to-write-unit-tests`"
   - ":ref:`emacsway-planning-technical-task`"
   - ":ref:`emacsway-agile-balancing-business-technical-concerns`"
   - ":doc:`/emacsway/it/sdlc/uncertainty-management/adaptation/crash-course-in-software-development-economics`"
