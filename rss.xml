<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0"><channel><title>System Architecture</title><link>https://dckms.github.io/system-architecture</link><description /><language>ru</language><copyright>2022, @dckms (&lt;a href="https://dckms.github.io/system-architecture/LICENSE" rel="nofollow"&gt;License&lt;/a&gt;)</copyright><item><title>Как пользоваться</title><link>https://dckms.github.io/system-architecture/README.html</link><description>
 
&lt;p&gt;&lt;a class="reference external" href="https://github.com/emacsway/dckms-template"&gt;Distributed Collaborative Knowledge Management System&lt;/a&gt;&lt;/p&gt;
&lt;div class="contents topic" id="id2"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id1" id="id25"&gt;Как пользоваться&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id26"&gt;Почему&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id27"&gt;Коллективность&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id5" id="id28"&gt;Субъектность&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id6" id="id29"&gt;Психология&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id7" id="id30"&gt;Экономия времени&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id8" id="id31"&gt;Навигация&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id9" id="id32"&gt;Интеграция&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id10" id="id33"&gt;Реализация&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id11" id="id34"&gt;Влияние на качество обучения&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id12" id="id35"&gt;Легкость переключения контекста&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id13" id="id36"&gt;Порядок использования&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#html" id="id37"&gt;Как собрать html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#zettelkasten" id="id38"&gt;О Zettelkasten&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id15" id="id39"&gt;Философия&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id16" id="id40"&gt;Близкие по духу системы&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#obsidian" id="id41"&gt;Obsidian&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#neuron-zettelkasten" id="id42"&gt;Neuron Zettelkasten&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#gitjournal" id="id43"&gt;GitJournal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#popular-static-site-generators" id="id44"&gt;Статические генераторы сайтов&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id18" id="id45"&gt;Другие интересные проекты&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#markdown" id="id46"&gt;Markdown&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#using-dckms-on-mobile-devices" id="id47"&gt;Как работать на мобильных устройствах&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#android" id="id48"&gt;Как работать на Android&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#iphone" id="id49"&gt;Как работать на iPhone&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id20" id="id50"&gt;Аналоги&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id21" id="id51"&gt;Интеграция с другими системами&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id22" id="id52"&gt;Интеграция с Obsidian&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#notion" id="id53"&gt;Интеграция с Notion&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#evernote" id="id54"&gt;Интеграция с Evernote&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#rss" id="id55"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#rss-mattermost" id="id56"&gt;Интегация RSS с Mattermost&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#rss-telegram" id="id57"&gt;Интегация RSS с Telegram&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#sitemap" id="id58"&gt;Sitemap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id23" id="id59"&gt;Полезные расширения&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id24" id="id60"&gt;Послесловие&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id26"&gt;Почему&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Объем информации в современном мире стал достаточно большим, и возникла потребность этим объемом как-то управлять.&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;Коллективность&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Опыт показал, что высокое качество объемного материала легче достигают &lt;strong&gt;коллективы авторов&lt;/strong&gt;, как, например:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/"&gt;.NET Microservices: Architecture for Containerized .NET Applications&lt;/a&gt;" (&lt;a class="reference external" href="https://github.com/dotnet/docs"&gt;более 4.5 тыс. форков&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/"&gt;Azure Architecture Center&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/MicrosoftDocs/architecture-center"&gt;более 1.1 тыс. форков&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Опыт Microsoft продемонстрировал высокую эффективность распределенных коллективных систем управления знаниями с открытым и неограниченным авторским кругом.&lt;/p&gt;
&lt;p&gt;Можно заметить, что некоторые пользователи ведут автономные версии форков, периодически вливая в них главный бранч.
Т.е., пользователи стремятся создавать &lt;strong&gt;собственные пространства знаний&lt;/strong&gt;, которые &lt;strong&gt;обогащаются&lt;/strong&gt; из других источников и &lt;strong&gt;дистиллируются&lt;/strong&gt; от всего лишнего.&lt;/p&gt;
&lt;p&gt;Это наводит на мысль - а что, если совместить персональную систему управления знаниями с коллективной?
Вы сами решаете, какими именно своими заметками вы хотите поделиться, а какие вы хотите добавить в свою базу от других авторов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id28"&gt;Субъектность&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;У классических коллективных систем управления знаниями на основе wiki-движков, являющихся единственным носителем инфорации, информация может быть представлена только в единственном виде, а значит, она не может удовлетворять различным потребностям разных пользователей.
Возникает противоречие между между потребностью во множестве представлений информации и единственностью возможного представления информации единичного носителя.&lt;/p&gt;
&lt;p&gt;Так же у разных пользователей существует различная потребность в объеме и полноте информации.
Что для одного пользователя представляет ценность, для другого - информационная помеха, затрудняющая навигацию по его подмножеству информации.&lt;/p&gt;
&lt;p&gt;Попытка разрешить это противоречие порождает ряд вопросов о модерации, редакционной политике, достижении консенсуса и разрешении противоречий, выработке норм поведения, управлении правами, защите от диверсий в виде уничтожения содержимого или постановки информационных помех.
Все это резко ограничивает возможность применения wiki-движков в качестве персональной системы управления знаниями.
Теряется субъектность пользователя.
Также wiki-движки затруднительно использовать в offline-режиме, особенно с мобильного телефона.&lt;/p&gt;
&lt;p&gt;Отдельные попытки решить эти проблемы, и совместить персональную и коллективную системы знаний, осуществляет Notion.
Еще интересней выглядит управление знаниями на основе простых текстовых файлов (чаще всего Markdown или reStructuredText) и системы контроля версий (обычно Git).&lt;/p&gt;
&lt;p&gt;Такие средства устраняют противоречие, которое заключается в том, что один экземпляр информации не может соответствовать потребностям множества пользователей.
Каждый пользователь сам устраивает свою базу знаний так, как считает нужным, обогащая её информацией от других пользователей посредством системы контроля версий.&lt;/p&gt;
&lt;p&gt;Именно на этой идее и построен данный проект, основная суть которого заключается в том, что &lt;strong&gt;субъектом субъектом знаний в такой моделе является именно пользователь&lt;/strong&gt;, в то время, как в большинстве других систем управления знаниями на основе wiki-движков, пользователь является, скорее, объектом системы.&lt;/p&gt;
&lt;p&gt;Распределенный подход к хранению знаний избавляет от перечисленных выше проблем - вы сами решаете, чем поделиться, и от кого и что добавить в свою базу знаний.
Можете обогащать статьи других авторов своей собственной информацией, удалять нерелевантную для вас информацию, сохраняя сфокусированность своего внимания, и делиться своими знаниями с другими специалистами, публикуя их в публичных бранчах, закрепив, при этом, свое авторство.
Ваша база знаний не обязана следовать чьим-то чужим точкам зрения.
Все как в реальной жизни.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id29"&gt;Психология&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Немаловажным является и психологический фактор.
Одно дело, когда человеку нужно представить на суд пользователей информацию, которая будет оцениваться с позиции стандартов коллектива, а другое дело, когда он просто позволяет другим пользователям использовать его персональные заметки.
Снятие психологического барьера ускоряет обмен информацией.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id30"&gt;Экономия времени&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Еще один фактор, который поспособствовал появлению этого проекта, заключается в том, что сегодня человек живет в условиях стесненного времени.
Каждому из нас есть чем поделиться и обогатить коллективные знания, но не у каждого есть время прорабатывать по этой теме статьи.
Именно поэтому короткие заметки стали сегодня так популярны.
В конечном итоге, люди тратят на Telegram (и другие мессенджеры) намного больше времени, чем требуется на написание статей.
Просто в Telegram они делают это короткими интервалами времени.&lt;/p&gt;
&lt;p&gt;В Telegram знания хорошо рождаются, но не кристализируются, из-за чего они часто тонут в безорганизованной свалке информации среди океана информационных помех.
Несмотря на факт своего существования, эта информация быстро становится бесполезной в условиях отсутствия навигации.
Возникает потребность комбинировать Telegram с другими формами управления знаниями, и желательно, чтоб эти формы обеспечивали бы как приватный, так и коллективный способ управления знаниями.&lt;/p&gt;
&lt;p&gt;Вы, наверное, замечали, как в профессиональных Telegram-чатах молодые ребята регулярно задают один и тот же вопрос.
И если на первый вопрос кто-то из экспертов ответит, то на следующий вопрос "попугайничать" уже никто из экспертов не хочет.
Тогда пытаются отвечать другие малоопытные ребята, и, зачастую, вреда от таких ответов больше, чем пользы.
Через время, отыскать правильный ответ от эксперта становится практически невозможно, так как его становится сложно выявить среди наплодившейся дезинформации.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id31"&gt;Навигация&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Возникло  противоречие: там, где можно структурировать, - там не пишут, а там, где пишут, - структурировать нельзя.
Можно ли это противоречие разрешить?&lt;/p&gt;
&lt;p&gt;Цель данного проекта заключается в разрешении этого противоречия, путем обеспечения навигации в распределенной коллективной информации коротких сообщений (заметок).
Навигация позволяет повысить реиспользуемость качественных ответов.&lt;/p&gt;
&lt;p&gt;Система управления знаниями - это, своего рода, скелет, на который налипают знания.
Без такого скелета знания просто тонут в бесструктурном и распределенном океане информационных помех.
Вы, наверное, слышали о таком антипаттерне как "коллекционер знаний" - это когда информации накапливается много, но найти что-нибудь в этом мессиве становится нереально.&lt;/p&gt;
&lt;p&gt;Навигация обеспечивается комплексом средств:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Полнотекстовый offline поиск с морфологией.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Древовидная структуризация контента. Причем, деревьев может быть множество, и они могут пересекаться между собой. Деревья навигации не обязаны воспроизводить файловую структуру документов.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Алфавитный указатель (тегирование/индексирование).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Перекрестные, и даже кросс-проектные, ссылки.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Навигация по структурированному содержанию страницы.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id32"&gt;Интеграция&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Благодаря RSS-каналу, новые сообщения можно легко отражать в Telegram-channel или в другие мессенджеры, например, в Mattermost, посредством ботов и плагинов к мессенджерам.
Таким образом достигается и цель уведомления о новых сообщениях, и сохраняется навигация по сообщениям.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id33"&gt;Реализация&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Система представляет собой минималистичный набор принципов и соглашений, реализованный на Open Source системе документирования &lt;a class="reference external" href="https://www.sphinx-doc.org/"&gt;Sphinx-doc&lt;/a&gt; и использущий reStructuredText и Markdown форматы разметок.
Sphinx-doc предоставляет и тегирование/индексирование (директива "&lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#index-generating-markup"&gt;index&lt;/a&gt;"), и перекрестные ссылки, и Table of Content (ToC, директива "&lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#table-of-contents"&gt;toctree&lt;/a&gt;"), и неограниченную иерархию файлов, и перекрестные связи между иерархиями файлов и иерархиями ToC, и клиентский полнотекстовый поиск (средствами JS браузера), и &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/extensions/todo.html"&gt;TODO&lt;/a&gt;-листы, и RSS (в виде стороннего расширения), и подсветку синтаксиса языков программирования, и расширяемость с большим количеством готовых к использованию расширений.&lt;/p&gt;
&lt;p&gt;Критически важной является &lt;a class="reference internal" href="#using-dckms-on-mobile-devices"&gt;&lt;span class="std std-ref"&gt;возможность работать offline на мобильном устройстве&lt;/span&gt;&lt;/a&gt; (используя, при этом, полнотекстовый поиск с морфологией).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id34"&gt;Влияние на качество обучения&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Вот что пишет Евгений Пешков, основатель российского DDD-сообщества, руководитель в ЦИАН:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Летом 2020 я проходил курс по Системному мышлению Левенчука. Анатолий с первых же занятий всячески рекомендует "мышление письмом".&lt;/p&gt;
&lt;p&gt;Что это?
Мышление письмом подразумевает создание конспектов занятий, статей, книг.
Но не просто переписывание слов автора, а своё собственное понимание пройденного.&lt;/p&gt;
&lt;p&gt;Почему это важно?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Лучше запоминаем. Это происходит из-за того, что мы прогоняем через себя, через внутренний диалог, через механическую память, через визуальный образ собственных слов.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Лучше понимаем. Когда мы просто мыслим, наши мысли могут быть недостаточно строго сформулированы, могут обрываться, состоять из полуобразов. Но даже с такими несформировавшимися мыслями у нас может быть ложное ощущение понятности. Когда же мы пишем - мы обязаны четко сформулировать тезисы и сложить их в определенном порядке.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Можно вернуться и доосмыслить. У нас остается артефакт, пригодный для дальнейшей проработки.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Наше знание становится отчуждаемым. Мы легко можем запостить наши мысли в телеграм или отправить другу.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Сложно взять и начать записывать, и как одна из рекомендаций в курсе была указана книга "&lt;a class="reference external" href="https://www.goodreads.com/book/show/34507927-how-to-take-smart-notes"&gt;How to Take Smart Notes&lt;/a&gt;".
И в этой книге есть еще классный поинт: если мы привыкаем делать заметки, то нам становится проще писать в целом.
Тут срабатывает привычка, но кроме этого, как я и указывал ранее, у нас накапливается определенное количество артефактов, которые мы можем легко переиспользовать.&lt;/p&gt;
&lt;p&gt;Источник: &lt;a class="reference external" href="https://t.me/dddevotion/176"&gt;https://t.me/dddevotion/176&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;На меня, в свое время, произвела сильное впечатление небольшая, и уже не самая молодая, книжечка "Как читать книги" / Поварнин Сергей, которую можно прочесть всего за один день.
Скачать можно &lt;a class="reference external" href="https://royallib.com/book/povarnin_s/kak_chitat_knigi.html"&gt;здесь&lt;/a&gt; или &lt;a class="reference external" href="https://m.vk.com/wall-56611080_127534"&gt;здесь&lt;/a&gt;.
Эту книжечку сложно переоценить - она на вес золота.&lt;/p&gt;
&lt;p&gt;Также нужно упомянуть про особое значение возможности применять принципы &lt;a class="reference internal" href="#zettelkasten"&gt;&lt;span class="std std-ref"&gt;Zettelkasten&lt;/span&gt;&lt;/a&gt; для запоминания информации и легкой навигации по ней.&lt;/p&gt;
&lt;p&gt;Ну и, раз была затронута тема, не лишне будет упомянуть "A Mind for Numbers: How to Excel at Math and Science" by Barbara Ann Oakley, перевод: "Думай как математик. Как решать любые проблемы быстрее и эффективнее." / Барбара Оакли.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id35"&gt;Легкость переключения контекста&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Специалисты, не работающие с информацией письменно, нередко испытывают затруднения с частым переключением контекста на работе.
Сложность восстанавления в памяти исходного контекста снижает качество решений.
В то же время, у специалистов, работающих с информацией письменно, таких проблем обычно не возникает.&lt;/p&gt;
&lt;p&gt;Если выработать привычку записывать все в электронные заметки, прежде чем эта информация отразится в каком-либо еще источнике, то будет единый источник истины, который всегда под рукой, даже offline.
Вначале требуется определенное усилие воли и самодисциплина, чтобы выработать привычку все записывать, но результат проявляется очень быстро, ведь записываем мы один раз, а обращаемся к записанному много раз.
А если к записанному предоставить доступ команде, то это кратно повысит эффективность реиспользования информации и экономию времени.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id36"&gt;Порядок использования&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Система работает следующим образом:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Создайте форк &lt;a class="reference external" href="https://github.com/emacsway/dckms-template"&gt;репозитария&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Перейдите в приватный бранч "private".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Свои приватные заметки ведите в пространстве имен "private" (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/private&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_html_extra/private&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Создайте свой публичный бранч, например, "ivan.ivanov". Приватные директории сразу же внесите в файл ".gitignore" в этом бранче.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Создайте пространство имен для своих публичных заметок, которыми вы хотите поделиться, например, "ivan.ivanov" (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/ivan.ivanov&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_html_extra/ivan.ivanov&lt;/span&gt;&lt;/code&gt;). Таким образом вы облегчите читателям навигацию по вашим заметкам и сохраните очевидность авторства за собой (можно еще использовать директиву "&lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-sectionauthor"&gt;sectionauthor&lt;/a&gt;"). Создание персонального пространства имен необходимо еще и потому, что древовидное устройство файловой системы сложно унифицировать для всех авторов - у каждого автора есть свое видение на классификацию его материала. Благодаря гибкости директивы "&lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#table-of-contents"&gt;toctree&lt;/a&gt;", вы легко можете включать в дерево своего содержания поддеревья или страницы других авторов.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Тегируйте свой материал с помощью директивы "&lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#index-generating-markup"&gt;index&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ненужные вам заметки других авторов вы можете удалить в своем приватном бранче. А нужные - добавить, как целиком, так и выборочно, используя &lt;a class="reference external" href="https://git-scm.com/docs/git-cherry-pick"&gt;cherry-pick&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Используя &lt;a class="reference external" href="https://www.uuidgenerator.net/version4"&gt;UUID4&lt;/a&gt;, создавайте &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#ref-role"&gt;перекрестные ссылки&lt;/a&gt; между связанными заметками, следуя лучшим практикам &lt;a class="reference internal" href="#zettelkasten"&gt;&lt;span class="std std-ref"&gt;Zettelkasten&lt;/span&gt;&lt;/a&gt;. Вместо UUID можно использовать префиксирование своих label-names, используя в качестве префикса - пространство имен своих публичных заметок (поскольку заметка может быть перемещена из приватного простанства имен в публичное). Так же можно использовать расширение &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/extensions/autosectionlabel.html"&gt;sphinx.ext.autosectionlabel&lt;/a&gt; – Allow reference sections using its title (но оно не облегчает изменение локации заметки). И можно даже организовывать ссылки между отдельными проектами, используя директиву &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-seealso"&gt;seealso&lt;/a&gt; и расширение &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html"&gt;sphinx.ext.intersphinx&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ведите &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/extensions/todo.html"&gt;TODO&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Создайте Pull Request из своего именного публичного бранча ("ivan.ivanov") в trunk-branch. Может быть множество trunk-бранчей, и, в качестве одного из них, можете использовать &lt;a class="reference external" href="https://github.com/dckms/system-architecture"&gt;этот&lt;/a&gt;. Trunk-branch можно сравнить с шиной событий в Event Sourcing системе.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Когда вы делитесь своим контентом в публичном пространстве, важно понимать, что он может оказаться доступным в интернете на других доменах. Чтобы сохранить поисковый траффик за оригинальным адресом предоставляемых страниц, вначале каждой такой страницы используйте &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/development/theming.html#use-custom-page-metadata-in-html-templates"&gt;custom page metadata&lt;/a&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;canonical-url&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;canonical&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ru&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;или &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;canonical-base-url&lt;/span&gt;&lt;/code&gt; (без закрывающего слэша):&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;canonical&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ru&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;При этом не следует использовать &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-html_baseurl"&gt;html_baseurl&lt;/a&gt; или &lt;a class="reference external" href="https://alabaster.readthedocs.io/en/latest/customization.html#theme-options"&gt;html_theme_options["canonical_url"]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Стройте свою распределенную коллективную базу знаний.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Можно добавить, что GitHub планирует добавить &lt;a class="reference external" href="https://github.com/isaacs/github/issues/629"&gt;поддержку cherry-pick в свой web-интерфейс&lt;/a&gt;, а в &lt;a class="reference external" href="https://github.blog/2021-03-30-github-desktop-now-supports-cherry-picking/"&gt;Desktop-client она уже реализована&lt;/a&gt;.
А вот GitLab уже реализовал &lt;a class="reference external" href="https://docs.gitlab.com/ee/user/project/merge_requests/cherry_pick_changes.html"&gt;поддержку cherry-pick в web-интерфейсе&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="html"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id37"&gt;Как собрать html&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Если не установлен Python, то &lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;установите его&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Установите зависимости. Для этого, из корневой директории проекта выполните команду: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pip&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt; &lt;span class="pre"&gt;-r&lt;/span&gt; &lt;span class="pre"&gt;requirements.freeze.txt&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Отредактируйте файл conf.py, подробности смотрите в &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/configuration.html"&gt;документации&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Произведите сборку: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;html&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Подробнее &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/quickstart.html"&gt;здесь&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Так же существует возможность собрать PDF-файл или электронную книгу EPUB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zettelkasten"&gt;
&lt;span id="id14"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id38"&gt;О Zettelkasten&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://zettelkasten.de/posts/overview/"&gt;Zettelkasten&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://zettelkasten.de/introduction/"&gt;The Introduction to the Zettelkasten Method&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://habr.com/ru/post/509756/"&gt;Как я веду Zettelkasten в Notion уже год: стартовый набор и полезные трюки&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://habr.com/ru/post/508672/"&gt;Zettelkasten: как один немецкий учёный стал невероятно продуктивным&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;То, что Niklas Luhmann &lt;a class="reference external" href="https://vas3k.club/post/3040/"&gt;сделал&lt;/a&gt; на простых бумажных карточках, можно сделать и на Sphinx-doc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id39"&gt;Философия&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Основные принципы системы:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;минимизация рисков и внешних зависимостей (от конкретного типа текстового редактора, вендора)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;минимализм&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;неограниченная расширяемость&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;автономность&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;субъектность пользователя и полный контроль над информацией&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;распределенность и коллективность&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;свободное обогащение и дистилляция информации&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id40"&gt;Близкие по духу системы&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="obsidian"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id41"&gt;Obsidian&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;In our age when cloud services can shut down, get bought, or change privacy policy any day, the last thing you want is proprietary formats and data lock-in.&lt;/p&gt;
&lt;p&gt;With Obsidian, your data sits in a local folder. Never leave your life's work held hostage in the cloud again.&lt;/p&gt;
&lt;p&gt;Plain text Markdown also gives you the unparalleled interoperability to use any kind of sync, encryption, or data processing that works with plain text files.&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://obsidian.md/"&gt;https://obsidian.md/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="neuron-zettelkasten"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id42"&gt;Neuron Zettelkasten&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Neuron was designed with these criteria in mind:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Future-proof: store notes locally1 as plain-text (Markdown) files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not tied2 to a single text editor&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Statically generated web site, for browsing and publishing on the web&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remain as simple to use as possible, whilst being feature-rich via Plugins&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://neuron.zettel.page/philosophy"&gt;https://neuron.zettel.page/philosophy&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="gitjournal"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id43"&gt;GitJournal&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Compatible with your favorite Desktop Apps. GitJournal aims to be extremely configurable and work with your favorite apps. The idea is to not build another silo and instead integrate into your existing workflow.&lt;/p&gt;
&lt;p&gt;No two people are the same...&lt;/p&gt;
&lt;p&gt;Multiple Editors. All your notes are stored in Markdown. However you can edit the notes in many different ways depending on the task.&lt;/p&gt;
&lt;p&gt;100% Open Source. GitJournal will always be completely Open Source. Join the community and help us build your ideal note taking app.&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://gitjournal.io/"&gt;https://gitjournal.io/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Why create another Note Taking App? There are many Note taking apps on the desktop, but the mobile space is lacking good note taking apps which give you control over your data and operate with open protocols.&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://gitjournal.io/support/"&gt;https://gitjournal.io/support/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="popular-static-site-generators"&gt;
&lt;span id="id17"/&gt;&lt;h3&gt;&lt;a class="toc-backref" href="#id44"&gt;Статические генераторы сайтов&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Существует целый класс инструментов, предназначенных для генерации сайта
(блога, документации или информационной страницы) из исходных материалов
в текстовых файлах в markdown, reStructuredText и других аналогичных
форматах. Часто генераторы сайтов поддерживают дополнительную разметку
(shortcodes), которая упрощает вставку диаграмм, формул, сносок, ссылок
на твиты, видео и других элементов.&lt;/p&gt;
&lt;p&gt;Наиболее известные из cтатических генераторов сайтов - &lt;a class="reference external" href="https://gohugo.io"&gt;Hugo&lt;/a&gt; (написан
на Go, распространяется как бинарный исполняемый файл, поддерживает
&lt;a class="reference external" href="https://gohugo.io/content-management/formats/"&gt;множество форматов&lt;/a&gt; разметки) и &lt;a class="reference external" href="https://github.com/jekyll/jekyll"&gt;Jekyll&lt;/a&gt;
(требует установки Ruby). Так, например, страницы для представления
markdown файлов на Github Pаges обрабатываются Jekyll.&lt;/p&gt;
&lt;p&gt;Есть группа генераторов на JavaScript, как связанная с конкретными
фреймворками (Gastby, Next, Nuxt, VuePress), так и самостоятельных
(Hexo, Eleventy и другие). На Python написаны sphinx, mkdocs, pelican и
другие.
На Ruby можно добавить еще Middleman.&lt;/p&gt;
&lt;p&gt;У многих генераторов есть темы оформления, связанные с документацией,
например, очень красивый дизайн у &lt;a class="reference external" href="https://squidfunk.github.io/mkdocs-material/"&gt;mkdocs-material&lt;/a&gt;, &lt;a class="reference external" href="https://getdoks.org/"&gt;doks&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/google/docsy"&gt;Docsy&lt;/a&gt;
для Hugo, а также у &lt;a class="reference external" href="https://github.com/pmarsceill/just-the-docs"&gt;just-the-docs&lt;/a&gt; и &lt;a class="reference external" href="https://github.com/google/docsy"&gt;Docsy Jekyll Theme&lt;/a&gt; для Jekyll.&lt;/p&gt;
&lt;p&gt;Ряд статических генераторов нацелены преимущественно на "книжный" формат
представления документов c оглавлением слева:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://rust-lang.github.io/mdBook/"&gt;mdbook&lt;/a&gt; - очень лаконичный и быстрый в развертывании генератор,
используется для документации языка Rust, поставляется бинарным
файлом&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://jupyterbook.org/intro.html"&gt;jupyterbook&lt;/a&gt; (Python)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.bookdown.org/"&gt;bookdown&lt;/a&gt; (R)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Список статических генераторов сайтов по полуярности на Github можно
посмотреть &lt;a class="reference external" href="https://share.streamlit.io/epogrebnyak/ssg-dataset/main"&gt;здесь&lt;/a&gt;
или &lt;a class="reference external" href="https://jamstack.org/generators/"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id45"&gt;Другие интересные проекты&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://github.com/imdone/imdone-core"&gt;imdone-core&lt;/a&gt;" - Text based kanban processor (&lt;a class="reference external" href="https://github.com/imdone/imdone-core#resources"&gt;Why?&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://github.com/coddx-hq/coddx-alpha"&gt;coddx-alpha&lt;/a&gt;" - Todo Kanban Board manages tasks and save them as TODO.md - a simple plain text file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://www.orgzly.com/"&gt;Orgzly&lt;/a&gt;" - Outliner for notes and tasks. Notebooks in plain text (&lt;a class="reference external" href="https://github.com/orgzly"&gt;Source Code&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://joplinapp.org/"&gt;Joplin&lt;/a&gt;" - an open source note taking and to-do application with synchronization capabilities for Windows, macOS, Linux, Android and iOS (&lt;a class="reference external" href="https://github.com/laurent22/joplin/"&gt;Source Code&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="markdown"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id46"&gt;Markdown&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Markdown - популярный язык разметки.
Приводимые в начале этой страницы архитектурные руководства Microsoft написаны на Markdown.&lt;/p&gt;
&lt;p&gt;Вы легко можете использовать Markdown, благодаря расширению &lt;a class="reference external" href="https://myst-parser.readthedocs.io/en/latest/"&gt;MyST-Parser&lt;/a&gt; (&lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/markdown.html"&gt;порядок установки&lt;/a&gt;).
Расширение позволяет использовать в Markdown все директивы и роли Sphinx-doc, и является мостом Docutils к &lt;a class="reference external" href="https://github.com/executablebooks/markdown-it-py"&gt;markdown-it-py&lt;/a&gt;, который поддерживает синтаксис &lt;a class="reference external" href="https://commonmark.org/"&gt;CommonMark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Как вариант, возможна и обычная статическая конвертация Markdown в reStructuredText:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/miyakogi/m2r"&gt;m2r&lt;/a&gt; - Markdown to reStructuredText converter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/kata198/mdToRst"&gt;mdToRst&lt;/a&gt; - tool and library to convert markdown [md] to restructed text [rst] (md to rst).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;И reStructuredText в Markdown:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://rst-to-myst.readthedocs.io/en/latest/"&gt;RST-to-MyST&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="using-dckms-on-mobile-devices"&gt;
&lt;span id="id19"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id47"&gt;Как работать на мобильных устройствах&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="android"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id48"&gt;Как работать на Android&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Markor - популярный Markdown-редактор на Android: &lt;a class="reference external" href="https://github.com/gsantner/markor"&gt;GitHub&lt;/a&gt;, &lt;a class="reference external" href="https://f-droid.org/packages/net.gsantner.markor"&gt;F-Droid&lt;/a&gt;, &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=net.gsantner.markor"&gt;Google Play&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://termux.com/"&gt;Termux&lt;/a&gt; - a unix-like environment for Android, for git and python3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gitjournal.io/"&gt;GitJournal&lt;/a&gt; - mobile first Markdown Notes integrated with Git: &lt;a class="reference external" href="https://github.com/GitJournal/GitJournal"&gt;GitHub&lt;/a&gt;, &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=io.gitjournal.gitjournal&amp;amp;pcampaignid=website"&gt;Google Play&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="iphone"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id49"&gt;Как работать на iPhone&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gitjournal.io/"&gt;GitJournal&lt;/a&gt; - mobile first Markdown Notes integrated with Git: &lt;a class="reference external" href="https://github.com/GitJournal/GitJournal"&gt;GitHub&lt;/a&gt;, &lt;a class="reference external" href="https://apps.apple.com/app/gitjournal/id1466519634"&gt;App Store&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://apps.apple.com/ca/app/working-copy-git-client/id896694807"&gt;Working Copy&lt;/a&gt; - a Git client.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://1writerapp.com/"&gt;1Writer&lt;/a&gt; - powerful, beautiful Markdown editor for iOS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ia.net/writer"&gt;iA Writer&lt;/a&gt; - the simple, award-winning design of iA Writer delivers the essential writing experience.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.omz-software.com/editorial/"&gt;Editorial&lt;/a&gt; is a plain text editor for iOS with great Markdown support and powerful automation tools.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://tekacs.github.io/editorial-obsidian/"&gt;Editorial-obsidian&lt;/a&gt; - Editorial scripts for Obsidian (unofficial): &lt;a class="reference external" href="https://github.com/tekacs/editorial-obsidian"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://brettterpstra.com/ios-text-editors/"&gt;iTextEditors&lt;/a&gt; - the iOS Text Editor roundup.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id20"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id50"&gt;Аналоги&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/roalyr/zettelkasten"&gt;Zettelkasten&lt;/a&gt; - a template for a Zettelkasten based on markdown files.&lt;/p&gt;
&lt;p&gt;Neuron Zettelkasten может представлять интерес для тех, кто предпочитает минимизацию внешних зависимостей, минимализм и неограниченность:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://neuron.zettel.page/philosophy"&gt;https://neuron.zettel.page/philosophy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://neuron.zettel.page/tutorial"&gt;https://neuron.zettel.page/tutorial&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://srid.github.io/neuron-template/README"&gt;https://srid.github.io/neuron-template/README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/srid/neuron"&gt;https://github.com/srid/neuron&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/srid/neuron-template"&gt;https://github.com/srid/neuron-template&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Парень дает &lt;a class="reference external" href="https://lobste.rs/s/kydg6q/neuron_0_4_zettelkasten_note_management#c_me2hhh"&gt;сравнение Neuron Zettelkasten и Sphinx-doc&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id21"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id51"&gt;Интеграция с другими системами&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Интеграция с другими системами, сервисами и приложениями возможна в пределах пересекающегося подмножества поддерживаемого Markdown-синтаксиса.&lt;/p&gt;
&lt;div class="section" id="id22"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id52"&gt;Интеграция с Obsidian&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Идея Obsidian так же построена на локальных Markown-файлах, но с GUI-клиентом (недавно появился и &lt;a class="reference external" href="https://help.obsidian.md/Obsidian/Mobile+app+beta"&gt;мобильный клиент&lt;/a&gt;).
Теоретически это означает, что вы можете шарить файлы между двумя системами.
На практике я не пробовал это сделать (если попробуете - расскажите, пожалуйста, как получилось).&lt;/p&gt;
&lt;p&gt;Зато сообщество Obsidian &lt;a class="reference external" href="https://forum.obsidian.md/t/how-do-i-work-with-obsidian-on-mobile/471"&gt;дает много дельных советов&lt;/a&gt;, как работать с Markdown-файлами на мобильных устройствах.&lt;/p&gt;
&lt;p&gt;А также сообщество Obsidian предоставляет &lt;a class="reference external" href="https://forum.obsidian.md/t/static-site-generators-any-guides/8915"&gt;варианты статической генерации&lt;/a&gt; помимо помимо &lt;a class="reference external" href="https://obsidian.md/publish"&gt;Obsidian Publish&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notion"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id53"&gt;Интеграция с Notion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Notion позволяет экспортировать содержимое в Markdown-файлы.
Теоретически это означает, что вы можете шарить файлы между двумя системами.
На практике я не пробовал это сделать (если попробуете - расскажите, пожалуйста, как получилось).
Массового импорта в Notion я не встречал, но есть варианты, например &lt;a class="reference external" href="https://github.com/Cobertos/md2notion/"&gt;Notion.so Markdown Importer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="evernote"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id54"&gt;Интеграция с Evernote&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Существуют решения для экспорта заметок из Evernote:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/wormi4ok/evernote2md"&gt;evernote2md&lt;/a&gt; - convert Evernote .enex files to Markdown.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/claytron/ever2simple"&gt;ever2simple&lt;/a&gt; - migrate from evernote to simplenote with markdown formatting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/nicholaskuechler/ever2text"&gt;ever2text&lt;/a&gt; - convert Evernote exports to text files.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="rss"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id55"&gt;RSS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Существует несколько коробочных решений RSS-feed для Sphinx:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/sphinx-contrib/yasfb"&gt;https://github.com/sphinx-contrib/yasfb&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/sphinx-contrib/feed"&gt;https://github.com/sphinx-contrib/feed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/lsaffre/sphinxfeed"&gt;https://github.com/lsaffre/sphinxfeed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/prometheusresearch/sphinxcontrib-newsfeed"&gt;https://github.com/prometheusresearch/sphinxcontrib-newsfeed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Смотрите так же &lt;a class="reference external" href="https://github.com/sphinx-doc/sphinx/issues/2"&gt;https://github.com/sphinx-doc/sphinx/issues/2&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="rss-mattermost"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id56"&gt;Интегация RSS с Mattermost&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://integrations.mattermost.com/rssfeed-plugin/"&gt;https://integrations.mattermost.com/rssfeed-plugin/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/wbernest/mattermost-plugin-rssfeed"&gt;https://github.com/wbernest/mattermost-plugin-rssfeed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="rss-telegram"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id57"&gt;Интегация RSS с Telegram&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/BoKKeR/RSS-to-Telegram-Bot"&gt;https://github.com/BoKKeR/RSS-to-Telegram-Bot&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://thefeedreaderbot.com/"&gt;https://thefeedreaderbot.com/&lt;/a&gt; ( &lt;a class="reference external" href="https://telegram.me/TheFeedReaderBot"&gt;https://telegram.me/TheFeedReaderBot&lt;/a&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.integromat.com/en/integrations/rss/telegram"&gt;https://www.integromat.com/en/integrations/rss/telegram&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://core.telegram.org/bots/faq"&gt;https://core.telegram.org/bots/faq&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sitemap"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id58"&gt;Sitemap&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/jdillard/sphinx-sitemap"&gt;https://github.com/jdillard/sphinx-sitemap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id23"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id59"&gt;Полезные расширения&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://sphinxcontrib-needs.readthedocs.io/en/latest/"&gt;Sphinx-Needs&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/useblocks/sphinxcontrib-needs"&gt;source code&lt;/a&gt;) - Sphinx-Needs allows the definition, linking and filtering of need-objects, which are by default: requirements, specifications, implementations, test cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://0x6d64.github.io/sphinx-traceability-example/"&gt;Sphinx Traceability plugin&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/melexis/sphinx-traceability-extension"&gt;source code&lt;/a&gt;) - traceability extension for Sphinx documentation generator. Sphinx plugin that allows defining documentation items and relations between those items. Can be used as a requirements management tool for e.g. ISO26262 projects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id24"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id60"&gt;Послесловие&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Проект в состоянии развития. Стабильность пока не гарантируется.&lt;/p&gt;
&lt;p&gt;Технически, в отдаленной перспективе можно было бы приспособить под принципы и соглашения системы одно из Open Source приложений для заметок, но у меня такая цель на данный момент не стоит. В таком приложении можно было бы выбирать источники подписок, автоматизировать и облегчить просмотр и принятие коммитов в свою базу знаний, например, если коммит содержит новую заметку, связанную с одной из уже принятых ранее заметок, или является её обновлением, тогда принимать коммит автоматически.&lt;/p&gt;
&lt;p&gt;P.S.: Проект представляет собой личную записную книжку и её контент доступен только для учебных и исследовательских целей.&lt;/p&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Может ли CQRS-команда возвращать результат?</title><link>https://dckms.github.io/system-architecture/emacsway/it/ddd/tactical-design/cqrs/cqrs-command-and-result.html</link><description>
&lt;span id="index-0"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Статья посвящена довольно дискуссионному вопросу о том, может ли CQRS-команда возвращать результат.&lt;/p&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#cqrs" id="id10"&gt;Может ли CQRS-команда возвращать результат?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#reference-transparency" id="id11"&gt;Значение Reference Transparency в распределенной среде&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#cqrs-cqs" id="id12"&gt;Чем отличается CQRS от CQS?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id2" id="id13"&gt;А есть ли противоречие в авторитетных точках зрения?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#cqs-referential-transparency-query" id="id14"&gt;CQS - это больше о referential transparency для Query&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#command" id="id15"&gt;Может ли Command возвращать служебную информацию (код ошибки или успешность выполнения)?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#command-query" id="id16"&gt;Кроме Command и Query существуют еще и функции-конструкторы&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#query-abstract-side-effect-concrete-side-effect" id="id17"&gt;Query не должен иметь abstract side effect, но может иметь concrete side effect&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id18"&gt;Что делать с атомарными операциями?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id19"&gt;Процедура не возвращает значения, но может изменить ссылочный аргумент&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id5" id="id20"&gt;Концепция буфера для разделения атомарных операций Command и Query&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id6" id="id21"&gt;Что делать, если CQRS-команда должна вернуть идентификатор созданного ресурса?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id7" id="id22"&gt;Однонаправленный поток изменений&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#jimmy-bogard" id="id23"&gt;Точка зрения Jimmy Bogard&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id8" id="id24"&gt;Вывод&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="reference-transparency"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Значение Reference Transparency в распределенной среде&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В последнее время наметилась определенная поляризация парадигм программирования в индустрии.&lt;/p&gt;
&lt;p&gt;Стремительный рост объема обрабатываемых данных, потребность в масштабировании, распределенном хранении и параллельной обработке данных, пробудили интерес к функциональному программированию.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Все состояния гонки (race condition), взаимоблокировки (deadlocks) и проблемы параллельного обновления обусловлены изменяемостью переменных. Если в программе нет изменяемых переменных, она никогда не окажется в состоянии гонки и никогда не столкнется с проблемами одновременного изменения. В отсутствие изменяемых блокировок программа не может попасть в состояние взаимоблокировки.&lt;/p&gt;
&lt;p&gt;All race conditions, deadlock conditions, and concurrent update problems are due to mutable variables. You cannot have a race condition or a concurrent update problem if no variable is ever updated. You cannot have deadlocks without mutable locks."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin, перевод ООО Издательство "Питер"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Однако, индустрия не готова отказаться от императивных подвидов парадигм, таких как OOP.&lt;/p&gt;
&lt;p&gt;Можно ли их сочетать, используя достоинства обоих видов парадигм, в зависимости от контекста использования? Как эффективно использовать мультипарадигменные языки, такие как F#, Scala, Elixir?&lt;/p&gt;
&lt;p&gt;B.Meyer утверждает, что OOP и FP не противопоставляются, а дополняют друг друга, и ключем к достижению этого является принцип &lt;a class="reference external" href="https://martinfowler.com/bliki/CommandQuerySeparation.html"&gt;CQS&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Интервью с Бертраном Мейером&lt;/p&gt;
&lt;p&gt;- В последнее время наметилась тенденция в популяризации функциональных языков и функциональной парадигмы программирования. Что вы скажите, является ли объектная технология конкурентом функциональному программированию?&lt;/p&gt;
&lt;p&gt;- Нет, эти две парадигмы не являются конкурентами, они успешно могут дополнять друг друга. Тем не менее, тенденция к функциональному программированию является важной и интересной.&lt;/p&gt;
&lt;p&gt;На мой взгляд, когда речь идет о высокоуровневой структуре приложения (особенно больших программ), то в мире нет ничего лучше объектного подхода. Я просто не вижу, как можно писать действительно большую программу исключительно на функциональном языке.&lt;/p&gt;
&lt;p&gt;С другой стороны, если общая структура приложения построена на основе объектов, то очень даже полезно, если некоторые ее части будут написаны на функциональном языке, для обеспечения простоты и возможности доказательства корректности, о которых я говорил ранее.&lt;/p&gt;
&lt;p&gt;Несколько лет назад я опубликовал статью на эту тему, где сравнивал ОО и ФП подходы. В ней я постарался показать, что ОО метод включает функциональное программирование, а не наоборот.&lt;/p&gt;
&lt;p&gt;- Да, я кажется читал эту статью, которая затем вошла в качестве одной из глав в книгу "Beautiful Architecture".&lt;/p&gt;
&lt;p&gt;- Вы знаете об этом? Я очень впечатлен.&lt;/p&gt;
&lt;p&gt;- (Смеюсь...) Да, и насколько я помню, это был ваш ответ на статью Саймона Пейтона Джонса, в которой автор старался показать, что ФП подход является более предпочтительным.&lt;/p&gt;
&lt;p&gt;- Да, совершенно верно.&lt;/p&gt;
&lt;p&gt;ПРИМЕЧАНИЕ: Речь идет о статье Бертрана "&lt;a class="reference external" href="http://se.ethz.ch/~meyer/publications/functional/meyer_functional_oo.pdf"&gt;Software Architecture: Functional vs. Object-Oriented Design in Beautiful Architecture&lt;/a&gt;", опубликованной в книге "&lt;a class="reference external" href="https://www.amazon.com/Beautiful-Architecture-Leading-Thinkers-Software/dp/059651798X"&gt;Идеальная архитектура. Ведущие специалисты о красоте программных архитектур.&lt;/a&gt;".
Эта статья Мейера была ответом на статью Саймона "Composing contracts: an adventure in financial engineering."&lt;/p&gt;
&lt;p&gt;- Давайте все же немного вернемся к вопросу OOP vs FP. Какие именно преимущества у функционального подхода на "низком уровне"?&lt;/p&gt;
&lt;p&gt;- В Eiffel существует очень важный принцип, под названием &lt;strong&gt;Command-Query Separation Principle, который можно рассматривать, в некотором роде, как сближение ОО и ФП миров&lt;/strong&gt;. Я не считаю, что наличие состояния – это однозначно плохо. Но &lt;strong&gt;очень важно, чтобы мы могли ясно различать операции, которые это состояние изменяют (т.е. командами), и операции, которые лишь возвращают информацию о состоянии, его не изменяя (т.е. запросами)&lt;/strong&gt;. В других языках эта разница отсутствует. Так, например, в С/С++ часто пишут функции, которые возвращают результат и изменяют состояние. &lt;strong&gt;Следование этому принципу позволяет безопасно использовать выражения с запросами зная, что они не изменяют состояние.&lt;/strong&gt; В некоторых случаях можно пойти еще дальше и работать в чисто функциональном мире с полным отсутствием побочных эффектов."&lt;/p&gt;
&lt;p class="attribution"&gt;—Bertrand Meyer в интервью Сергея Теплякова "&lt;a class="reference external" href="https://sergeyteplyakov.blogspot.com/2014/05/interview-with-bertrand-meyer.html"&gt;Интервью с Бертраном Мейером&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "For both theoretical and practical reasons detailed elsewhere [10], the command-query separation principle is a methodological rule, not a language feature, but all serious software developed in Eiffel observes it scrupulously, to great referential transparency advantage. Although other schools of object-oriented programming regrettable do not apply it (continuing instead the C style of calling functions rather than procedures to achieve changes), but in my view it is a key element of the object-oriented approach. It seems like a viable way to obtain the referential transparency goal of functional programming — since expressions, which only involve queries, will not change the state, and hence can be understood as in traditional mathematics or a functional language — while acknowledging, through the notion of command, the fundamental role of the concept of state in modeling systems and computations."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="http://se.ethz.ch/~meyer/publications/functional/meyer_functional_oo.pdf"&gt;Software architecture: object-oriented vs functional&lt;/a&gt;" by Bertrand Meyer&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Две известные статьи от Rober Martin на тему OOP vs FP:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://blog.cleancoder.com/uncle-bob/2014/11/24/FPvsOO.html"&gt;http://blog.cleancoder.com/uncle-bob/2014/11/24/FPvsOO.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://blog.cleancoder.com/uncle-bob/2018/04/13/FPvsOO.html"&gt;https://blog.cleancoder.com/uncle-bob/2018/04/13/FPvsOO.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ну а я, как поклонник Emacs и Lisp, не могу обойти вниманием его статью про Clojure:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://blog.cleancoder.com/uncle-bob/2019/08/22/WhyClojure.html"&gt;http://blog.cleancoder.com/uncle-bob/2019/08/22/WhyClojure.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Хорошая статья "&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/what-is-functional-programming/"&gt;What is functional programming?&lt;/a&gt;" by Vladimir Khorikov.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cqrs-cqs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Чем отличается CQRS от CQS?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://martinfowler.com/bliki/CQRS.html"&gt;CQRS&lt;/a&gt; лишь немного отличается от &lt;a class="reference external" href="https://martinfowler.com/bliki/CommandQuerySeparation.html"&gt;CQS&lt;/a&gt; по исполнению.
Ввел этот термин Greg Young, поэтому, к нему и обратимся:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "&lt;strong&gt;Starting with CQRS, CQRS is simply the creation of two objects where there [CQS] was previously only one.&lt;/strong&gt; The separation occurs based upon whether the methods are a command or a query (the same definition that is used by Meyer in Command and Query Separation, a command is any method that mutates state and a query is any method that returns a value)... That is it. That is the entirety of the CQRS pattern. There is nothing more to it than that…"
— "&lt;a class="reference external" href="http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/"&gt;CQRS, Task Based UIs, Event Sourcing agh!&lt;/a&gt;" by Greg Young&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Command and Query Responsibility Segregation was originally considered just to be an extension of this [CQS] concept."&lt;/p&gt;
&lt;p&gt;📝 "Command and Query Responsibility Segregation (CQRS) originated with Bertrand Meyer's Command and Query Separation Principle."&lt;/p&gt;
&lt;p&gt;📝 "Command and Query Responsibility Segregation uses the same definition of Commands and Queries that Meyer used and maintains the viewpoint that they should be pure. &lt;strong&gt;The fundamental difference is that in CQRS objects are split into two objects, one containing the Commands one containing the Queries.&lt;/strong&gt;"&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf"&gt;CQRS Documents by Greg Young&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Хорошая статья про CQRS: "&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/types-of-cqrs/"&gt;Types of CQRS&lt;/a&gt;" by Vladimir Khorikov.
Обратите внимание на комментарии внизу статьи - ее прорецензировал собственноручно Greg Young, автор термина CQRS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;А есть ли противоречие в авторитетных точках зрения?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В одном из самых авторитетных reference application eShopOnContainers от Microsoft, одна из CQRS-команд возвращает результат:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/dotnet-architecture/eShopOnContainers/blob/b1021c88d55d96c247eab75bde650ab4b194f706/src/Services/Ordering/Ordering.API/Application/Commands/CreateOrderDraftCommandHandler.cs#L40"&gt;раз&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/dotnet-architecture/eShopOnContainers/blob/b1021c88d55d96c247eab75bde650ab4b194f706/src/Services/Ordering/Ordering.API/Controllers/OrdersController.cs#L151"&gt;два&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Однако, в известной "Красной книге", Vaughn Vernon пишет:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "This principle, devised by Bertrand Meyer, asserts the following:&lt;/p&gt;
&lt;p&gt;"Every method should be either a command that performs an action, or a query that returns data to the caller, but not both. In other words, asking a question should not change the answer.More formally, methods should return a value only if they are referentially transparent and hence possess no side effects." [Wikipedia, CQS]&lt;/p&gt;
&lt;p&gt;At an object level this means:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;If a method modifies the state of the object, it is a command, and its method must not return a value. In Java and C# the method must be declared void.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If a method returns some value, it is a query, and it must not directly or indirectly cause the modification of the state of the object.&lt;/strong&gt; In Java and C# the method must be declared with the type of the value it returns."&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class="attribution"&gt;—"Implementing Domain-Driven Design" by Vaughn Vernon, Chapter "4. Architecture :: Command-Query Responsibility Segregation, or CQRS"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Другое, не менее авторитетное архитектурное руководство от Microsoft, утверждает:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "A query returns data and does not alter the state of the object; &lt;strong&gt;a command changes the state of an object but does not return any data.&lt;/strong&gt;"&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/msp-n-p/jj591573(v=pandp.10)#what-is-cqrs"&gt;CQRS Journey :: Reference 2: Introducing the Command Query Responsibility Segregation Pattern :: What is CQRS?&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Противоречие? Архитектура - это, как известно, наука об ограничениях, о том, как не надо делать.
Почему же тогда одно из самых авторитетных reference application, консультантами которого являются такие светила, как Cesar De la Torre, Jimmy Nilsson, Udi Dahan, Jimmy Bogard, и другие, это ограничение нарушает?
Что это - компромисс, вызванный практической целесообразностью, или демонстрация принципиального архитектурно чистого решения?&lt;/p&gt;
&lt;p&gt;Ответ на этот вопрос мы попытаемся найти в этой статье.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cqs-referential-transparency-query"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;CQS - это больше о referential transparency для Query&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Итак, начнем по порядку, с принципа CQS:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Command-Query Separation &lt;strong&gt;principle - Functions should not produce abstract side effects&lt;/strong&gt;."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Обратите внимание на термин abstract. B.Meyer различает abstract и concrete side effects.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Definition: concrete side effect: A function produces a concrete side effect if its body contains any of the following:
1. An assignment, assignment attempt or creation instruction whose target is an attribute.
2. A procedure call."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Since not every class definition is accompanied by a full-fledged specification of the underlying abstract data type, we need a more directly usable definition of "abstract side effect". This is not difficult. In practice, the abstract data type is defined by the interface offered by a class to its clients (expressed for example as the short form of the class). A side effect will affect the abstract object if it changes the result of any query accessible to these clients. Hence the definition:&lt;/p&gt;
&lt;p&gt;Definition: abstract side effect: An abstract side effect is a concrete side effect that can change the value of a non-secret query.&lt;/p&gt;
&lt;p&gt;The definition refers to "non-secret" rather than exported queries. The reason is that in-between generally exported and fully secret status, we must permit a query to be selectively exported to a set of clients. As soon as a query is non-secret — exported to any client other than NONE — we consider that changing its result is an abstract side effect, since the change will be visible to at least some clients."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The Command-Query Separation principle brings &lt;strong&gt;referential transparency&lt;/strong&gt; back."ients."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Definition: referential transparency: An expression e is referentially transparent if it is possible to exchange any subexpression with its value without changing the value of e."ients."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Подведу короткое резюме всему ранее сказанному: CQS не запрещает изменять состояние, если оно не нарушает ссылочную прозрачность. Соблюдение этого условия открывает нам возможность пользоваться всеми преимуществами функционального программирования. Это и есть цель CQS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="command"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Может ли Command возвращать служебную информацию (код ошибки или успешность выполнения)?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Не Команде запрещено возвращать информацию об объекте, а Запросу на получение информации об объекте запрещено нарушать ссылочную прозрачность.
На это указывает и сам B. Meyer (учтите, что &lt;a class="reference external" href="https://fsharpforfunandprofit.com/rop/"&gt;Railway Oriented Programming&lt;/a&gt; и &lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/results"&gt;Result type&lt;/a&gt; в то время еще не было):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "It is important here two deal with two common objections to the side-effect-free style.&lt;/p&gt;
&lt;p&gt;The first has to do with error handling. Sometimes a function with side effects is really a procedure, which in addition to doing its job returns a status code indicating how things went. But there are better ways to do this; roughly speaking, the proper O-O technique is to enable the client, after an operation on an object, to perform a query on the status, represented for example by an attribute of the object, as in&lt;/p&gt;
&lt;p&gt;target.some_operation(...)&lt;/p&gt;
&lt;p&gt;how_did_it_go := targetGstatus&lt;/p&gt;
&lt;p&gt;Note that the technique of returning a status as function result is lame anyway. It transforms a procedure into a function by adding the status as a result; &lt;strong&gt;but it does not work if the routine was already a function, which already has a result of its own&lt;/strong&gt;. It is also problematic if you need more than one status indicator. In such cases the C approach is either to return a "structure" (the equivalent of an object) with several components, which is getting close to the above scheme, or to use global variables — which raises a whole set of new problems, especially in a large system where many modules can trigger errors."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Таким образом, строгого запрета на возврат командой чего-либо (например, информации об ошибке выполнения) не существует.
Существует только пояснение почему и в пользу чего нужно стремиться этого избегать, где основной причиной для избегания является как раз именно то, что &lt;strong&gt;команда может возвращать значение, отличное от информации об ошибке&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Таким образом, мы выяснили, что команда может быть функцией, возвращающей служебную информацию об успешности выполнения, если иной способ невозможен.&lt;/p&gt;
&lt;p&gt;Вернемся к основам:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Commands and queries.&lt;/p&gt;
&lt;p&gt;A few reminders on terminology will be useful. The features that characterize a class are divided into commands and queries. &lt;strong&gt;A command serves to modify objects, a query to return information about objects. A command is implemented as a procedure.&lt;/strong&gt; A query may be implemented either as an attribute, that is to say by reserving a field in each run-time instance of the class to hold the corresponding value, or as a function, that is to say through an algorithm that computes the value when needed. Procedures (which also have an associated algorithm) and functions are together called routines.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The definition of queries does not specify whether in the course of producing its result a query may change objects.&lt;/strong&gt; For commands, the answer is obviously yes, since it is the role of commands (procedures) to change things. Among queries, the question only makes sense for functions, since accessing an attribute cannot change anything. A change performed by a function is known as a side effect to indicate that it is ancillary to the function's official purpose of answering a query. Should we permit side effects?"&lt;/p&gt;
&lt;p class="attribution"&gt;—"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Отсюда следует ряд выводов. Основной вопрос CQS лежит в плоскости Queries, и сводится с ссылочной прозрачности.&lt;/p&gt;
&lt;p&gt;Хотя B.Meyer и использует термин procedure, которая, по определению ничего не возвращает ("Procedure - A routine which does not return a result. (The other form of routine is the function.)" - glossary книги "Object-Oriented Software Construction" 2nd edition by Bertrand Meyer), он ясно выразил разделение Команд и Запросов &lt;strong&gt;по назначению&lt;/strong&gt;: "A command serves to modify objects, a query to return information about objects."&lt;/p&gt;
&lt;p&gt;Это определение не отвечает на вопрос, изменится ли суть команды, если она будет возвращать служебную информацию о процессе выполнения, которая не является информацией об объекте, и не нарушает ссылочную прозрачность (которая по определению не применима к командам).
Этот момент очень важен, и в будущем мы еще к нему вернемся.
Но, зато, он ясно дал понять, что команда может возвращать значение, и именно поэтому, желательно избегать возврата ею информации об ошибке.
В наши дни, напомню, такая проблема больше не актуальна.
Тем более, она не актуальна при переносе этого вопроса на способы сетевого взаимодействия.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="command-query"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;Кроме Command и Query существуют еще и функции-конструкторы&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;А теперь самое важное.
При обсуждении CQRS этот момент часто незаслуженно опускается.
Кроме процедур-команд и функций-запросов, Bertrand Meyer вводит еще и &lt;strong&gt;функции-конструкторы&lt;/strong&gt;!
И вот тут кроется интересное.
Накладывается ли на функцию-конструктор ограничение на side effect - зависит от контекста её применения:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Functions that create objects.&lt;/p&gt;
&lt;p&gt;A technical point needs to be clarified before we examine further consequences of the Command-Query Separation principle: &lt;strong&gt;should we treat object creation as a side effect&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;The answer is yes, as we have seen, if the target of the creation is an attribute a: in this case, the instruction !! a changes the value of an object's field. The answer is no if the target is a local entity of the routine. But what if the target is the result of the function itself, as in !! Result or the more general form !! Result.make (...)?&lt;/p&gt;
&lt;p&gt;Such a creation instruction need not be considered a side effect. It does not change any existing object and so does not endanger referential transparency (at least if we assume that there is enough memory to allocate all the objects we need).&lt;/p&gt;
&lt;p&gt;From a mathematical perspective we may pretend that all of the objects of interest, for all times past, present and future, are already inscribed in the Great Book of Objects; &lt;strong&gt;a creation instruction is just a way to obtain one of them, but it does not by itself change anything in the environment&lt;/strong&gt;. It is common, and legitimate, for a function to create, initialize and return such an object.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;These observations assume that in the second form the creation procedure make does not produce side effects on any object other than the one being created.&lt;/strong&gt;"&lt;/p&gt;
&lt;p class="attribution"&gt;—"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Это замечание B.Meyer является очень важным, так как наиболее частый вопрос CQRS - это возврат идентификатора созданного ресурса и исполнение требований RFC-7231 для HTTP-method POST REST API:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "the origin server SHOULD send a 201 (Created) response containing a Location header field that provides an identifier for the primary resource created (Section 7.1.2) and a representation that describes the status of the request while referring to the new resource(s).&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://tools.ietf.org/html/rfc7231#section-4.3.3"&gt;Section 4.3.3. POST of RFC-7231&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="query-abstract-side-effect-concrete-side-effect"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;Query не должен иметь abstract side effect, но может иметь concrete side effect&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Говоря о &lt;a class="reference external" href="https://t.me/emacsway_log/278"&gt;side effect&lt;/a&gt;, B.Meyer накладывает ограничение на "abstract side effect", и поясняет на примере. Сразу скажу, без прочтения главы 11 вряд ли можно понять о чем здесь идет речь. Но обойти вниманием этот пример тоже нельзя.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Unfortunately, this would be unacceptably restrictive, explaining why the Command-Query Separation principle only prohibits abstract side effects, a notion that will now be defined. The problem is that some concrete side effects are not only harmless but necessary. They are of two kinds.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;Side effects of the second acceptable category may change the state of the object, but only affecting properties that are not visible to clients. To understand the concepts in depth, it will be useful to make sure that you are familiar with the discussion of "abstraction function" and "implementation invariants" in the presentation of Design by Contract. (In particular, take a look at the accompanying figures to refresh your memory.)&lt;/p&gt;
&lt;p&gt;We saw then that an object of our software (a concrete object) is the representation of an abstract object, and that two concrete objects may represent the same abstract object.&lt;/p&gt;
&lt;p&gt;For example two different stack representations, each made of an array and a top marker count, represent the same stack if they have the same value for count and the same array elements up to index count. They may differ in other properties, such as the array sizes and the values stored at indices above count. In mathematical terms, every concrete object belongs to the domain of the abstraction function a, and we can have c1 ≠ c2 even with a(c1) = a(c2).&lt;/p&gt;
&lt;p&gt;What this means for us is that a function that modifies a concrete object is harmless if the result of this modification still represents the same abstract object — yields the same a value. For example assume in a function on stacks contains the operation&lt;/p&gt;
&lt;p&gt;representation.put (some_value, count + 1)&lt;/p&gt;
&lt;p&gt;(with the guarantee that the array's capacity is at least count + 1). &lt;strong&gt;This side effect changes a value above the stack-significant section of the array; it can do no ill.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;More generally, a concrete side effect which changes the concrete state of an object c is an abstract side effect if it also changes its abstract state, that is to say the value of a (c) (a more directly usable definition of abstract side effects will appear shortly). If a side effect is only concrete — does not affect the abstract state — it is harmless.&lt;/p&gt;
&lt;p&gt;In the object-as-machine metaphor, functions producing concrete-only side effects correspond to query buttons that may produce an internal state change having absolutely no effect on the answers given by any query button. For example the machine might save energy by automatically switching off some internal circuits if nobody presses a button for some time, and turning them on again whenever someone presses any button, queries included. Such an internal state change is unnoticeable from the outside and hence legitimate."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Что это означает в контексте REST-API, мы увидим ниже.&lt;/p&gt;
&lt;p&gt;И последнее на тему CQS.
Далее мы будем рассматривать уже CQRS.
Как видим, тема CQS намного более обширна и тонка, чем может показаться на первый взгляд.
И за один день её точно не освоить.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;Что делать с атомарными операциями?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Для погружения в CQRS нужно обратить внимание на еще два существенных момента.&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;Процедура не возвращает значения, но может изменить ссылочный аргумент&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Момент первый - routine может возвращать информацию наружу не только в виде возвращаемого значения, но и путем изменения объекта, переданного аргументом по ссылке.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Function clone creates a new object as a carbon copy of an existing one. Sometimes the target object already exists; all we want to do is to overwrite its fields. Procedure copy achieves this. It is called through the instruction x.copy (y)"&lt;/p&gt;
&lt;p class="attribution"&gt;—"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer, chapter "8.6 OPERATIONS ON REFERENCES :: Object copying"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Именно на этом основан &lt;a class="reference external" href="https://martinfowler.com/eaaDev/Notification.html"&gt;Notification Pattern&lt;/a&gt;, который широко применяется в языках, не поддерживающих механизм исключений (Golang, например).&lt;/p&gt;
&lt;p&gt;Как можно организовать ссылочную связь через сетевое взаимодействие?
Через идентификатор адресации в виде callback url.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;Концепция буфера для разделения атомарных операций Command и Query&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;И второй момент - это известный кейс с примером, широко известным как метод .pop(), который одновременно и удаляет, и возвращает элемент списка.&lt;/p&gt;
&lt;p&gt;B.Meyer решает эту проблему с помощью концепции буффера:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "buffer — the concurrent equivalent of a first-in, first out queue."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS :: Objections"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;И приводит пример:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;next_element := buffer.item
buffer.remove&lt;/p&gt;
&lt;p&gt;📝 "With the notation of this chapter, it is easy to obtain exclusive access without sacrificing the Command-Query Separation principle: simply enclose the two instructions above, with buffer replaced by b, in a procedure of formal argument b, and call that procedure with the attribute buffer as argument."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer, chapter "30.12 DISCUSSION :: Support for command-query separation"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Вы уже, наверное, догадались, что я подвожу к паттерну "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/async-request-reply"&gt;Asynchronous Request-Reply pattern&lt;/a&gt;", использующему "&lt;a class="reference external" href="https://tools.ietf.org/html/rfc7231#section-6.3.3"&gt;202 Response Status Code&lt;/a&gt;".&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;Что делать, если CQRS-команда должна вернуть идентификатор созданного ресурса?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Вернемся к вопросу о возврате ID созданного ресурса в ответ на POST запрос REST-API.
Как говорилось &lt;a class="reference external" href="https://t.me/emacsway_log/282"&gt;ранее&lt;/a&gt;, RFC-7231 требует, чтобы REST API вернул идентификатор созданного ресурса в ответ на HTTP POST запрос.&lt;/p&gt;
&lt;p&gt;Какие вообще есть альтернативы?&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "If the data is needed by the client as soon as it is submitted, it is there – on the client that submitted it. No need to poll the query side. The only thing that might not have been there is an ID from the database – which is easily solved with client-generated GUIDs instead of database-generated IDs."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clarified CQRS" &lt;a class="reference external" href="http://udidahan.com/2009/12/09/clarified-cqrs/#comment-5118"&gt;comment 68&lt;/a&gt; of Udi Dahan&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Идентификатор может быть сгенерирован на стороне клиентского приложения, используя &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUID&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hi/Lo_algorithm"&gt;Hi/Lo algorithm&lt;/a&gt; и т.п.
После этого, ресурс может быть создан посредством PUT Request Method:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The PUT method requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload. &amp;lt;...&amp;gt; If the target resource does not have a current representation and the PUT successfully creates one, then the origin server MUST inform the user agent by sending a 201 (Created) response."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://tools.ietf.org/html/rfc7231#section-4.3.4"&gt;Section 4.3.4. PUT of RFC-7231&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Другим вариантом, как говорилось &lt;a class="reference external" href="https://t.me/emacsway_log/284"&gt;ранее&lt;/a&gt;, может быть "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/async-request-reply"&gt;Asynchronous Request-Reply pattern&lt;/a&gt;", использующий &lt;a class="reference external" href="https://tools.ietf.org/html/rfc7231#section-6.3.3"&gt;202 Response Status Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Но действительно ли нам нужно получать идентификатор в ответ на команду? Часто такая потребность возникает просто из-за недостаточного понимания тех выгод, которые предоставляет CQS и Referential Transparency - однонаправленный поток изменений и единственный источник истины.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt;Однонаправленный поток изменений&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Referential Transparency означает, что вызов функции можно многократно повторять без какого-либо ущерба, и она всегда будет возвращать один и тот же результат.&lt;/p&gt;
&lt;p&gt;Более того, - возникает возможность легко управлять потоком изменений, сделав его однонаправленным, и сформировав единственный источник истины (single source of truth - один из ключевых принципов &lt;a class="reference external" href="https://redux.js.org/understanding/thinking-in-redux/three-principles"&gt;Redux&lt;/a&gt;, который &lt;a class="reference external" href="https://redux.js.org/understanding/thinking-in-redux/motivation"&gt;следует принципам CQRS&lt;/a&gt;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Following in the steps of &lt;a class="reference external" href="https://facebook.github.io/flux"&gt;Flux&lt;/a&gt;, &lt;a class="reference external" href="https://martinfowler.com/bliki/CQRS.html"&gt;CQRS&lt;/a&gt;, and &lt;a class="reference external" href="https://martinfowler.com/eaaDev/EventSourcing.html"&gt;Event Sourcing&lt;/a&gt;, Redux attempts to make state mutations predictable by imposing certain restrictions on how and when updates can happen. These restrictions are reflected in the &lt;a class="reference external" href="https://redux.js.org/understanding/thinking-in-redux/three-principles"&gt;three principles&lt;/a&gt; of Redux.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://redux.js.org/understanding/thinking-in-redux/motivation"&gt;Motivation&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Redux can be described in three fundamental principles: 1) Single source of truth... 2) State is read-only... 3) Changes are made with pure functions&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;The only way to change the state is to emit an action, an object describing what happened.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://redux.js.org/understanding/thinking-in-redux/three-principles"&gt;Three Principles&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Redux uses a "one-way data flow" app structure&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://redux.js.org/tutorials/fundamentals/part-2-concepts-data-flow"&gt;Redux Fundamentals, Part 2: Concepts and Data Flow&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Это существенно облегчает создание сложных приложений, используя Task Based UI, позволяет легко организовать репликацию и кэширование, устранить задержки.
Подробнее эти вопросы хорошо раскрывает Udi Dahan в монументальной статье "&lt;a class="reference external" href="http://udidahan.com/2009/12/09/clarified-cqrs/"&gt;Clarified CQRS&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;Статья доступна для скачивания &lt;a class="reference external" href="https://udidahan.com/wp-content/uploads/Clarified_CQRS.pdf"&gt;в формате pdf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Представьте, что пользователь добавил в корзину последний товар, используя совмещенную операцию Команды и Запроса. В ответ на Команду, сервер сообщил, что товар снят с продажи. Клиентское приложение пользователя обновило свое состояние, и заблокировало в UI возможность заказать уже недоступный товар.&lt;/p&gt;
&lt;p&gt;Я намеренно примитивизирую ситуацию - на самом деле она гораздо более сложнее в распределенных системах:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://youtu.be/fWU8ZK0Dmxs"&gt;Udi Dahan - If (domain logic) then CQRS, or Saga?&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;хороший пример с overbooking в книге &lt;a class="reference external" href="https://martinfowler.com/books/nosql.html"&gt;NoSQL Distilled&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Проблема в том, что между пользователем и сервером существует двунаправленный поток изменений, который недоступен остальным пользователям, так как операция модификации и чтения данных совмещена.&lt;/p&gt;
&lt;p&gt;Другой пользователь, для которого источником истины является локальное состояние его клиентского приложения, ничего не знает о том, что товар уже недоступен, пытается его заказать, но, вместо подтверждения заказа, получает сообщение о недоступности товара.&lt;/p&gt;
&lt;p&gt;Сюда можно добавить еще время, требуемое на обновление реплик чтения.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Staleness refers to the fact that in a collaborative environment, once data has been shown to a user, that same data may have been changed by another actor – it is stale. Almost any system which makes use of a cache is serving stale data – often for performance reasons. What this means is that we cannot entirely trust our users decisions, as they could have been made based on out-of-date information."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://udidahan.com/2009/12/09/clarified-cqrs/"&gt;Clarified CQRS&lt;/a&gt;" by Udi Dahan&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Отделение Команд от Запросов позволяет организовать однонаправленный поток изменений, и тогда оба пользователя одновременно получат сообщение о событии, что последний товар закончился.&lt;/p&gt;
&lt;div class="figure align-center" id="id9"&gt;
&lt;a class="reference internal image-reference" href="../../../../../_images/cqrs.png"&gt;&lt;img alt="CQRS. The image from &amp;quot;Clarified CQRS&amp;quot; by Udi Dahan https://udidahan.com/2009/12/09/clarified-cqrs/" src="../../../../../_images/cqrs.png" style="width: 70%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;CQRS. The image from "&lt;a class="reference external" href="https://udidahan.com/2009/12/09/clarified-cqrs/"&gt;Clarified CQRS&lt;/a&gt;" by Udi Dahan&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "After the command-processing autonomous component has decided to accept a command, modifying its persistent store as needed, it publishes an event notifying the world about it."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://udidahan.com/2009/12/09/clarified-cqrs/"&gt;Clarified CQRS&lt;/a&gt;" by Udi Dahan&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "CQRS is about coming up with an appropriate architecture for multi-user collaborative applications. It explicitly takes into account factors like data staleness and volatility and exploits those characteristics for creating simpler and more scalable constructs."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://udidahan.com/2009/12/09/clarified-cqrs/"&gt;Clarified CQRS&lt;/a&gt;" by Udi Dahan&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Теперь, понимая важность однонаправленного потока изменений в условиях collaborative evironment, нам становится легче понять разницу между abstract side effect и concrete side effect.&lt;/p&gt;
&lt;p&gt;В &lt;a class="reference external" href="https://youtu.be/fWU8ZK0Dmxs"&gt;этом видео&lt;/a&gt; Udi Dahan использовал термин sandbox.&lt;/p&gt;
&lt;p&gt;Часто ресурс начинает создаваться как черновик.
Он не доступен никому через публичный интерфейс, кроме его автора.
Никто не должен знать о его существовании, кроме его автора.
И если мы нарушим здесь CQS, то никто этого не заметит.
На ресурс распространяется &lt;strong&gt;concrete side effect&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://t.me/emacsway_log/278"&gt;https://t.me/emacsway_log/278&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://t.me/emacsway_log/283"&gt;https://t.me/emacsway_log/283&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Другое дело, когда мы должны опубликовать этот ресурс - тогда он должен появиться у всех, кто просматривает коллекцию, содержащую опубликованный ресурс (если, разумеется, это имеет ценность с точки зрения предметной области), а не только инициатор публикации.
И все пользователи, включая автора, должны получить уведомление о публикации ресурса, через единый однонаправленный канал потока изменений.&lt;/p&gt;
&lt;p&gt;Такой же вывод возникает и из принципа &lt;strong&gt;функции-конструктора&lt;/strong&gt; - до тех пор, пока ресурс не принадлежит ни к одной из публичных коллекций, доступной остальным пользователям, side effect не имеет последствий:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://t.me/emacsway_log/281"&gt;https://t.me/emacsway_log/281&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Но когда коллекция изменилась, то все пользователи, просматривающие эту коллекцию, должны быть уведомлены единовременно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jimmy-bogard"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;Точка зрения Jimmy Bogard&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ответ Jimmy Bogard по поводу того, может ли CQRS-Команда возвращать результат:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "It might seem rather strange that commands always have a result, but it's much, much easier to deal with side effects of commands through return parameters than through some other means (global registry, static field, re-querying some object, collecting parameter, etc.). &lt;strong&gt;For commands that create an item, I usually want to redirect to a screen showing that item, very easily accomplished when I can get the created item and as for its ID.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a bit controversial, but don't frankly care, as it's the simplest thing that could possibly work. If I want to have a command that returns Void, I could steal a page from F# and have a Command base class that returns a Unit type:"&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2013/12/19/put-your-controllers-on-a-diet-posts-and-commands/"&gt;Put your controllers on a diet: POSTs and commands&lt;/a&gt;" by Jimmy Bogard&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Обратите внимание, в последнем предложении он говорит о том, как вернуть и результат, и ошибку одновременно.
Это является решением именно того вопроса, который пытался разрешить B.Meyer с помощью side-effect-free style здесь: &lt;a class="reference external" href="https://t.me/emacsway_log/279"&gt;https://t.me/emacsway_log/279&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Причины такого решения он раскрывает в другой своей статье:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Myth #2 – CQRS requires an eventual consistent read store&lt;/p&gt;
&lt;p&gt;No, it does not. You can make your read store immediately consistent. That is, your read store can be updated when your command side succeeds (in the same transaction).&lt;/p&gt;
&lt;p&gt;For many legacy/existing apps, transitioning to eventually consistent read stores will either force you to go through bogus hoops of mimicking synchronous calls. Users will bang down on your door with pitchforks and torches if you try and transition to an asynchronous model if you don't change their business process first.&lt;/p&gt;
&lt;p&gt;Instead, you can start with immediate consistency and transition where and when it's needed. Unless a user expects a confirmation page, making every command page have a series of confirmations of "your request was received" is going to annoy the snot out of your users.&lt;/p&gt;
&lt;p&gt;Myth #3 – CQRS requires a bus/queues/asynchronous messaging&lt;/p&gt;
&lt;p&gt;See above myth. &lt;strong&gt;Nothing about CQRS says "thou shalt use NServiceBus". It's just not there. You're merely separating infrastructure between handling commands and queries, but the how is quite varied. Don't start with a bus until you prove you need eventual consistency.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Consistency models are a business decision because it directly impacts user experience. An eventually consistent model requires a different user experience than an immediate one, and this is not something you can just "slip in" to your users, or try to emulate. If you're attempting to emulate immediate consistency in an eventually consistent model, you're doing something wrong.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2012/08/22/busting-some-cqrs-myths/"&gt;Busting some CQRS myths&lt;/a&gt;" by Jimmy Bogard&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Что он также подтверждает своим комментарием к этой статье:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Scaling and CQRS are orthogonal, it's highly contextual and certainly doesn't require async."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2012/08/22/busting-some-cqrs-myths/#comment-3422377189"&gt;Busting some CQRS myths&lt;/a&gt;" by Jimmy Bogard&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;Вывод&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Итак, ответ прост - если вы не используете асинхронное исполнение Команды посредством инфраструктуры (Command Bus), то ничто не препятствует вам получить идентификатор вновь созданной записи БД в возвращаемом командой результате, и реализацию можно существенно упростить.
Впрочем, возвратить результат можно даже используя Command Bus, но тут вопрос к потреблению ресурсов (все зависит от конкретного случая).&lt;/p&gt;
&lt;p&gt;Вопрос не в том, возвращает ли команда результат (при этом нужно отличать результат от служебной информации, например, от успешности валидации и принятия команды), а в том, можно ли получить информацию о ресурсе без abstract side effect, т.е. смогут ли другие клиенты получить ту же информацию, если она им нужна.&lt;/p&gt;
&lt;p&gt;Этот вопрос также разбирали следующие авторы:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://habr.com/ru/post/347908/"&gt;CQRS. Факты и заблуждения&lt;/a&gt;" / Максим Аршинов&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://event-driven.io/en/can_command_return_a_value/"&gt;Can command return a value?&lt;/a&gt;" by Oskar Dudycz&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://event-driven.io/en/cqrs_facts_and_myths_explained/"&gt;CQRS facts and myths explained&lt;/a&gt;" by Oskar Dudycz&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://blog.ploeh.dk/2014/08/11/cqs-versus-server-generated-ids/"&gt;CQS versus server generated IDs&lt;/a&gt;" by Mark Seemann&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://blogs.cuttingedge.it/steven/posts/2012/returning-data-from-command-handlers/"&gt;Returning data from command handlers&lt;/a&gt;" by Steven van Deursen&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ранее, этот вопрос &lt;a class="reference internal" href="../domain-model/domain-events/domain-events-in-ddd.html#emacsway-de-cqrs-command-and-result"&gt;&lt;span class="std std-ref"&gt;частично уже рассматривался&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Domain Events in DDD</title><link>https://dckms.github.io/system-architecture/emacsway/it/ddd/tactical-design/domain-model/domain-events/domain-events-in-ddd.html</link><description>
&lt;span id="index-0"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Существует множество спорных точек зрения среди практиков DDD по поводу реализации Domain Events.
Лучший способ понять суть вещей - это обратиться к первоисточнику, чтобы понять его мотивы и те проблемы, решение которым он стремился найти.&lt;/p&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#domain-events-in-ddd" id="id116"&gt;Domain Events in DDD&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#domain-event" id="id117"&gt;Назначение Domain Event&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#eventual-consistency-vs-strong-transactional-consistency" id="id118"&gt;Eventual Consistency vs Strong (Transactional) Consistency&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#eventual-consistency" id="id119"&gt;Eventual Consistency - это следствие, а не причина&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id15" id="id120"&gt;Eventual Consistency предпочтительней&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id18" id="id121"&gt;Все решают бизнес-правила&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ask-whose-job-it-is" id="id122"&gt;Принцип "Ask Whose Job It Is"&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#strong-consistency" id="id123"&gt;Strong Consistency - новичкам&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#performance" id="id124"&gt;Интересы performance&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id25" id="id125"&gt;Обратная совместимость формата объектов событий&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#net-microservices" id="id126"&gt;Рекомендации от ".NET Microservices"&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#scott-millett-nick-tune" id="id127"&gt;Мнение Scott Millett и Nick Tune&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#jimmy-bogard" id="id128"&gt;Мнение Jimmy Bogard&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#kamil-grzybek" id="id129"&gt;Мнение Kamil Grzybek&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#udi-dahan" id="id130"&gt;Мнение Udi Dahan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#cesar-de-la-torre" id="id131"&gt;Мнение Cesar De la Torre&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#in-process-vs-out-of-process" id="id132"&gt;In-process vs out-of-process&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#internal-vs-external" id="id133"&gt;Internal vs External&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#one-phase-vs-two-phase" id="id134"&gt;One-phase vs Two-phase&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id70" id="id135"&gt;Кто может издавать Domain Event?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id73" id="id136"&gt;Может ли Domain Event отменить свою причину?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id79" id="id137"&gt;Решение - это баланс стоимости и обретаемой выгоды&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#cqrs" id="id138"&gt;Может ли CQRS-команда возвращать результат?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#atomicity-and-resiliency-of-integration-events" id="id139"&gt;Atomicity and Resiliency of Integration Events&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#integration-events" id="id140"&gt;Проблема сохранения очередности Integration Events&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id104" id="id141"&gt;Где создавать Domain Event об удалении объекта?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id108" id="id142"&gt;Почему важно читать оригиналы вместо переводов&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id111" id="id143"&gt;Послесловие&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Как сказал Bertrand Meyer,&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The zealots of an idea are often more extreme than its creators - the phase "more royalist than the King" captures that phenomenon - and you will find that foundational agile texts, such as those by Beck, Larman or Cockburn, occupy a higher plane of discourse; in particular they avoid below-the-belt hits at other approaches.&lt;/p&gt;
&lt;p&gt;- "Agile!: The Good, the Hype and the Ugly" by Bertrand Meyer&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Поэтому, я буду начинать всегда с первоисточников, т.е. с Eric Evans, Bertrand Meyer и др.
Но также буду делать обзор мнений их ключевых последователей - Vaughn Vernon, Jimmy Bogard, Greg Young, Udi Dahan, Kamil Grzybek, Scott Millett, Nick Tune, коллектив авторов руководств Microsoft по архитектуре и др.
К счастью, при внимательном рассмотрении, противоречий между ними практически нет.&lt;/p&gt;
&lt;div class="section" id="domain-event"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id117"&gt;Назначение Domain Event&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Something happened that domain experts care about.
Model information about activity in the domain as a series of discrete events. Represent each event as a domain object.
&amp;lt;...&amp;gt;
A domain event is a full-fledged part of the domain model, a representation of something that happened in the domain.&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design Reference" &lt;a class="footnote-reference brackets" href="#fndddr" id="id2"&gt;2&lt;/a&gt; by Eric Evans, Chapter "Domain Events"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="eventual-consistency-vs-strong-transactional-consistency"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id118"&gt;Eventual Consistency vs Strong (Transactional) Consistency&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="eventual-consistency"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id119"&gt;Eventual Consistency - это следствие, а не причина&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;A distinct, though related set of issues arises in distributed systems.
The state of a distributed system cannot be kept completely consistent at all times.
We keep the aggregates internally consistent at all times, while making other changes asynchronously.
As changes propagate across nodes of a network, it can be difficult to resolve multiple updates arriving out of order or from distinct sources.&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design Reference" &lt;a class="footnote-reference brackets" href="#fndddr" id="id3"&gt;2&lt;/a&gt; by Eric Evans, Chapter "Domain Events"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;It is difficult to guarantee the consistency of changes to objects in a model with complex associations.
Objects are supposed to maintain their own internal consistent state, but they can be blindsided by changes in other objects that are conceptually constituent parts.
Cautious database locking schemes cause multiple users to interfere pointlessly with each other and can make a system unusable.
Similar issues arise when distributing objects among multiple servers, or designing asynchronous transactions.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;Use the same aggregate boundaries to govern transactions and distribution.
Within an aggregate boundary, apply consistency rules synchronously. Across boundaries, handle updates asynchronously.
Keep an aggregate together on one server.
Allow different aggregates to be distributed among nodes.&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design Reference" &lt;a class="footnote-reference brackets" href="#fndddr" id="id4"&gt;2&lt;/a&gt; by Eric Evans, Chapter "Aggregates"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Здесь мы видим, что краеугольной причиной Eventual Consistency является распределенное хранение данных.
Это значит, что, в силу &lt;a class="reference external" href="http://ksat.me/a-plain-english-introduction-to-cap-theorem"&gt;CAP-теоремы&lt;/a&gt; (&lt;a class="reference external" href="https://habr.com/ru/post/130577/"&gt;перевод на Русский&lt;/a&gt;), становится невозможно достигнуть одновременно Consistency и Availability при Partition Tolerance.
Это та самая причина, по которой концепция Агрегата лежит в основе практически любого распределенного NoSQL хранилища - агрегат просто хранится целиком на одном узле, поэтому, он всегда и доступен, и согласован одновременно.&lt;/p&gt;
&lt;p&gt;Представьте на минутку, что узлы автомобиля хранятся на разных узлах, и они не успели прийти в согласованное состояние после обновления агрегата, в котором был заменен типоразмер шин.
Тогда у нас возникла бы вероятность получить из хранилища автомобиль с различными типоразмерами шин, что нарушило бы инвариант агрегата.&lt;/p&gt;
&lt;p&gt;Иными словами, Eventual Consistency является не причиной, а следствием. И сохраняется агрегат одной транзакцией потому, что иное просто технически невозможно в условиях распределенности. Точнее, Агрегат является границей транзакции. И Вернон прибегает к Eventual Consistency потому что это лучше для high availability, чем Two-Phase Commit.&lt;/p&gt;
&lt;p&gt;Таким образом, используя распределенное NoSQL хранилище или Actor Model, как правило, просто нет технической возможности сохранить более одного агрегата в одной транзакции.
Хотя, многие распределенные NoSQL хранилища и позволяют пакетировать несколько операций, транзакциями их считать нельзя.&lt;/p&gt;
&lt;p&gt;Используя микросервисную архитектуру с RDBMS, существует техническая возможность сохранять более одного агрегата внутри &lt;a class="reference external" href="https://martinfowler.com/bliki/IntegrationDatabase.html"&gt;одного и того же микросервиса&lt;/a&gt; одной транзакцией.
Правда, это может ухудшить уровень параллелизма, поэтому важно стремиться достигать наименее возможных границ транзакции.
А вот синхронизация агрегатов различных сервисов может быть только асинхронной, либо же с использованием Two-Phase Commit.
То же самое справедливо и для Bounded Contexts DDD-монолита.&lt;/p&gt;
&lt;p&gt;Стремление избежать Two-Phase Commit, в целях достижения highly scalable, подталкивает Vaughn Vernon к Eventual Consistency:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;It can eliminate the need for two-phase commits (global transactions) and support of the rules of Aggregates (10).&lt;/strong&gt;
One rule of Aggregates states that only a single instance should be modified in a single transaction, and all other dependent changes must occur in separate transactions.
So other Aggregate instances in the local Bounded Context may be synchronized using this approach.
We also bring remote dependencies into a consistent state with latency.
The decoupling helps provide &lt;strong&gt;a highly scalable&lt;/strong&gt; and peak-performing set of cooperating services.
It also allows us to achieve loose coupling between systems.&lt;/p&gt;
&lt;p&gt;-"Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id5"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "Chapter 8. Domain Events :: The When and Why of Domain Events"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Но мы видим, что, кроме проблемы достижения одновременной Согласованности и Доступности при распределенном хранении агрегатов (и устойчивости к разделению), озвучивается еще одна причина - database locking.
Означает ли проблема database locking то, что коммититься должен только один агрегат в одной транзакции при использовании RDBMS (Relational Database Management System)?
Это означает только то, что транзакция должна быть fine-grained.
"Fine-grained system transaction" != "one aggregate per transaction".&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;This rationale is based on embracing &lt;strong&gt;fine-grained transactions instead of transactions spanning many aggregates&lt;/strong&gt; or entities.
The idea is that in the second case, the number of database locks will be substantial in large-scale applications with high scalability needs.
Embracing the fact that &lt;strong&gt;highly scalable&lt;/strong&gt; applications need not have instant transactional consistency between multiple aggregates helps with accepting the concept of eventual consistency.
Atomic changes are often not needed by the business, and it is in any case the responsibility of the domain experts to say whether particular operations need atomic transactions or not.
If an operation always needs an atomic transaction between multiple aggregates, you might ask whether your aggregate should be larger or was not correctly designed.&lt;/p&gt;
&lt;p&gt;- ".NET Microservices: Architecture for Containerized .NET Applications" &lt;a class="footnote-reference brackets" href="#fnnetms" id="id6"&gt;7&lt;/a&gt; by Cesar de la Torre, Bill Wagner, Mike Rousos, Chapter "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#single-transaction-across-aggregates-versus-eventual-consistency-across-aggregates"&gt;Domain events: design and implementation :: Single transaction across aggregates versus eventual consistency across aggregates&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;О проблемах ухудшения параллелизма говорит и Vaughn Vernon, причем, причиной проблемы может стать даже один-единственный крупный агрегат.
Как видно, дело не столько в количестве агрегатов, сколько в размере границ транзакции.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Smaller Aggregates not only perform and scale better, they are also biased toward transactional success, meaning that conflicts preventing a commit are rare.&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id7"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "Chapter 10 Aggregates :: Rule: Design Small Aggregates"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Сам Eric Evans в своем известном выражении, которое многие приводят как первопричину Eventual Consistency, вовсе не требует одну транзакцию на агрегат, а говорит лишь о том, что после коммита инвариант каждого из агрегатов должен соблюдаться:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Invariants, which are consistency rules that must be maintained whenever data changes, will involve relationships between members of the AGGREGATE.
Any rule that &lt;strong&gt;spans AGGREGATES&lt;/strong&gt; will &lt;strong&gt;not be expected&lt;/strong&gt; to be up-to-date at all times.
Through event processing, batch processing, or other update mechanisms, other dependencies can be resolved within some specified time.
&lt;strong&gt;But the invariants applied within an AGGREGATE will be enforced with the completion of each transaction.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design: Tackling Complexity in the Heart of Software" &lt;a class="footnote-reference brackets" href="#fnddd" id="id8"&gt;1&lt;/a&gt; by Eric Evans, Chapter "Six. The Life Cycle of a Domain Object :: Aggregates"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Leave transaction control to the client. Although the REPOSITORY will insert into and delete from the database, it will ordinarily not commit anything.
It is tempting to commit after saving, for example, but the client presumably has the context to correctly initiate and commit units of work.
Transaction management will be simpler if the REPOSITORY keeps its hands off.&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design: Tackling Complexity in the Heart of Software" &lt;a class="footnote-reference brackets" href="#fnddd" id="id9"&gt;1&lt;/a&gt; by Eric Evans, Chapter "Six. The Life Cycle of a Domain Object :: Repositories"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;А здесь он говорит о корне агрегата во множественном числе:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Schemes have been developed for defining ownership relationships in the model. The following simple but rigorous system, distilled from those concepts, includes a set of rules for implementing transactions that modify the objects and their owners.&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design: Tackling Complexity in the Heart of Software" &lt;a class="footnote-reference brackets" href="#fnddd" id="id10"&gt;1&lt;/a&gt; by Eric Evans, Chapter "Six. The Life Cycle of a Domain Object :: Aggregates"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Такую же причину озвучивает и Vaughn Vernon:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;Transactions across distributed systems are not atomic.&lt;/strong&gt;
&lt;strong&gt;The various systems bring multiple Aggregates into a consistent state eventually.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id11"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "10 Aggregates :: Rule: Reference Other Aggregates by Identity :: Scalability and Distribution"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Accepting that &lt;strong&gt;all Aggregate instances in a large-scale, high-traffic enterprise are never completely consistent&lt;/strong&gt; helps us accept that eventual consistency also makes sense in the smaller scale where just a few instances are involved.&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id12"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "10 Aggregates :: Rule: Use Eventual Consistency Outside the Boundary"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Кстати, автором идеи агрегата является даже не Eric Evans, а David Siegel.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Schemes have been developed for defining ownership relationships in the model.
The following simple but rigorous system, distilled from those concepts, includes a set of rules for implementing transactions that modify the objects and their owners. [1]
(&lt;strong&gt;David Siegel devised and used this system on projects in the 1990s but has not published it.&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;First we need an abstraction for encapsulating references within the model.
An AGGREGATE is a cluster of associated objects that we treat as a unit for the purpose of data changes.
Each AGGREGATE has a root and a boundary.
The boundary defines what is inside the AGGREGATE.
The root is a single, specific ENTITY contained in the AGGREGATE.
The root is the only member of the AGGREGATE that outside objects are allowed to hold references to, although objects within the boundary may hold references to each other.
ENTITIES other than the root have local identity, but that identity needs to be distinguishable only within the AGGREGATE, because no outside object can ever see it out of the context of the root ENTITY.&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design: Tackling Complexity in the Heart of Software" &lt;a class="footnote-reference brackets" href="#fnddd" id="id13"&gt;1&lt;/a&gt; by Eric Evans, Chapter "Six. The Life Cycle of a Domain Object :: Aggregates"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Оригинальная работа David Siegel к сожалению, не опубликована (по крайней мере, мне ее отыскать не удалось).
Но он упоминается также в PoEAA, где определение агрегата звучит так:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Eric Evans and David Siegel [Evans] define an &lt;strong&gt;aggregate as a cluster of associated objects that we treat as a unit for data changes&lt;/strong&gt;.
Each aggregate has a root that provides the only access point to members of the set and a boundary that defines what's included in the set.
The aggregate's characteristics call for a Coarse-Grained Lock, since working with any of its members requires locking all of them. Locking an aggregate yields an alternative to a shared lock that I call a root lock (see Figure 16.4).
By definition locking the root locks all members of the aggregate. The root lock gives us a single point of contention.&lt;/p&gt;
&lt;p&gt;- "Patterns of Enterprise Application Architecture" &lt;a class="footnote-reference brackets" href="#fnpoeaa" id="id14"&gt;10&lt;/a&gt; by Martin Fowler, David Rice, Matthew Foemmel, Edward Hieatt, Robert Mee, Randy Stafford, Chapter "16. Offline Concurrency Patterns :: Coarse-Grained Lock"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Здесь говорится про единицу изменения, про бизнес-транзакцию и блокировку, но о связи бизнес-транзакции с системной транзакцией говорится только то, что "the system transaction in which you commit the business transaction", т.е. границы системной транзакции включают в себя границы бизнес-транзакции, но не ограничиваются ими.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id120"&gt;Eventual Consistency предпочтительней&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;С одной стороны, Vaughn Vernon настоятельно рекомендует использовать Eventual Consistency между Агрегатами.
И тут же объясняет - агрегаты в высоконагруженных масштабируемых распределенных приложениях, устойчивых к разделению, никогда не бывают доступны и согласованы между собой одновременно.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Thus, if executing a command on one Aggregate instance requires that additional business rules execute on one or more other Aggregates, &lt;strong&gt;use eventual consistency&lt;/strong&gt;.
Accepting that all &lt;strong&gt;Aggregate instances in a large-scale, high-traffic enterprise are never completely consistent&lt;/strong&gt; helps us accept that eventual consistency also makes sense in the smaller scale where just a few instances are involved.&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id16"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "10 Aggregates :: Rule: Use Eventual Consistency Outside the Boundary"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;An invariant is a business rule that must always be consistent.
There are different kinds of consistency. One is transactional consistency, which is considered immediate and atomic.
There is also eventual consistency. When discussing invariants, we are referring to transactional consistency.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;The consistency boundary logically asserts that everything inside adheres to a specific set of business invariant rules no matter what operations are performed.
The consistency of everything outside this boundary is irrelevant to the Aggregate.
Thus, Aggregate is synonymous with transactional consistency boundary.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;When employing a typical persistence mechanism, we use a single &lt;a class="reference external" href="https://martinfowler.com/eaaCatalog/unitOfWork.html"&gt;transaction&lt;/a&gt; to manage consistency.
When the transaction commits, everything inside one boundary must be consistent.
A properly designed Aggregate is one that can be modified in any way required by the business with its invariants completely consistent within a single transaction.
And a properly designed Bounded Context modifies only one Aggregate instance per transaction in all cases.
What is more, we cannot correctly reason on Aggregate design without applying transactional analysis.
Limiting modification to one Aggregate instance per transaction may sound overly strict.
However, it is a rule of thumb and should be the goal in most cases.
It addresses the very reason to use Aggregates.&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id17"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "10 Aggregates :: Rule: Model True Invariants in Consistency Boundaries"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id121"&gt;Все решают бизнес-правила&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;С другой стороны, все решают бизнес-правила:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The main point to remember from this section is that business rules are the drivers for determining what must be whole, complete, and consistent at the end of a single transaction.&lt;/p&gt;
&lt;p&gt;-  "Domain-Driven Design Distilled" &lt;a class="footnote-reference brackets" href="#fndddd" id="id19"&gt;4&lt;/a&gt; by Vaughn Vernon, Chapter "5. Tactical Design with Aggregates :: Why Used"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="ask-whose-job-it-is"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id122"&gt;Принцип "Ask Whose Job It Is"&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Тем не менее, Vaughn Vernon не считает вопрос Strong (Transactional) Consistency vs Eventual Consistency однозначным, и приводит четыре причины, по которым выбор может отдаваться в пользу Strong (Transactional) Consistency.
Цитировать все не буду - слишком много текста.
Кому интересно - глава "Chapter 10 Aggregates :: Rule: Use Eventual Consistency Outside the Boundary :: Ask Whose Job It Is" и далее, вплоть до главы "Gaining Insight through Discovery".
Приведу только отрывок:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Ask Whose Job It Is&lt;/p&gt;
&lt;p&gt;Some domain scenarios can make it very challenging to determine whether transactional or eventual consistency should be used.
Those who use DDD in a classic/traditional way may lean toward transactional consistency.
Those who use CQRS may tend toward eventual consistency.
But which is correct?
&lt;strong&gt;Frankly, neither of those tendencies provides a domain-specific answer, only a technical preference. Is there a better way to break the tie?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Discussing this with Eric Evans revealed a very simple and sound guideline.
When examining the use case (or story), ask whether it's the job of the user executing the use case to make the data consistent.
&lt;strong&gt;If it is, try to make it transactionally consistent, but only by adhering to the other rules of Aggregates.&lt;/strong&gt;
If it is another user's job, or the job of the system, allow it to be eventually consistent.
That bit of wisdom not only provides a convenient tie breaker, but it helps us gain a deeper understanding of our domain.
It exposes the real system invariants: the ones that must be kept transactionally consistent.
That understanding is much more valuable than defaulting to a technical leaning.&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id20"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "10 Aggregates :: Rule: Use Eventual Consistency Outside the Boundary :: Ask Whose Job It Is"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;В цитате Вона Вернона видно, что Эрик Эванс не спешит разделять стремление к одному агрегату на транзакцию, и предлагает рассматривать каждый случай отдельно.&lt;/p&gt;
&lt;p&gt;Можно заметить, что принцип "When examining the use case (or story), ask whether it's the job of the user executing the use case to make the data consistent. &lt;strong&gt;If it is, try to make it transactionally consistent, but only by adhering to the other rules of Aggregates.&lt;/strong&gt;" не противоречит приведенному ниже принципу "developers and architects like Jimmy Bogard are okay with spanning a single transaction across several aggregates - but only &lt;strong&gt;when those additional aggregates are related to side effects for the same original command&lt;/strong&gt;."&lt;/p&gt;
&lt;p&gt;Здесь же Vaughn Vernon напоминает нам, что во главе угла стоит, опять же, масштабирование и распределенность:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;We'll have &lt;strong&gt;consistency&lt;/strong&gt; where necessary [имеется ввиду CAP-theorem], and support for optimally performing and &lt;strong&gt;highly scalable systems&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id21"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "10 Aggregates :: Reasons to Break the Rules :: Adhering to the Rules"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Далее, в главе "Chapter 10 Aggregates :: Gaining Insight through Discovery :: Is It the Team Member's Job?" книги, он демонстрирует применение принципа "Ask Whose Job It Is" на практике.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="strong-consistency"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id123"&gt;Strong Consistency - новичкам&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Вот что советует новичкам Vaughn Vernon:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;There is nothing incredibly difficult about using eventual consistency.
Still, until you can gain some experience, you may be concerned about using it.
If so, you should still partition your model into Aggregates according to business-defined transactional boundaries.
&lt;strong&gt;However, there is nothing preventing you from committing modifications to two or more Aggregates in a single atomic database transaction.&lt;/strong&gt;
You might choose to use this approach in cases that you know will succeed but use eventual consistency for all others.
&lt;strong&gt;This will allow you to get used to the techniques without taking too big an initial step.&lt;/strong&gt;
&lt;strong&gt;Just understand that this is not the primary way that Aggregates are meant to be used, and you may experience transactional failures as a result.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design Distilled" &lt;a class="footnote-reference brackets" href="#fndddd" id="id22"&gt;4&lt;/a&gt; by Vaughn Vernon, Chapter "5. Tactical Design with Aggregates :: Rule 4: Update Other Aggregates Using Eventual Consistency"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="performance"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id124"&gt;Интересы performance&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ранее упоминалось, что одной из ключевых причин fine-grained транзакций является performance.
Но всегда ли?
На самом деле, все зависит от конкретных условий.
Забегая наперед, рассмотрим такое утверждение:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;NOTE: Try not to confuse this guideline with loading or creating aggregates.
It is perfectly fine to load multiple aggregates inside the same transaction as long as you save only one of them.
&lt;strong&gt;Equally, it is permissible to create multiple aggregates inside a single transaction because adding new aggregates should not cause concurrency issues.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;- "Patterns, Principles, and Practices of Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fnpppddd" id="id23"&gt;6&lt;/a&gt; by Scott Millett, Nick Tune, Chapter "19 Aggregates :: Special Cases"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Какое значение имеет это утверждение для performance?
Я обращусь к статьям двух известных организаций в области highload:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;This consistent insert throughput also persists when writing large batches of rows in single operations to TimescaleDB (instead of row-by-row).
Such batched inserts are common practice for databases employed in more high-scale production environments, e.g., when ingesting data from a distributed queue like Kafka.
&lt;strong&gt;In such scenarios, a single Timescale server can ingest 130K rows (or 1.3M metrics) per second, approximately 15x that of vanilla PostgreSQL once the table has reached a couple 100M rows.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="https://blog.timescale.com/blog/time-series-data-why-and-how-to-use-a-relational-database-instead-of-nosql-d0cd6975e87c/"&gt;Time-series data: Why (and how) to use a relational database instead of NoSQL&lt;/a&gt;" by Mike Freedman, Timescale CTO and co-founder. Professor of Computer Science at Princeton.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ol class="arabic simple" start="7"&gt;
&lt;li&gt;&lt;p&gt;Insert rows in batches.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to achieve higher ingest rates, you should insert your data with many rows in each INSERT call (or else use some bulk insert command, like COPY or our parallel copy tool).&lt;/p&gt;
&lt;p&gt;Don't insert your data row-by-row – instead try at least hundreds (or thousands) of rows per INSERT.
This allows the database to spend less time on connection management, transaction overhead, SQL parsing, etc., and more time on data processing.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="https://blog.timescale.com/blog/13-tips-to-improve-postgresql-insert-performance/"&gt;13 tips to improve PostgreSQL Insert performance&lt;/a&gt;" by Mike Freedman, Timescale CTO and co-founder. Professor of Computer Science at Princeton.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;It is of note here that each insert is a transaction.
What this means is Postgres is doing some extra coordination to make sure the transaction is completed before returning.
On every single write this takes some overhead.
Instead of single row transactions, if we wrap all of our inserts in a transaction like below, we'll see some nice performance gains:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This took my inserts down from 15 minutes 30 seconds to 5 minutes and 4 seconds.
We've suddenly boosted our throughput by 3x to about 3k inserts per second.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;By batching our inserts into a single transaction, we saw our throughput go higher.
But hold on, there is even more we can do. The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;\copy&lt;/span&gt;&lt;/code&gt; mechanism gives a way to bulk load data in an even more performant manner.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;Running this copy completes in 82 seconds! We're now processing over 10k writes per second on some fairly modest hardware.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="https://www.citusdata.com/blog/2017/11/08/faster-bulk-loading-in-postgresql-with-copy/"&gt;Faster bulk loading in Postgres with copy&lt;/a&gt;" by Craig Kerstiens, CitusData&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Вот что говорит по этому вопросу документация по PostgreSQL:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;When using multiple INSERTs, turn off autocommit and just do one commit at the end.
(In plain SQL, this means issuing BEGIN at the start and COMMIT at the end. Some client libraries might do this behind your back, in which case you need to make sure the library does it when you want it done.)
&lt;strong&gt;If you allow each insertion to be committed separately, PostgreSQL is doing a lot of work for each row that is added.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="https://www.postgresql.org/docs/11/populate.html#DISABLE-AUTOCOMMIT"&gt;PostgreSQL 11 Documentation :: 14.4. Populating a Database :: 14.4.1. Disable Autocommit&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Целесообразность использования Eventual Consistency в интересах performance нужно рассматривать в каждом конкретном случае отдельно.
Универсального рецепта не существует.
Этот вопрос особенно актуален при разработке сертифицированных приложений, где свобода выбора базы данных ограничена списком сертифицированных решений (зачастую вся свобода выбора сводится к RDBMS PostgresPro).
Организовать пакетирование запросов можно на уровне &lt;a class="reference external" href="https://martinfowler.com/eaaCatalog/unitOfWork.html"&gt;Unit of Work&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В контексте этого вопроса можно еще раз вспомнить утверждение Eric Evans:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Discussing this with Eric Evans revealed a very simple and sound guideline.
When examining the use case (or story), ask whether it's the job of the user executing the use case to make the data consistent.
&lt;strong&gt;If it is, try to make it transactionally consistent, but only by adhering to the other rules of Aggregates.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id24"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "10 Aggregates :: Rule: Use Eventual Consistency Outside the Boundary :: Ask Whose Job It Is"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id25"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id125"&gt;Обратная совместимость формата объектов событий&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Другим достоинством Strong Consistency является отсутствие потребности в обеспечении обратной совместимости формата объектов событий, ведь их время жизни ограничено одной транзакцией.
При использовании же шины сообщений всегда сохраняется вероятность того, что обновленная версия программного обеспечения, после ее развертывания, получит из шины устаревший формат сообщения, отправленный в шину еще предыдущей версией программного обеспечения.
Кроме того, возникает потребность поддерживать оба формата сообщений для организации &lt;a class="reference external" href="https://thenewstack.io/deployment-strategies/"&gt;blue-green deployment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Подробнее о версионировании сообщений смотрите в книге "&lt;a class="reference external" href="https://leanpub.com/esversioning"&gt;Versioning in an Event Sourced System&lt;/a&gt;" by Greg Young ("&lt;a class="reference external" href="https://leanpub.com/esversioning/read"&gt;читать online&lt;/a&gt;", "&lt;a class="reference external" href="https://github.com/luque/Notes--Versioning-Event-Sourced-System"&gt;конспект книги&lt;/a&gt;"), а так же в главе "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/msp-n-p/jj591577(v=pandp.10)#event-versioning"&gt;Event versioning&lt;/a&gt; книги "CQRS Journey".&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="net-microservices"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id126"&gt;Рекомендации от ".NET Microservices"&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;".NET Microservices: Architecture for Containerized .NET Applications" &lt;a class="footnote-reference brackets" href="#fnnetms" id="id26"&gt;7&lt;/a&gt; явно разделяет внутренние Domain Events (для подписчиков внутри Bounded Context) и внешние Integration Events.
Внутренние Domain Events рекомендуется использовать для синхронизации Агрегатов внутри Bounded Context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Domain events as a preferred way to trigger side effects across multiple aggregates within the same domain&lt;/p&gt;
&lt;p&gt;If executing a command related to one aggregate instance requires additional domain rules to be run on one or more additional aggregates, you should design and implement those side effects to be triggered by domain events.
As shown in Figure 7-14, and as one of the most important use cases, a domain event should be used to propagate state changes across multiple aggregates within the same domain model.&lt;/p&gt;
&lt;p&gt;- ".NET Microservices: Architecture for Containerized .NET Applications" &lt;a class="footnote-reference brackets" href="#fnnetms" id="id27"&gt;7&lt;/a&gt; by Cesar de la Torre, Bill Wagner, Mike Rousos, Chapter "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#domain-events-as-a-preferred-way-to-trigger-side-effects-across-multiple-aggregates-within-the-same-domain"&gt;Domain events: design and implementation :: Domain events as a preferred way to trigger side effects across multiple aggregates within the same domain&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Причем, Strong Consistency является приемлемым для внутренних Domain Events, синхронизирующих Агрегаты внутри Bounded Context:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Be aware that transactional boundaries come into significant play here.
&lt;strong&gt;If your unit of work and transaction can span more than one aggregate (as when using EF Core and a relational database), this can work well.&lt;/strong&gt;
But if the transaction cannot span aggregates, such as when you are using a NoSQL database like Azure CosmosDB, you have to implement additional steps to achieve consistency.&lt;/p&gt;
&lt;p&gt;- ".NET Microservices: Architecture for Containerized .NET Applications" &lt;a class="footnote-reference brackets" href="#fnnetms" id="id28"&gt;7&lt;/a&gt; by Cesar de la Torre, Bill Wagner, Mike Rousos, Chapter "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#the-deferred-approach-to-raise-and-dispatch-events"&gt;Domain events: design and implementation :: Implement domain events :: The deferred approach to raise and dispatch events&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Оба подхода, и Strong Consistency, и Eventual Consistency, являются приемлемыми для синхронизации Агрегатов внутри Bounded Context:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;Actually, both approaches (single atomic transaction and eventual consistency) can be right.&lt;/strong&gt;
It really depends on your domain or business requirements and what the domain experts tell you.
It also depends on how scalable you need the service to be (more granular transactions have less impact with regard to database locks).
And it depends on how much investment you are willing to make in your code, since eventual consistency requires more complex code in order to detect possible inconsistencies across aggregates and the need to implement compensatory actions.
Consider that if you commit changes to the original aggregate and afterwards, when the events are being dispatched, if there is an issue and the event handlers cannot commit their side effects, you will have inconsistencies between aggregates.&lt;/p&gt;
&lt;p&gt;A way to allow compensatory actions would be to store the domain events in additional database tables so they can be part of the original transaction.
Afterwards, you could have a batch process that detects inconsistencies and runs compensatory actions by comparing the list of events with the current state of the aggregates.
The compensatory actions are part of a complex topic that will require deep analysis from your side, which includes discussing it with the business user and domain experts.&lt;/p&gt;
&lt;p&gt;In any case, you can choose the approach you need.
But the initial deferred approach—raising the events before committing, so you use a single transaction—is the simplest approach when using EF Core and a relational database.
It is easier to implement and valid in many business cases.
It is also the approach used in the ordering microservice in eShopOnContainers.&lt;/p&gt;
&lt;p&gt;- ".NET Microservices: Architecture for Containerized .NET Applications" &lt;a class="footnote-reference brackets" href="#fnnetms" id="id29"&gt;7&lt;/a&gt; by Cesar de la Torre, Bill Wagner, Mike Rousos, Chapter "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#single-transaction-across-aggregates-versus-eventual-consistency-across-aggregates"&gt;Domain events: design and implementation :: Implement domain events :: Single transaction across aggregates versus eventual consistency across aggregates&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="scott-millett-nick-tune"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id127"&gt;Мнение Scott Millett и Nick Tune&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;Sometimes it is actually good practice to modify multiple aggregates within a transaction.&lt;/strong&gt;
But it's important to understand why the guidelines exist in the first place so that you can be aware of the consequences of ignoring them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When the cost of eventual consistency is too high, it's acceptable to consider modifying two objects in the same transaction.&lt;/strong&gt;
Exceptional circumstances will usually be when the business tells you that the customer experience will be too unsatisfactory.
You shouldn't just accept the business's decision, though; it never wants to accept eventual consistency.
You should elaborate on the scalability, performance, and other costs involved when not using eventual consistency so that the business can make an informed, customer‐focused decision.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Another time it's acceptable to avoid eventual consistency is when the complexity is too great.&lt;/strong&gt;
You will see later in this chapter that robust eventually consistent implementations often utilize asynchronous, out‐of‐process workflows that add more complexity and dependencies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To summarize, saving one aggregate per transaction is the default approach.&lt;/strong&gt;
But you should collaborate with the business, assess the technical complexity of each use case, and consciously ignore the guideline if there is a worthwhile advantage, such as a better user experience.&lt;/p&gt;
&lt;p&gt;NOTE: Try not to confuse this guideline with loading or creating aggregates.
It is perfectly fine to load multiple aggregates inside the same transaction as long as you save only one of them.
&lt;strong&gt;Equally, it is permissible to create multiple aggregates inside a single transaction because adding new aggregates should not cause concurrency issues.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You should try to align your aggregate boundaries with transactions, because the higher the number of aggregates being modified in a single transaction, the greater the chance of a concurrency failure.&lt;/strong&gt;
Therefore, strive to modify a single aggregate per use case to keep the system performant.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;If you find that you are modifying more than one aggregate in a transaction, it may be a sign that your aggregate boundaries can be better aligned with the problem domain.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;In a typical business use case there are often multiple actions that need to succeed or fail together inside a transaction.
By managing transactions in application services, you have full control over which operations that you request of the domain will live inside the same transaction boundary.&lt;/p&gt;
&lt;p&gt;This can be demonstrated using an updated RecommendAFriendService.
Imagine the business has decided that if the referral policy cannot be applied, it should not create the new account.
Therefore, the transactional boundary encapsulates creating the new account and applying the referral policy to both accounts, as shown in Figure 25-3.&lt;/p&gt;
&lt;p&gt;- "Patterns, Principles, and Practices of Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fnpppddd" id="id30"&gt;6&lt;/a&gt; by Scott Millett, Nick Tune, Chapter "19 Aggregates :: Special Cases"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="jimmy-bogard"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id128"&gt;Мнение Jimmy Bogard&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Вот что говорит ".NET Microservices: Architecture for Containerized .NET Applications" со ссылкой на Jimmy Bogard:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;However, other developers and architects like Jimmy Bogard are &lt;strong&gt;okay with spanning a single transaction across several aggregates - but only when those additional aggregates are related to side effects for the same original command&lt;/strong&gt;.
For instance, in &lt;a class="reference external" href="https://lostechies.com/jimmybogard/2014/05/13/a-better-domain-events-pattern/"&gt;A better domain events pattern&lt;/a&gt;, Bogard says this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Typically, I want the side effects of a domain event to occur within the same logical transaction, but not necessarily in the same scope of raising the domain event [...] Just before we commit our transaction, we dispatch our events to their respective handlers.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;- ".NET Microservices: Architecture for Containerized .NET Applications" &lt;a class="footnote-reference brackets" href="#fnnetms" id="id31"&gt;7&lt;/a&gt; by Cesar de la Torre, Bill Wagner, Mike Rousos, Chapter "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#single-transaction-across-aggregates-versus-eventual-consistency-across-aggregates"&gt;Domain events: design and implementation :: Single transaction across aggregates versus eventual consistency across aggregates&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Сам Jimmy Bogard говорит следующее:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Domain events are similar to messaging-style eventing, with one key difference.
With true messaging and a service bus, a message is fired and handled to asynchronously.
With domain events, the response is synchronous&lt;/p&gt;
&lt;p&gt;- "Strengthening your domain: Domain Events" &lt;a class="footnote-reference brackets" href="#fnjbde1" id="id32"&gt;18&lt;/a&gt; by Jimmy Bogard&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Transactions are handled in our unit of work wrapping each HTTP request.
Since our domain events are synchronous and on the same thread, they are part of the same transaction as the entity that first raised the event.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2010/04/08/strengthening-your-domain-domain-events/#comment-173067283"&gt;Strengthening your domain: Domain Events&lt;/a&gt;", comment of Jimmy Bogard&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;With our domain event in place, we can ensure that our entire &lt;strong&gt;domain model stays consistent with the business rules applied, even when we need to notify other aggregate roots&lt;/strong&gt; in our system when something happens.
We've also locked down all the ways the risk status could change (charged a new fee), so &lt;strong&gt;we can keep our Customer aggregate consistent even in the face of changes in a separate aggregate (Fee)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This pattern isn't always applicable.
If I need to do something like send an email, notify a web service or any other potentially blocking tasks, I should revert back to normal asynchronous messaging.
But for synchronous messaging across disconnected aggregates, &lt;strong&gt;domain events are a great way to ensure aggregate root consistency across the entire model&lt;/strong&gt;.
The alternative would be transaction script design, where consistency is enforced not by the domain model but by some other (non-intuitive) layer.&lt;/p&gt;
&lt;p&gt;- "Strengthening your domain: Domain Events" &lt;a class="footnote-reference brackets" href="#fnjbde1" id="id33"&gt;18&lt;/a&gt; by Jimmy Bogard&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Typically, I want the side effects of a domain event to occur within the same logical transaction, but not necessarily in the same scope of raising the domain event. If I cared enough to have the side effects occur, I would instead just couple myself directly to that other service as an argument to my domain's method.&lt;/p&gt;
&lt;p&gt;Instead of dispatching to a domain event handler immediately, what if instead we recorded our domain events, and before committing our transaction, dispatch those domain events at that point? This will have a number of benefits, besides us not tearing our hair out. Instead of raising domain events, let's define a container for events on our domain object:&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;Just before we commit our transaction, we dispatch our events to their respective handlers.&lt;/p&gt;
&lt;p&gt;- "A better domain events pattern" &lt;a class="footnote-reference brackets" href="#fnjbde2" id="id34"&gt;19&lt;/a&gt; by Jimmy Bogard&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="kamil-grzybek"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id129"&gt;Мнение Kamil Grzybek&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Вот что говорит Kamil Grzybek:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The way of handling of domain events depends indirectly on publishing method.
If you use DomainEvents static class, you have to handle event immediately.
In other two cases you control when events are published as well handlers execution – in or outside existing transaction.&lt;/p&gt;
&lt;p&gt;In my opinion &lt;strong&gt;it is good approach to always handle domain events in existing transaction&lt;/strong&gt; and treat aggregate method execution and handlers processing as atomic operation.
This is good because if you have a lot of events and handlers you do not have to think about initializing connections, transactions and what should be treat in "all-or-nothing" way and what not.&lt;/p&gt;
&lt;p&gt;- "How to publish and handle Domain Events" &lt;a class="footnote-reference brackets" href="#fnkgde1" id="id35"&gt;15&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Thanks for question Andreas!&lt;/p&gt;
&lt;p&gt;I know both books of Vaughn Vernon - they are great and must read for every DDD practitioner. From the DDD Distlled book (chapter 5 about aggregates):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;...business rules are the drivers for determining what must be whole, complete, and consistent at the end of a single transaction.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;So in general this is good rule to have separate transactions, but sometimes it is impossible or very hard to achieve.&lt;/p&gt;
&lt;p&gt;My approach is similar to Vaughn Vernon - I try always handle event in separate transaction if it is possible.
To do that I have two types of events: &lt;strong&gt;Domain Events (private, handled in the same transaction)&lt;/strong&gt; and &lt;strong&gt;Domain Events Notifications (handled outside transaction)&lt;/strong&gt;.
Domain Event Notification often becomes an Integration Event which is send to Events Bus to other Bounded Context.
This way I support all cases - immediate consistency, eventual consistency and integrations scenarios.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://www.kamilgrzybek.com/design/how-to-publish-and-handle-domain-events/#comment-4602236620"&gt;How to publish and handle Domain Events&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnkgde1" id="id36"&gt;15&lt;/a&gt;, comment of Kamil Grzybek&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Aggregates can publish multiple Domain Events, and for each Domain Event there can be many handlers responsible for different behavior.
This behavior can be communication with an external system or &lt;strong&gt;executing a Command on another Aggregate&lt;/strong&gt;, which will again publish its events to which another part of our system will subscribe.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://www.kamilgrzybek.com/design/handling-domain-events-missing-part/"&gt;Handling Domain Events: Missing Part&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnkgde2" id="id37"&gt;16&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Let's assume that in this particular case &lt;strong&gt;both Order placement and Payment creation should take place in the same transaction&lt;/strong&gt;.
If transaction is successful, we need to send 2 emails – about the Order and Payment.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Command Handler defines transaction boundary. Transaction is started when Command Handler is invoked and committed at the end.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Each Domain Event handler is invoked in context of the same transaction boundary.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If we want to process something outside the transaction, we need to create a &lt;strong&gt;public event&lt;/strong&gt; based on the Domain Event. I call it Domain Event Notification, &lt;a class="reference external" href="http://verraes.net/2019/05/patterns-for-decoupling-distsys-explicit-public-events/"&gt;some people call it a public event&lt;/a&gt;, but the concept is the same.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The second most important thing is when to publish and process Domain Events? Events may be created after each action on the Aggregate, so we must publish them:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;after each Command handling (but BEFORE committing transaction)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;after each Domain Event handling (but WITHOUT committing transaction)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;The second thing we have to do is to save notifications about Domain Events that we want to process outside of the transaction.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://www.kamilgrzybek.com/design/handling-domain-events-missing-part/"&gt;Handling Domain Events: Missing Part&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnkgde2" id="id38"&gt;16&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Обратите внимание, что, по приведенной им ссылке, под термином "public event" понимается сообщение, выходящее за пределы Bounded Context (к этому вопросу мы еще вернемся):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Set up separate messaging channels for inside the Bounded Context and outside. Keep all events private by default, and indicate the ones you want to make public with an explicit @Public annotation, a marker interface, or an isPublic():bool method. When emitting events, the event publishing mechanism knows to read the annotation and either send the event on the private channel only, or on both the private and the public channel.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://verraes.net/2019/05/patterns-for-decoupling-distsys-explicit-public-events/"&gt;Patterns for Decoupling in Distributed Systems: Explicit Public Events&lt;/a&gt;" by Mathias Verraes&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;И, в своем демонстрационном приложении sample-dotnet-core-cqrs-api, &lt;a class="reference external" href="https://github.com/kgrzybek/sample-dotnet-core-cqrs-api/blob/01a1d6517bc88773f004abc0cb9c6d79f537e575/src/SampleProject.Application/Orders/PlaceCustomerOrder/OrderPlacedDomainEventHandler.cs#L22"&gt;он демонстрирует обработку Domain Event в одной транзакции с агрегатом&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="udi-dahan"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id130"&gt;Мнение Udi Dahan&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&amp;gt; This might be a bit of a late question. But shouldn't domain events be handled after the transaction ends?
Is there any specific reason for handle domain events within the same transaction scoping DoSomething?&lt;/p&gt;
&lt;p&gt;Domain events get handled by service layer objects in the same process which usually send out other messages – as such, we want those messages to be sent (or not) in the same transactional context.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://udidahan.com/2009/06/14/domain-events-salvation/#comment-4723"&gt;Domain Events – Salvation&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnudde3" id="id39"&gt;22&lt;/a&gt; comment of Udi Dahan&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&amp;gt; In message number 120 above, Lars asks about how to access the data if the event is fired before the commit.
I didn't understand your response.
Maybe my situation is different so I'll explain.&lt;/p&gt;
&lt;p&gt;&amp;gt; I have 2 BCs.
One context deals with the merging of employee information.
I'd like to fire a domain event specifying that the employee was merged.
I'd like the 2nd BC to react to this event.
The issue is that the data won't be committed at that point, and this data that changed is vital to the 2nd BC to react.&lt;/p&gt;
&lt;p&gt;&amp;gt; Am I going down the wrong path by attempting to use domain events? Is there another solution you could suggest?&lt;/p&gt;
&lt;p&gt;The question is whether you need both your BCs to be consistent with each other at *all* times – ergo in the same transaction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If the answer is yes, then you absolutely do want the event to be raised and handled in the same transaction – you'd also be deploying both BCs together.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If the answer is no, then you should use some kind of message bus between the BCs.
The handler for the domain event would publish a message using the bus, and that would be enlisted in the same transaction – thus is the first BC rolled back, the message wouldn't be sent.
The second BC would be invoked by the bus when the message arrives at its queue where its handling would then be done in a separate transaction.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://udidahan.com/2009/06/14/domain-events-salvation/#comment-4730"&gt;Domain Events – Salvation&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnudde3" id="id40"&gt;22&lt;/a&gt; comment of Udi Dahan&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&amp;gt; Shouldn't the event only be handled when the transaction commits?
Until the transaction commits, the change to the domain object isn't really permanent, right?&lt;/p&gt;
&lt;p&gt;Not necessarily – sometimes you want loose-coupling within the same transaction.&lt;/p&gt;
&lt;p&gt;I do agree that often where we find a place ready for logical decoupling it coincides with separate transaction boundaries.
In those cases, using a transactionally-aware technology like NServiceBus will be a better choice for publishing events.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://udidahan.com/2009/06/14/domain-events-salvation/#comment-4773"&gt;Domain Events – Salvation&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnudde3" id="id41"&gt;22&lt;/a&gt; comment of Udi Dahan&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&amp;gt; Domain event could alter multiple aggregates which is common, wouldn't you be updating multiple aggregates in a single transaction?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The more common case is where those multiple aggregates are updated in separate transactions&lt;/strong&gt;, usually as a result of some kind of "service bus" event being transmitted from the domain events.
That service bus event gets routed to multiple subscribers, behind which you'd have each of the respective aggregates that would updated in their own transactions.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://udidahan.com/2009/06/14/domain-events-salvation/#comment-74959"&gt;Domain Events – Salvation&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnudde3" id="id42"&gt;22&lt;/a&gt; comment of Udi Dahan&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="cesar-de-la-torre"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id131"&gt;Мнение Cesar De la Torre&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;When handling the event, any event handler subscribed to the event could run additional domain operations by using other AggregateRoot objects, but again, you still need to be within the same transaction scope.&lt;/p&gt;
&lt;p&gt;&amp;lt;..&amp;gt;&lt;/p&gt;
&lt;p&gt;for in-memory event based communication across disconnected aggregates that are part of the same domain model and part of the same transaction, domain events are great ensuring consistency across a single domain model within the same microservice or Bounded-Context.&lt;/p&gt;
&lt;p&gt;- "Domain Events vs. Integration Events in Domain-Driven Design and microservices architectures" &lt;a class="footnote-reference brackets" href="#fncdltdevie" id="id43"&gt;23&lt;/a&gt; by Cesar De la Torre, Principal Program Manager, .NET&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Ссылки по теме:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.allthingsdistributed.com/2008/12/eventually_consistent.html"&gt;Eventually Consistent - Revisited&lt;/a&gt;" by Werner Vogels, CTO - Amazon.com&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.allthingsdistributed.com/2007/12/eventually_consistent.html"&gt;Eventually Consistent&lt;/a&gt;" by Werner Vogels, CTO - Amazon.com&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="in-process-vs-out-of-process"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id132"&gt;In-process vs out-of-process&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Обычно считается, что in-process - это синхронное исполнение, а out-of-process - асинхронное.
Хотя, сугубо технически, асинхронное исполнение может быть как in-process, так и out-of-process.
К тому же асинхронное исполнение нужно подразделять на использующее event-loop (async/await) и использующее внешнюю инфраструктуру (external event bus).&lt;/p&gt;
&lt;p&gt;В большинстве случаев, in-process подразумевает "в той же транзакции", т.е. Strong Consistency.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The reference app uses MediatR to propagate domain events synchronously across aggregates, within a single transaction.
However, you could also use some AMQP implementation like RabbitMQ or Azure Service Bus to propagate domain events asynchronously, using eventual consistency but, as mentioned above, you have to consider the need for compensatory actions in case of failures.&lt;/p&gt;
&lt;p&gt;- ".NET Microservices: Architecture for Containerized .NET Applications" &lt;a class="footnote-reference brackets" href="#fnnetms" id="id44"&gt;7&lt;/a&gt; by Cesar de la Torre, Bill Wagner, Mike Rousos, Chapter "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#conclusions-on-domain-events"&gt;Domain events: design and implementation :: Conclusions on domain events&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="internal-vs-external"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id133"&gt;Internal vs External&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Существует ряд методик (Anti-Corruption Layer, CQRS etc.), направленных на то, чтобы защитить изменения внутренних интерфейсов от изменения внешних и наоборот.
Это логично, так как они будут изменяться в разное время, с разной частотой и по разным причинам.&lt;/p&gt;
&lt;p&gt;Domain Events могут покидать пределы Bounded Context:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Using Domain Events will help you both to model explicitly and to share what has occurred within your model with the systems that need to know about it.
&lt;strong&gt;The interested parties might be your own local Bounded Context and other remote Bounded Contexts.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design Distilled" &lt;a class="footnote-reference brackets" href="#fndddd" id="id45"&gt;4&lt;/a&gt; by Vaughn Vernon, Chapter "1. DDD for Me :: Tactical Design"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;Publishing the Event outward to any number Bounded Contexts of other Subdomains (2) emphasizes the word Domain in the term Domain Event.&lt;/strong&gt;
In other words, Events are a domain-wide concept, not just a concept in a single Bounded Context.
The contract of Event publishing should have the potential to be at least as broad as the enterprise, or even broader.
Yet, wide broadcast does not forbid delivery of Events by consumers in the same Bounded Context.&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id46"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "8. Domain Events :: Publishing Events from the Domain Model :: Subscribers"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Это выдвигает вопрос по отношению к Domain Events - нужно ли отделять внутренние от внешних?
Проблему озвучивает сам Vaughn Vernon:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;Once your Domain Event is saved to the event store, it can be published to any interested parties . This might be within your own Bounded Context and to external Bounded Contexts.&lt;/strong&gt;
This is your way of telling the world that something noteworthy has occurred in your Core Domain.&lt;/p&gt;
&lt;p&gt;Are Domain Event Consumers Conformists?
&lt;strong&gt;You may be wondering how Domain Events can be consumed by another Bounded Context [это и есть тот самый волнующий вопрос - прим. мое] and not force that consuming Bounded Context into a Conformist relationship.&lt;/strong&gt;
As recommended in Implementing Domain-Driven Design [IDDD] , and specifically in Chapter 13, "Integrating Bounded Contexts," &lt;strong&gt;consumers should not use the event types (e.g., classes) of an event publisher&lt;/strong&gt;.
Rather, &lt;strong&gt;they should depend only on the schema of the events&lt;/strong&gt;, that is, &lt;strong&gt;their Published Language&lt;/strong&gt;.
This generally means that if the events are published as JSON, or perhaps a more economical object format, the consumer should consume the events by parsing them to obtain their data attributes."&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design Distilled" &lt;a class="footnote-reference brackets" href="#fndddd" id="id47"&gt;4&lt;/a&gt; by Vaughn Vernon, Chapter "6. Tactical Design with Domain Events:: Designing, Implementing, and Using Domain Events"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Тут он четко обозначает проблему, которой рано или поздно задаются многие. И он делает две вещи:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Он разделяет реализацию издания Domain Events внутри Bounded Context (ГОФ-паттерны), от реализации издания Domain Events для других Bounded Contexts (интеграционная шина), которая начинает выполняться после завершения первой.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Он разделяет Domain Events с публичной схемой, от остальных Domain Events. А это, по сути, и есть то самое, что в ".NET Microservices: Architecture for Containerized .NET Applications" &lt;a class="footnote-reference brackets" href="#fnnetms" id="id48"&gt;7&lt;/a&gt; именуется как Integration Event.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Поскольку эти виды Ивентов имеют различные цели, различный способ доставки, различные реализации, различные категории подписчиков, различную область действия и различное назначение, то они, резонно, разделили их на два вида события:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Domain Events, которые действуют исключительно внутри Bounded Context, и доставляются посредством ГОФ-паттернов синхронно или асинхронно (но исключительно in-process, используя event-loop и async/await конструкции) в той же транзакции.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integration Event, которые выходят за пределы Bounded Context, доставляются интеграционной шиной, всегда асинхронны и в другой транзакции.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Такого же мнения придерживается и Kamil Grzybek, называя внешние события (public event, которые уже упоминались) термином "Domain Event Notifications":&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Last thing to consider is processing of Domain Event Notifications (public events). We need to find a way to process them outside transaction and here Outbox Pattern comes in to play.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://www.kamilgrzybek.com/design/handling-domain-events-missing-part/"&gt;Handling Domain Events: Missing Part&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnkgde2" id="id49"&gt;16&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Sometimes, however, it is necessary to communicate with 3rd party service (for example e-mail or web service) based on Domain Event.
As we know, communication with 3rd party services is not usually transactional so we need some additional generic mechanism to handle these types of scenarios.
So I created Domain Events Notifications.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;There is no such thing as domain events notifications in DDD terms.
I gave that name because I think it fits best – it is notification that domain event was published.&lt;/p&gt;
&lt;p&gt;&amp;lt;..&amp;gt;&lt;/p&gt;
&lt;p&gt;For non-trasactional operations Domain Events Notifications were introduced.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://www.kamilgrzybek.com/design/how-to-publish-and-handle-domain-events/"&gt;How to publish and handle Domain Events&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnkgde1" id="id50"&gt;15&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;В одном из своих комментариев он  связывает "Domain Event Notification" с "Integration Events":&lt;/p&gt;
&lt;p&gt;My approach is similar to Vaughn Vernon - I try always handle event in separate transaction if it is possible. To do that I have two types of events: Domain Events (private, handled in the same transaction) and Domain Events Notifications (handled outside transaction). Domain Event Notification often becomes an &lt;strong&gt;Integration Event&lt;/strong&gt; which is send to Events Bus to other Bounded Context. This way I support all cases - immediate consistency, eventual consistency and integrations scenarios.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;- "&lt;a class="reference external" href="http://www.kamilgrzybek.com/design/how-to-publish-and-handle-domain-events/#comment-4602236620"&gt;How to publish and handle Domain Events&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnkgde1" id="id51"&gt;15&lt;/a&gt;, comment of Kamil Grzybek&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Обратите внимание на окончание - там перечислены три сценария:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Immediate consistency&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eventual consistency&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integrations scenarios&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;В другом комментарии он вносит уточнение:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Domain Event - private event, not persisted [Outbox], part of UL&lt;/p&gt;
&lt;p&gt;Domain Event Notification - private event, persisted [Outbox], part of UL. Sometimes called "persisted event"&lt;/p&gt;
&lt;p&gt;Integration event - public event, part of PL as you described&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://www.kamilgrzybek.com/design/handling-domain-events-missing-part/#comment-5205858557"&gt;Handling Domain Events: Missing Part&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnkgde2" id="id52"&gt;16&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Здесь у него, правда, наблюдается небольшое противоречие с предыдущим его комментарием:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;If you want to process Domain Event in separate transaction, you need to create Domain Event Notification &lt;strong&gt;(public event)&lt;/strong&gt; which is saved within the same transaction to the Outbox but processed in different (Outbox processing).&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://www.kamilgrzybek.com/design/handling-domain-events-missing-part/#comment-4507778871"&gt;Handling Domain Events: Missing Part&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnkgde2" id="id53"&gt;16&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;А так же, наблюдается противоречие с другим его выражением, где он, ссылаясь на определение Mathias Verraes, приравнивает Domain Event Notification к "public event":&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;&lt;p&gt;If we want to process something outside the transaction, we need to create a &lt;strong&gt;public event&lt;/strong&gt; based on the Domain Event. I call it Domain Event Notification, &lt;a class="reference external" href="http://verraes.net/2019/05/patterns-for-decoupling-distsys-explicit-public-events/"&gt;some people call it a public event&lt;/a&gt;, but the concept is the same.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://www.kamilgrzybek.com/design/handling-domain-events-missing-part/"&gt;Handling Domain Events: Missing Part&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnkgde2" id="id54"&gt;16&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Как уже упоминалось ранее, по приведенной им ссылке, под термином "public event" понимается сообщение, выходящее за пределы Bounded Context:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Set up separate messaging channels for inside the Bounded Context and outside. Keep all events private by default, and indicate the ones you want to make public with an explicit @Public annotation, a marker interface, or an isPublic():bool method. When emitting events, the event publishing mechanism knows to read the annotation and either send the event on the private channel only, or on both the private and the public channel.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://verraes.net/2019/05/patterns-for-decoupling-distsys-explicit-public-events/"&gt;Patterns for Decoupling in Distributed Systems: Explicit Public Events&lt;/a&gt;" by Mathias Verraes&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Но, в целом, понятно, что Domain Event обрабатывается внутри транзакции, Domain Event Notification - вне транзакции (и может требовать Outbox pattern), и Integration Event - за пределами Bounded Context.&lt;/p&gt;
&lt;p&gt;Позже Kamil Grzybek публикует в Twitter &lt;a class="reference external" href="https://twitter.com/kamgrzybek/status/1471756563400605701?t=DO3_TJK0jncMCGlvb34UuA&amp;amp;s=19"&gt;следующее разъяснение&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;In your system you should have 3 types of events:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Private, domain events (sth important occured in your domain)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Private, persisted events (based on 1, for later async processing)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Public, integration events (based on 2, to integrate with another contexts, part of contract)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://twitter.com/kamgrzybek/status/1471756563400605701?t=DO3_TJK0jncMCGlvb34UuA&amp;amp;s=19"&gt;Источник&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;И сопровождает его &lt;a class="reference external" href="https://twitter.com/kamgrzybek/status/1472232661938843657?t=czUCrilodujW8aAIdV6OBw&amp;amp;s=19"&gt;иллюстрацией&lt;/a&gt;:&lt;/p&gt;
&lt;div class="figure align-left" id="id112"&gt;
&lt;a class="reference internal image-reference" href="../../../../../../_images/domain-vs-integration-event-by-kamil-grzybek.jpeg"&gt;&lt;img alt="The difference between event types. The image source is https://twitter.com/kamgrzybek/status/1472232661938843657?t=czUCrilodujW8aAIdV6OBw&amp;amp;s=19" src="../../../../../../_images/domain-vs-integration-event-by-kamil-grzybek.jpeg" style="width: 70%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;The difference between event types.&lt;/span&gt;&lt;/p&gt;
&lt;div class="legend"&gt;
&lt;p&gt;— &lt;a class="reference external" href="https://twitter.com/kamgrzybek/status/1472232661938843657?t=czUCrilodujW8aAIdV6OBw&amp;amp;s=19"&gt;Источник&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Еще дальше идут авторы книги "Patterns, Principles, and Practices of Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fnpppddd" id="id55"&gt;6&lt;/a&gt;, вводя явное разделение внутренних и внешних событий:&lt;/p&gt;
&lt;div class="figure align-center" id="id113"&gt;
&lt;a class="reference internal image-reference" href="../../../../../../_images/pppddd-18.1.png"&gt;&lt;img alt="FIGURE pppddd-18-1: Ensuring correct transactional behavior. The image source is &amp;quot;Patterns, Principles, and Practices of Domain-Driven Design&amp;quot; by Scott Millett, Nick Tune" src="../../../../../../_images/pppddd-18.1.png" style="width: 70%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;FIGURE pppddd-18-1: Ensuring correct transactional behavior. The image source is "Patterns, Principles, and Practices of Domain-Driven Design" by Scott Millett, Nick Tune&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;An important distinction needs to be made when using the domain events pattern to avoid confusion that can lead to poor technical implementations. It is crucial that you are aware of the difference between internal and external events. Internal events are internal to a domain model–they are not shared between bounded contexts.
In this chapter, you will see how the domain events pattern uses internal events, whereas you saw external events in Part II of this book.&lt;/p&gt;
&lt;p&gt;Differentiating internal and external events is important because they have different characteristics.
Because internal events are limited in scope to a single bounded context, it is Ok to put domain objects on them, as the example in Listing 18‐1 showed. This poses no risk, because other bounded contexts cannot become coupled to these domain objects.
Conversely, external events tend to be flat in structure, exposing just a few properties—most of the time just correlational IDs, as typified in Listing 18‐3.&lt;/p&gt;
&lt;p&gt;You learned in Part II that external events need to be versioned to avoid breaking changes.
This is another differentiator with internal events, because if you make breaking changes to an internal  event your code will not compile (if using a compiled programming language). So there's no need to  version internal events.&lt;/p&gt;
&lt;p&gt;As you start to implement domain events, you will see that in a typical business use case there may  be a number of internal events raised, and just one or two external events that are raised by the  service layer.
Figure 18-2 illustrates how the sequence of events may occur in a typical use case.&lt;/p&gt;
&lt;p&gt;With all of these differences in mind, it makes sense to put your events in different namespaces to  accentuate those that are internal from those that are external.&lt;/p&gt;
&lt;p&gt;- "Patterns, Principles, and Practices of Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fnpppddd" id="id56"&gt;6&lt;/a&gt; by Scott Millett, Nick Tune, Chapter "18 Domain Events :: Internal vs External Events"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="figure align-center" id="id114"&gt;
&lt;a class="reference internal image-reference" href="../../../../../../_images/pppddd-18.2.png"&gt;&lt;img alt="FIGURE pppddd-18-2: Flow of internal and external events in a typical business use case. The image source is &amp;quot;Patterns, Principles, and Practices of Domain-Driven Design&amp;quot; by Scott Millett, Nick Tune" src="../../../../../../_images/pppddd-18.2.png" style="width: 70%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;FIGURE pppddd-18-2: Flow of internal and external events in a typical business use case. The image source is "Patterns, Principles, and Practices of Domain-Driven Design" by Scott Millett, Nick Tune&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Разделяют Domain Events на внутренние и внешние и специалисты .NET.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Basically, by differentiating between Domain Events and Integration Events you can solve the issue of dealing with transactions since domain events are always scoped within a transaction but integration events (using an EventBus.Publish()) are only published to the outside world if the transaction was committed successfully.
By doing this you can be sure that other domain-models, microservices and external systems do not react on something that in fact has rolled back and does not exist anymore.&lt;/p&gt;
&lt;p&gt;- "Domain Events vs. Integration Events in Domain-Driven Design and microservices architectures" &lt;a class="footnote-reference brackets" href="#fncdltdevie" id="id57"&gt;23&lt;/a&gt; by Cesar De la Torre, Principal Program Manager, .NET&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Domain events versus integration events&lt;/p&gt;
&lt;p&gt;Semantically, domain and integration events are the same thing: notifications about something that just happened.
However, their implementation must be different.
Domain events are just messages pushed to a domain event dispatcher, which could be implemented as an in-memory mediator based on an IoC container or any other method.&lt;/p&gt;
&lt;p&gt;On the other hand, the purpose of integration events is to propagate committed transactions and updates to additional subsystems, whether they are other microservices, Bounded Contexts or even external applications.
Hence, they should occur only if the entity is successfully persisted, otherwise it's as if the entire operation never happened.&lt;/p&gt;
&lt;p&gt;As mentioned before, integration events must be based on asynchronous communication between multiple microservices (other Bounded Contexts) or even external systems/applications.&lt;/p&gt;
&lt;p&gt;Thus, the event bus interface needs some infrastructure that allows inter-process and distributed communication between potentially remote services.
It can be based on a commercial service bus, queues, a shared database used as a mailbox, or any other distributed and ideally push based messaging system.&lt;/p&gt;
&lt;p&gt;- ".NET Microservices: Architecture for Containerized .NET Applications" &lt;a class="footnote-reference brackets" href="#fnnetms" id="id58"&gt;7&lt;/a&gt; by Cesar de la Torre, Bill Wagner, Mike Rousos, Chapter "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#domain-events-versus-integration-events"&gt;Domain events: design and implementation :: Domain events versus integration events&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Domain events can generate integration events to be published outside of the microservice boundaries&lt;/p&gt;
&lt;p&gt;Finally, it's important to mention that you might sometimes want to propagate events across multiple microservices.
That propagation is an integration event, and it could be published through an event bus from any specific domain event handler.&lt;/p&gt;
&lt;p&gt;- ".NET Microservices: Architecture for Containerized .NET Applications" &lt;a class="footnote-reference brackets" href="#fnnetms" id="id59"&gt;7&lt;/a&gt; by Cesar de la Torre, Bill Wagner, Mike Rousos, Chapter "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#domain-events-can-generate-integration-events-to-be-published-outside-of-the-microservice-boundaries"&gt;Domain events: design and implementation :: Implement domain events :: Domain events can generate integration events to be published outside of the microservice boundaries&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Model information about activity in the domain as a series of discrete events. Represent each event as a domain object. These are distinct from system events that reflect activity within the software itself, although often a system event is associated with a domain event, either as part of a response to the domain event or as a way of carrying information about the domain event into the system.&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design Reference" &lt;a class="footnote-reference brackets" href="#fndddr" id="id60"&gt;2&lt;/a&gt; by Eric Evans, Chapter "Domain Events"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;More importantly, the outside API is tightly coupled to the internal structure of the Bounded Context. Changing the internals would force an API change.&lt;/p&gt;
&lt;p&gt;&amp;lt;..&amp;gt;&lt;/p&gt;
&lt;p&gt;Set up separate messaging channels for inside the Bounded Context and outside.&lt;/p&gt;
&lt;p&gt;&amp;lt;..&amp;gt;&lt;/p&gt;
&lt;p&gt;In general, my feeling is that the problem seldom occurs when the Domain Events have been chosen carefully to reflect the business domain, using Ubiquitous Language, and at the right granularity.
These events then tend to become stable very quickly during development, and rarely need to be altered.
When there are significant changes in the domain, the events may need to change, but in these cases you'll need an API change anyway.&lt;/p&gt;
&lt;p&gt;That said, it's a universally useful heuristic in software design to keep everything as closed off as possible, and only open up things where there's a good case for it.&lt;/p&gt;
&lt;p&gt;- "Patterns for Decoupling in Distributed Systems: Explicit Public Events" &lt;a class="footnote-reference brackets" href="#fnmvpe" id="id61"&gt;25&lt;/a&gt; by Mathias Verraes&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="one-phase-vs-two-phase"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id134"&gt;One-phase vs Two-phase&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ответ на вопрос о разделении доставки Domain Events во многом зависит от того, разделять ли Domain Events на внутренние и внешние?&lt;/p&gt;
&lt;p&gt;Хотя у Vaughn Vernon такое разделение не совсем очевидное, он разделяет реализацию доставки  для подписчиков внутри Bounded Context за его пределами.&lt;/p&gt;
&lt;div class="figure align-center" id="id115"&gt;
&lt;a class="reference internal image-reference" href="../../../../../../_images/iddd-8.1.png"&gt;&lt;img alt="Figure 8.1. Aggregates create Events and publish them. Subscribers may store Events and then forward them to remote subscribers, or just forward them without storing. Immediate forwarding requires XA (two-phase commit) unless messaging middleware shares the model's data store. The image source is &amp;quot;Implementing Domain-Driven Design&amp;quot; by Vaughn Vernon" src="../../../../../../_images/iddd-8.1.png" style="width: 70%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Figure 8.1. Aggregates create Events and publish them.
&lt;strong&gt;Subscribers may store Events and then forward them to remote subscribers, or just forward them without storing.&lt;/strong&gt;
Immediate forwarding requires XA (two-phase commit) unless messaging middleware shares the model's data store.
The image source is "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id62"&gt;3&lt;/a&gt; by Vaughn Vernon&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Forwarding the Event via a messaging infrastructure would allow asynchronous delivery to out-of-band subscribers.
Each of those asynchronous subscribers could arrange to modify an additional Aggregate instance in one or more separate transactions.
The additional Aggregate instances could be in the same Bounded Context or in others.
Publishing the Event outward to any number Bounded Contexts of other Subdomains (2) emphasizes the word Domain in the term Domain Event.
In other words, Events are a domain-wide concept, not just a concept in a single Bounded Context.
The contract of Event publishing should have the potential to be at least as broad as the enterprise, or even broader.
Yet, wide broadcast does not forbid delivery of Events by consumers in the same Bounded Context.
Refer back to Figure 8.1.&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id63"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "8. Domain Events :: Publishing Events from the Domain Model :: Subscribers"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;В качестве первой ступени доставки Domain Events внутренним подписчикам, Vaughn Vernon предлагает использовать обычные GOF-паттерны (Mediator, Observer), которые вызывают подписчиков в том же самом потоке и в той же самой транзакции.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Publishing Events from the Domain Model&lt;/p&gt;
&lt;p&gt;Avoid exposing the domain model to any kind of middleware messaging infrastructure.
Those kinds of components live only in the infrastructure.
And while the domain model might at times use such infrastructure indirectly, it would never explicitly couple to it. We'll use an approach that completely avoids the use of infrastructure.&lt;/p&gt;
&lt;p&gt;One of the simplest and most effective ways to publish Domain Events without coupling to components outside the domain model is to create a lightweight Observer [Gamma et al.].
For the sake of naming I use Publish-Subscribe, which is acknowledged by [Gamma et al.] as another name for the same pattern.
The examples in that pattern and my use of it are lightweight because there is no network involved in subscribing to Events and publishing them.
All registered subscribers execute in the same process space with the publisher and run on the same thread.
When an Event is published, each subscriber is notified synchronously, one by one.
This also implies that &lt;strong&gt;all subscribers are running within the same transaction&lt;/strong&gt;, perhaps controlled by an Application Service that is the direct client of the domain model.&lt;/p&gt;
&lt;p&gt;Considering the two halves of Publish-Subscribe separately helps to explain them in a DDD context.&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id64"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "8. Domain Events :: Publishing Events from the Domain Model"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;What components register subscribers to Domain Events?
Generally speaking, Application Services (14), and sometimes Domain Services, will.
&lt;strong&gt;The subscriber may be any component that is running on the same thread as the Aggregate that publishes the Event&lt;/strong&gt;, and that can subscribe prior to the Event being published.
This means that &lt;strong&gt;the subscriber is registered in the method execution path that uses the domain model&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id65"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "8. Domain Events :: Publishing Events from the Domain Model :: Subscribers"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;При этом, Vaughn Vernon делает предостережение относительно первой ступени доставки, т.е. внутренних подписчиков, впрочем, это предостережение зависит от уже рассмотренного ранее вопроса Eventual Consistency vs Strong (Transactional) Consistency.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Remember, the Application Service controls the transaction.
Don't use the Event notification to modify a second Aggregate instance.
That breaks a rule of thumb to modify one Aggregate instance per transaction.&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id66"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "8. Domain Events :: Publishing Events from the Domain Model :: Subscribers"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;В другом месте Vaughn Vernon приводит небольшой пример, по которому создается иллюзия, что якобы асинхронные подписчики уведомляются непосредственно (однофазно):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;There is a practical way to support eventual consistency in a DDD model.
An Aggregate command method publishes a Domain Event that is in time delivered to one or more asynchronous subscribers:&lt;/p&gt;
&lt;p&gt;Each of these subscribers then retrieves a different yet corresponding Aggregate instance and executes its behavior based on it.
Each of the subscribers executes in a separate transaction, obeying the rule of Aggregates to modify just one instance per transaction.&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id67"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "10 Aggregates :: Rule: Use Eventual Consistency Outside the Boundary"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Однако, если найти этот пример в коде, то эта иллюзия рассеивается.
См. &lt;a class="reference external" href="https://github.com/VaughnVernon/IDDD_Samples_NET/blob/90fcc52d9c1af29640ec2a8a3e0e7c692f3e6663/iddd_agilepm/Domain.Model/Products/BacklogItems/BacklogItem.cs#L201"&gt;здесь&lt;/a&gt; и &lt;a class="reference external" href="https://github.com/VaughnVernon/IDDD_Samples_NET/blob/90fcc52d9c1af29640ec2a8a3e0e7c692f3e6663/iddd_common/Domain.Model/DomainEventPublisher.cs#L77"&gt;здесь&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kamil Grzybek вводит явное разделение механизма доставки на две ступени, первая - для внутренних Domain Events, вторая - для внешних:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Domain Events Notifications&lt;/p&gt;
&lt;p&gt;There is no such thing as domain events notifications in DDD terms.
I gave that name because I think it fits best – it is notification that domain event was published.&lt;/p&gt;
&lt;p&gt;Mechanism is pretty simple.
If I want to inform my application that domain event was published I create notification class for it and as many handlers for this notification as I want.
I always publish my notifications after transaction is committed.
The complete process looks like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Create database transaction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get aggregate(s).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Invoke aggregate method.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add domain events to Events collections.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Publish domain events and handle them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save changes to DB and commit transaction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Publish domain events notifications and handle them.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://www.kamilgrzybek.com/design/how-to-publish-and-handle-domain-events/"&gt;How to publish and handle Domain Events&lt;/a&gt;" &lt;a class="footnote-reference brackets" href="#fnkgde1" id="id68"&gt;15&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;А вот Udi Dahan в своей статье "Domain Events – Salvation" &lt;a class="footnote-reference brackets" href="#fnudde3" id="id69"&gt;22&lt;/a&gt; предложил использовать единый Mediator как для внутренних синхронных подписчиков, вызываемых в той же транзакции, так и для асинхронных подписчиков.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id70"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id135"&gt;Кто может издавать Domain Event?&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;One more point about what can cause a Domain Event is noteworthy.
Although often it is a user-based command emitted by the user interface that causes an event to occur, sometimes Domain Events
can be caused by a different source.
This might be from a timer that expires, such as at the end of the business day or the end of a week, month, or year.
In cases like this it won't be a command that causes the event, because the ending of some time period is a matter of fact.
You can't reject the fact that some time frame has expired, and if the business cares about this fact, the time expiration is modeled as a Domain Event, and not as a command.&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design Distilled" &lt;a class="footnote-reference brackets" href="#fndddd" id="id71"&gt;4&lt;/a&gt; by Vaughn Vernon, Chapter "6. Tactical Design with Domain Events  :: Designing, Implementing, and Using Domain Events"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Sometimes Events are designed to be created by direct request from clients.
This is done in response to some occurrence that is not the direct result of executing behavior on an instance of an Aggregate in the model.
Possibly a user of the system initiates some action that is considered an Event in its own right.
When that happens, the Event can be modeled as an Aggregate and retained in its own Repository.
Since it represents some past occurrence, its Repository would not permit its removal.
When Events are modeled in this way, like Aggregates they become part of the model's structure.
Thus, they are not just a record of some past occurrence, although they are that also.&lt;/p&gt;
&lt;p&gt;-"Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id72"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "Chapter 8. Domain Events :: Modeling Events :: With Aggregate Characteristics"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id73"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id136"&gt;Может ли Domain Event отменить свою причину?&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Domain events are ordinarily immutable, as they are &lt;strong&gt;a record of something in the past&lt;/strong&gt;.
In addition to a description of the event, a domain event typically contains a timestamp for the time the event occurred and the identity of entities involved in the event.&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design Reference" &lt;a class="footnote-reference brackets" href="#fndddr" id="id74"&gt;2&lt;/a&gt; by Eric Evans, Chapter "Domain events"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;A command is different from a Domain Event in that a command can be rejected as inappropriate in some cases, such as due to supply and availability of some resources (product, funds, etc.), or another kind of business-level validation.
&lt;strong&gt;So, a command may be rejected, but a Domain Event is a matter of history and cannot logically be denied.&lt;/strong&gt;
Even so, in response to a time-based Domain Event it could be that the application will need to generate one or more commands in order to ask the application to carry out some set of actions.&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design Distilled" &lt;a class="footnote-reference brackets" href="#fndddd" id="id75"&gt;4&lt;/a&gt; by Vaughn Vernon, Chapter "6. Tactical Design with Domain Events  :: Designing, Implementing, and Using Domain Events"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Your Domain Event type names should be &lt;strong&gt;a statement of a past occurrence&lt;/strong&gt;, that is, a verb in the past tense.
Here are some examples from the Agile Project Management Context : ProductCreated, for instance, states that a Scrum product was created at some past time.
Other Domain Events are ReleaseScheduled, SprintScheduled, BacklogItemPlanned, and BacklogItemCommitted.
Each of the names clearly and concisely states what happened in your Core Domain.&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design Distilled" &lt;a class="footnote-reference brackets" href="#fndddd" id="id76"&gt;4&lt;/a&gt; by Vaughn Vernon, Chapter "6. Tactical Design with Domain Events  :: Designing, Implementing, and Using Domain Events"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;As noted earlier, an important characteristic of events is that since an event is something that happened in the past, it should not change.
Therefore, it must be an immutable class. You can see in the previous code that the properties are read-only.
There's no way to update the object, you can only set values when you create it.&lt;/p&gt;
&lt;p&gt;- ".NET Microservices: Architecture for Containerized .NET Applications" &lt;a class="footnote-reference brackets" href="#fnnetms" id="id77"&gt;7&lt;/a&gt; by Cesar de la Torre, Bill Wagner, Mike Rousos, Chapter "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#implement-domain-events"&gt;Domain events: design and implementation :: Implement domain events&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Таким образом, Событие не может изменить прошлого, хотя и может &lt;a class="reference external" href="https://microservices.io/patterns/data/saga.html"&gt;инициировать компенсационную транзакцию&lt;/a&gt; и изменить будущее.
Если вы когда-нибудь работали с Emacs, то заметили, что его команда Undo &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Undo.html"&gt;не возвращает в прошлое&lt;/a&gt;, а компенсирует ранее выполненные команды.
По этой причине в Emacs отсутствует Redo.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Starting from that moment, the entire sequence of undo commands that you have just performed are themselves placed into the undo record.
Therefore, to re-apply changes you have undone, type C-f or any other command that harmlessly breaks the sequence of undoing; then type C-/ one or more times to undo some of the undo commands.&lt;/p&gt;
&lt;p&gt;- &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Undo.html"&gt;The Emacs Editor&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Однако, рассмотрение &lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/compensating-transaction"&gt;компенсационных транзакций&lt;/a&gt; уже выходит за рамки данного поста.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Eventual consistency can lead to undesirable scenarios.
For example, if a payment has been rejected, you can't just roll back the transaction and not create the order (as many non‐eventually consistent systems would); the order was already created as part of a previous transaction in a different component and currently lives in that component's database.
What you can do, though, is roll forward into a new state.
You'd probably tell the customer the order could not be completed because payment failed.
Ideally you would tell her immediately when she tries to place an order.
However, you have to remember that you're trying to build a scalable fault‐tolerant solution and you need to make sacrifices.
Upsetting the few customers who cannot successfully place orders so that everybody else gets a superior user experience is often an acceptable trade‐off.
When you are in an inconsistent state, you need to roll forward into a new state that represents the wishes of the business or the real‐world domain processes you are modeling.&lt;/p&gt;
&lt;p&gt;- "Patterns, Principles, and Practices of Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fnpppddd" id="id78"&gt;6&lt;/a&gt; by Scott Millett, Nick Tune, Chapter "12 Integrating via Messaging :: Building an E‐Commerce Application with NServiceBus :: Eventual Consistency in Practice :: Dealing with Inconsistency"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id79"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id137"&gt;Решение - это баланс стоимости и обретаемой выгоды&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Любое решение - это баланс выгод и затрат на его реализацию.
Решение не должно базироваться на &lt;a class="reference external" href="https://youtu.be/LDW0QWie21s?t=1363"&gt;"религиозном" догматизме&lt;/a&gt;, основываясь на бездумной вере только в то, что кто-то так сказал, не понимая при этом причин и следствий.
Нужно понимать причину решения, решаемую им проблему, и применять его сообразно стоящими перед конкретным проектом проблемами.&lt;/p&gt;
&lt;div class="section" id="cqrs"&gt;
&lt;span id="emacsway-de-cqrs-command-and-result"/&gt;&lt;h3&gt;&lt;a class="toc-backref" href="#id138"&gt;Может ли CQRS-команда возвращать результат?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Хорошим примером, демонстрирующим архитектурную гибкость мышления, является ответ Jimmy Bogard по поводу того, может ли Команда в CQRS возвращать результат?&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;It might seem rather strange that commands always have a result, but it's much, much easier to deal with side effects of commands through return parameters than through some other means (global registry, static field, re-querying some object, collecting parameter, etc.). &lt;strong&gt;For commands that create an item, I usually want to redirect to a screen showing that item, very easily accomplished when I can get the created item and as for its ID.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a bit controversial, but don't frankly care, as it's the simplest thing that could possibly work. If I want to have a command that returns Void, I could steal a page from F# and have a Command base class that returns a Unit type:&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2013/12/19/put-your-controllers-on-a-diet-posts-and-commands/"&gt;Put your controllers on a diet: POSTs and commands&lt;/a&gt;" by Jimmy Bogard&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Причины такого решения он раскрывает в другой своей статье:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Myth #2 – CQRS requires an eventual consistent read store&lt;/p&gt;
&lt;p&gt;No, it does not. You can make your read store immediately consistent. That is, your read store can be updated when your command side succeeds (in the same transaction).&lt;/p&gt;
&lt;p&gt;For many legacy/existing apps, transitioning to eventually consistent read stores will either force you to go through bogus hoops of mimicking synchronous calls. Users will bang down on your door with pitchforks and torches if you try and transition to an asynchronous model if you don't change their business process first.&lt;/p&gt;
&lt;p&gt;Instead, you can start with immediate consistency and transition where and when it's needed. Unless a user expects a confirmation page, making every command page have a series of confirmations of "your request was received" is going to annoy the snot out of your users.&lt;/p&gt;
&lt;p&gt;Myth #3 – CQRS requires a bus/queues/asynchronous messaging&lt;/p&gt;
&lt;p&gt;See above myth. &lt;strong&gt;Nothing about CQRS says "thou shalt use NServiceBus". It's just not there. You're merely separating infrastructure between handling commands and queries, but the how is quite varied. Don't start with a bus until you prove you need eventual consistency.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Consistency models are a business decision because it directly impacts user experience. An eventually consistent model requires a different user experience than an immediate one, and this is not something you can just "slip in" to your users, or try to emulate. If you're attempting to emulate immediate consistency in an eventually consistent model, you're doing something wrong.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2012/08/22/busting-some-cqrs-myths/"&gt;Busting some CQRS myths&lt;/a&gt;" by Jimmy Bogard&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Что он также подтверждает своим комментарием к этой статье:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Scaling and CQRS are orthogonal, it's highly contextual and certainly doesn't require async.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2012/08/22/busting-some-cqrs-myths/#comment-3422377189"&gt;Busting some CQRS myths&lt;/a&gt;" by Jimmy Bogard&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Итак, ответ прост - если вы не используете асинхронное исполнение Команды посредством инфраструктуры (Command Bus), то ничто не препятствует вам получить идентификатор вновь созданной записи БД в возвращаемом командой результате, и реализацию можно существенно упростить.&lt;/p&gt;
&lt;p&gt;Вы можете удивиться, какая связь между Командами CQRS и Domain Events?
А связь заключается в том, что и в первом, и во втором случае, отступление от принципа приводит к упрощению реализации, но к ухудшению возможностей масштабирования.
И в том, и в другом случае, решением является баланс между простотой реализации и потребностью в масштабировании.&lt;/p&gt;
&lt;p&gt;Впрочем, вопрос относительно того, должна ли Команда CQRS возвращать результат, и не противоречит ли это CQS принципу Bertrand Meyer, заслуживает на "&lt;a class="reference internal" href="../../cqrs/cqrs-command-and-result.html"&gt;&lt;span class="doc"&gt;отдельное исследование&lt;/span&gt;&lt;/a&gt;".
Как известно, термин CQRS ввел Greg Young, разделив CQS на два отдельных класса.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Starting with CQRS, CQRS is simply the creation of two objects where there was previously only one.
The separation occurs based upon whether the methods are a command or a query (the same definition that is used by Meyer in Command and Query Separation, a command is any method that mutates state and a query is any method that returns a value).&lt;/p&gt;
&lt;p&gt;- "CQRS, Task Based UIs, Event Sourcing agh!" &lt;a class="footnote-reference brackets" href="#fngycqrs" id="id80"&gt;26&lt;/a&gt; by Greg Young&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Забегая наперед, скажу, что не противоречит, при соблюдении определенных условий.&lt;/p&gt;
&lt;p&gt;Во-первых, в основе CQS лежит принцип функциональной чистоты:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Command-Query Separation principle - Functions should not produce abstract side effects.&lt;/p&gt;
&lt;p&gt;- "Object-Oriented Software Construction" &lt;a class="footnote-reference brackets" href="#fnoosc" id="id81"&gt;9&lt;/a&gt; 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS :: Objects as machines"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Во-вторых, кроме функций-команд и функций-запросов, Bertrand Meyer вводит еще и функции-конструкторы. И тут кроется интересное:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;From a mathematical perspective we may pretend that all of the objects of interest, for all times past, present and future, are already inscribed in the Great Book of Objects; &lt;strong&gt;a creation instruction is just a way to obtain one of them, but it does not by itself change anything in the environment&lt;/strong&gt;. It is common, and legitimate, for a function to create, initialize and return such an object.
&lt;strong&gt;These observations assume that in the second form the creation procedure make does not produce side effects on any object other than the one being created.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;- "Object-Oriented Software Construction" &lt;a class="footnote-reference brackets" href="#fnoosc" id="id82"&gt;9&lt;/a&gt; 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS :: Functions that create objects"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Этот пример наглядно демонстрирует нам, почему важно всегда изучать мнение первоисточника.
Сравните это с тем, какие выводы можно сделать на основе утверждений Vaughn Vernon и Википедии:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;This principle, devised by Bertrand Meyer, asserts the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;Every method should be either a command that performs an action, or a query that returns data to the caller, but not both. In other words, asking a question should not change the answer.&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;More formally, methods should return a value only if they are referentially transparent and hence possess no side effects. [Wikipedia, CQS]&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;At an object level this means:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;If a method modifies the state of the object, it is a command, and its method must not return a value. In Java and C# the method must be declared void .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If a method returns some value, it is a query&lt;/strong&gt;, and it must not directly or indirectly cause the modification of the state of the object. In Java and C# the method must be declared with the type of the value it returns.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id83"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "4. Architecture :: Command-Query Responsibility Segregation, or CQRS"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Или из  CQRS Journey:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;A query returns data and does not alter the state of the object; a command changes the state of an object but does not return any data.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/msp-n-p/jj591573(v=pandp.10)#what-is-cqrs"&gt;CQRS Journey :: Reference 2: Introducing the Command Query Responsibility Segregation Pattern :: What is CQRS?&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Но как быть, если команда исполняется асинхронно, используя инфраструктуру  (Command Bus), и мы должны вернуть результат команды в исполнение требований &lt;a class="reference external" href="https://tools.ietf.org/html/rfc7231#page-25"&gt;RFC-7231&lt;/a&gt;  для HTTP-method POST REST API:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;the origin server SHOULD send a 201 (Created) response containing a Location header field that provides an identifier for the primary resource created (Section 7.1.2) and a representation that describes the status of the request while referring to the new resource(s).&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="https://tools.ietf.org/html/rfc7231#section-4.3.3"&gt;Section 4.3.3. POST of RFC-7231&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Есть два варианта (помимо того, что можно просто запросить идентификатор у сервера предварительно).&lt;/p&gt;
&lt;p&gt;Первый предлагает Udi Dahan:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;If the data is needed by the client as soon as it is submitted, it is there – on the client that submitted it. No need to poll the query side. The only thing that might not have been there is an ID from the database – which is easily solved with client-generated GUIDs instead of database-generated IDs.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="http://udidahan.com/2009/12/09/clarified-cqrs/#comment-5118"&gt;Clarified CQRS&lt;/a&gt;" comment 68 of Udi Dahan&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Мы просто генерируем идентификатор на стороне клиента (используя &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUID&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hi/Lo_algorithm"&gt;Hi/Lo algorithm&lt;/a&gt; и т.п.), а затем применяем &lt;a class="reference external" href="https://tools.ietf.org/html/rfc7231#section-4.3.4"&gt;PUT Request Method&lt;/a&gt; для создания объекта.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The PUT method requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload. &amp;lt;...&amp;gt; If the target resource does not have a current representation and the PUT successfully creates one, then the origin server MUST inform the user agent by sending a 201 (Created) response.&lt;/p&gt;
&lt;p&gt;- "&lt;a class="reference external" href="https://tools.ietf.org/html/rfc7231#section-4.3.4"&gt;Section 4.3.4. PUT of RFC-7231&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Идею второго варианта выразил самим Bertrand Meyer, в виде введения концепции буфера:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;buffer — the concurrent equivalent of a first-in, first out queue.&lt;/p&gt;
&lt;p&gt;- "Object-Oriented Software Construction" &lt;a class="footnote-reference brackets" href="#fnoosc" id="id84"&gt;9&lt;/a&gt; 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS :: Objections"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;И приводит пример:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class="n"&gt;next_element&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;
&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;With the notation of this chapter, it is easy to obtain exclusive access without sacrificing the Command-Query Separation principle: simply enclose the two instructions above, with buffer replaced by b, in a procedure of formal argument b, and call that procedure with the attribute buffer as argument.&lt;/p&gt;
&lt;p&gt;- "Object-Oriented Software Construction" &lt;a class="footnote-reference brackets" href="#fnoosc" id="id85"&gt;9&lt;/a&gt; 2nd edition by Bertrand Meyer, chapter "30.12 DISCUSSION :: Support for command-query separation"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Если транслировать этот же принцип на REST-API, то мы получим паттерн "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/async-request-reply"&gt;Asynchronous Request-Reply pattern&lt;/a&gt;", использующий &lt;a class="reference external" href="https://tools.ietf.org/html/rfc7231#section-6.3.3"&gt;202 Response Status Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;У Bertrand Meyer в главе "23.1 SIDE EFFECTS IN FUNCTIONS :: Pseudo-random number generators: a design exercise" книги "Object-Oriented Software Construction" &lt;a class="footnote-reference brackets" href="#fnoosc" id="id86"&gt;9&lt;/a&gt; 2nd edition, есть пример с генератором случайных чисел, который решает задачу, аналогичную задаче с получением идентификатора ресурса.
Цитировать не буду, ибо много текста, если интересно, можно посмотреть в книге.
На примере с генератором случайных чисел хорошо видно, какую критическую роль играет правильное именование и правильное моделирование процессов предметной области.
И как легко можно создать кривое решение, если не иметь ясного понимания этих процессов, или если использовать недостаточно ясное именование.&lt;/p&gt;
&lt;p&gt;Также он разделяет абстрактное состояние от конкретного состояния, и приводит пример, в значительной мере похожий на добавление нового ресурса через REST-API:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;What this means for us is that a function that modifies a concrete object is harmless if the result of this modification still represents the same abstract object — yields the same a value.
For example assume in a function on stacks contains the operation&lt;/p&gt;
&lt;p&gt;representation.put (some_value, count + 1)&lt;/p&gt;
&lt;p&gt;(with the guarantee that the array's capacity is at least count + 1).
&lt;strong&gt;This side effect changes a value above the stack-significant section of the array; it can do no ill.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;- "Object-Oriented Software Construction" &lt;a class="footnote-reference brackets" href="#fnoosc" id="id87"&gt;9&lt;/a&gt; 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS :: Abstract state, concrete state"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Как видно, внимательное изучение первоисточника дает глубокое понимание целей, причин, спектра решаемых проблем, достоинств и недостатков, и, как следствие, приводит к более гибким и менее догматичным архитектурным решениям.&lt;/p&gt;
&lt;p&gt;Как результат, в одном из лучших демонстрационных приложений, Команда возвращает результат, смотрите &lt;a class="reference external" href="https://github.com/dotnet-architecture/eShopOnContainers/blob/b1021c88d55d96c247eab75bde650ab4b194f706/src/Services/Ordering/Ordering.API/Controllers/OrdersController.cs#L151"&gt;здесь&lt;/a&gt; и &lt;a class="reference external" href="https://github.com/dotnet-architecture/eShopOnContainers/blob/b1021c88d55d96c247eab75bde650ab4b194f706/src/Services/Ordering/Ordering.API/Application/Commands/CreateOrderDraftCommandHandler.cs#L40"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="atomicity-and-resiliency-of-integration-events"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id139"&gt;Atomicity and Resiliency of Integration Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Если отправить Integration Event до коммита транзакции базы данных, то другой процесс не увидит изменений.
К тому же, может произойти откат транзакции, и согласованность данных будет утрачена.
А если после коммита, то существует вероятность, что процесс может аварийно завершиться, и сообщение так и не будет отправлено, что приведет к утрате согласованности данных.&lt;/p&gt;
&lt;p&gt;Подробно эта проблема рассмотрена в главе "&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/multi-container-microservice-net-applications/subscribe-events#designing-atomicity-and-resiliency-when-publishing-to-the-event-bus"&gt;Subscribing to events :: Publishing events through the event bus :: Designing atomicity and resiliency when publishing to the event bus&lt;/a&gt;" книги ".NET Microservices: Architecture for Containerized .NET Applications" &lt;a class="footnote-reference brackets" href="#fnnetms" id="id88"&gt;7&lt;/a&gt; by Cesar de la Torre, Bill Wagner, Mike Rousos.&lt;/p&gt;
&lt;p&gt;Chris Richardson называет эту проблему &lt;a class="reference external" href="https://microservices.io/patterns/#transactional-messaging"&gt;Transactional messaging&lt;/a&gt; рассматривает ее в главе "&lt;a class="reference external" href="https://livebook.manning.com/book/microservices-patterns/chapter-3/section-3-3-7?origin=product-toc"&gt;3.3.7 Transactional messaging&lt;/a&gt;" книги "Microservices Patterns: With examples in Java" &lt;a class="footnote-reference brackets" href="#fnmsp" id="id89"&gt;14&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vaughn Vernon посвящает этой проблеме главу "8 Domain Events :: Spreading the News to Remote Bounded Contexts :: Messaging Infrastructure Consistency" книги "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id90"&gt;3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Очень глубокое понимание этой проблемы и способов ее решения дается в главе "10.Messaging Endpoints :: Transactional Client" книги "Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions" &lt;a class="footnote-reference brackets" href="#fneip" id="id91"&gt;11&lt;/a&gt; by Gregor Hohpe, Bobby Woolf.&lt;/p&gt;
&lt;p&gt;А также эта тема затрагивается в главе "Chapter 9. Message Endpoints :: Transactional Client/Actor" книги "Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka" &lt;a class="footnote-reference brackets" href="#fnrmp" id="id92"&gt;5&lt;/a&gt; by Vaughn Vernon.&lt;/p&gt;
&lt;p&gt;Существует три основных способа решения этой проблемы:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing"&gt;Event Sourcing pattern&lt;/a&gt; (сюда же относится &lt;a class="reference external" href="https://github.com/obsidiandynamics/goharvest/wiki/Comparison-of-messaging-patterns#front-door-queue"&gt;Front-Door Queue&lt;/a&gt; pattern и Transactional Consumer &lt;a class="footnote-reference brackets" href="#fneip" id="id93"&gt;11&lt;/a&gt; vs Transactional Sender)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.scoop.it/t/sql-server-transaction-log-mining"&gt;Transaction log mining&lt;/a&gt; (и &lt;a class="reference external" href="https://microservices.io/patterns/data/transaction-log-tailing.html"&gt;еще&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.kamilgrzybek.com/design/the-outbox-pattern/"&gt;Outbox pattern&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ссылки по теме:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://dzone.com/articles/event-driven-data-management-for-microservices-1"&gt;Event-Driven Data Management for Microservices&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/ThreeDotsLabs/watermill/tree/master/_examples/real-world-examples/transactional-events"&gt;Готовая реализация паттерна outbox на Golang с примером использования (см. README)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-events"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id140"&gt;Проблема сохранения очередности Integration Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Подписчики не всегда получают Integration Events в той же последовательности, в которой они были отправлены, по ряду причин.
Одно из решений этой проблемы заключается в том, что, если получатель обнаруживает, что сообщение не соответствует ожидаемому порядку, то он просто не забирает его из очереди.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Note that just saving the Domain Event in its causal order doesn't guarantee that it will arrive at other distributed nodes in the same order.
Thus, it is also the responsibility of the consuming Bounded Context to recognize proper causality.
It might be the Domain Event type itself that can indicate causality, or it may be metadata associated with the Domain Event, such as a sequence or causal identifier.
The &lt;strong&gt;sequence&lt;/strong&gt; or &lt;strong&gt;causal identifier&lt;/strong&gt; would indicate &lt;strong&gt;what caused this Domain Event&lt;/strong&gt;, and &lt;strong&gt;if the cause was not yet seen, the consumer must wait to apply the newly arrived event until its cause arrives&lt;/strong&gt;.
In some cases it is possible to ignore latent Domain Events that have already been superseded by the actions associated with a later one; in this case causality has a dismissible impact.&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design Distilled" &lt;a class="footnote-reference brackets" href="#fndddd" id="id94"&gt;4&lt;/a&gt; by Vaughn Vernon, Chapter "6. Tactical Design with Domain Events:: Designing, Implementing, and Using Domain Events"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;В книге "Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka" &lt;a class="footnote-reference brackets" href="#fnrmp" id="id95"&gt;5&lt;/a&gt; by Vaughn Vernon также говорится о том, что Actor должен сам решать, принимать ли ему сообщение:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Actors must be prepared to accept and reject messages based on their current state, which is reflected by the order in which previous messages were received.
Sometimes a latent message could be accepted even if it is not perfect timing, but the actor's reaction to the latent message may have to carefully take into account its current state beforehand.
This may be dealt with more gracefully by using the actors become() capabilities.&lt;/p&gt;
&lt;p&gt;- "Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka" &lt;a class="footnote-reference brackets" href="#fnrmp" id="id96"&gt;5&lt;/a&gt; by Vaughn Vernon, Chapter "5. Messaging Channels :: Point-to-Point Channel"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Этой же проблеме посвящена и глава "Chapter 7 Message Routing :: Resequencer" &lt;a class="footnote-reference brackets" href="#fnrmp" id="id97"&gt;5&lt;/a&gt; той же книги.&lt;/p&gt;
&lt;p&gt;Pattern &lt;a class="reference external" href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/Resequencer.html"&gt;Resequencer&lt;/a&gt; описан также и в главе "7.Message Routing :: Resequencer" книги "Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions" &lt;a class="footnote-reference brackets" href="#fneip" id="id98"&gt;11&lt;/a&gt; by Gregor Hohpe, Bobby Woolf.&lt;/p&gt;
&lt;p&gt;Существует open source integration framework &lt;a class="reference external" href="https://camel.apache.org/"&gt;Camel&lt;/a&gt;, который предоставляет &lt;a class="reference external" href="https://camel.apache.org/components/latest/eips/resequence-eip.html"&gt;готовую из коробки реализацию паттерна Resequencer&lt;/a&gt;.
Он легко интегрируется с различными системами обмена сообщениями, например, &lt;a class="reference external" href="https://camel.apache.org/components/latest/nats-component.html"&gt;с Nats&lt;/a&gt; (&lt;a class="reference external" href="https://nats.io/blog/apache-camel-nats-connector/"&gt;подробнее&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;В "CQRS Journey" &lt;a class="footnote-reference brackets" href="#fncqrsj" id="id99"&gt;8&lt;/a&gt; предлагается два варианта решения:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The first option is to &lt;strong&gt;use message sessions&lt;/strong&gt;, a feature of the Azure Service Bus. If you use message sessions, this guarantees that messages within a session are delivered in the same order that they were sent.&lt;/p&gt;
&lt;p&gt;The second alternative is to modify the handlers within the application to detect out-of-order messages through the use of sequence numbers or timestamps added to the messages when they are sent.
&lt;strong&gt;If the receiving handler detects an out-of-order message, it rejects the message and puts it back onto the queue or topic to be processed later&lt;/strong&gt;, after it has processed the messages that were sent before the rejected message.&lt;/p&gt;
&lt;p&gt;- "CQRS Journey" &lt;a class="footnote-reference brackets" href="#fncqrsj" id="id100"&gt;8&lt;/a&gt; by Dominic Betts, Julián Domínguez, Grigori Melnik, Fernando Simonazzi, Mani Subramanian, Chapter "&lt;a class="reference external" href="https://docs.microsoft.com/ru-ru/previous-versions/msp-n-p/jj591565(v=pandp.10)#message-ordering"&gt;Journey 6: Versioning Our System :: Message ordering&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Проблема сохранения очередности сообщений в условиях конкурирующих подписчиков рассматривается и в главе "&lt;a class="reference external" href="https://livebook.manning.com/book/microservices-patterns/chapter-3/section-3-3-5?origin=product-toc"&gt;3.3.5 Competing receivers and message ordering&lt;/a&gt;" книги "Microservices Patterns: With examples in Java" &lt;a class="footnote-reference brackets" href="#fnmsp" id="id101"&gt;14&lt;/a&gt; by Chris Richardson, где для решения проблемы предлагается использовать партиционирование каналов.&lt;/p&gt;
&lt;p&gt;Но даже если подписчик всего один, и сообщения доставляются последовательно, то и тогда очередность обработки сообщений может быть нарушена:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;With the redelivery feature, order can't be guaranteed, since by definition server will resend messages that have not been acknowledged after a period of time. Suppose your consumer receives messages 1, 2 and 3, does not acknowledge 2. Then message 4 is produced, server sends this message to the consumer. The redelivery timer then kicks in and server will resend message 2. The consumer would see messages: 1, 2, 3, 4, 2, 5, etc...&lt;/p&gt;
&lt;p&gt;In conclusion, the server does not offer this guarantee although it tries to redeliver messages first thing on startup. That being said, if the durable is stalled (number of outstanding messages &amp;gt;= MaxInflight), then the redelivery will also be stalled, and new messages will be allowed to be sent. When the consumer resumes acking messages, then it may receive redelivered and new messages interleaved (new messages will be in order though).&lt;/p&gt;
&lt;p&gt;- nats-streaming-server, &lt;a class="reference external" href="https://github.com/nats-io/nats-streaming-server/issues/187#issuecomment-257024506"&gt;issue #187 "Order of delivery"&lt;/a&gt;, comment by Ivan Kozlovic&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Ну а лучше всего эта тема раскрывается в Chapter "12 The Future of Data Systems :: Data Integration :: Combining Specialized Tools by Deriving Data :: Ordering events to capture causality" книги "Designing Data-Intensive Applications. The Big Ideas Behind Reliable, Scalable, and Maintainable Systems" &lt;a class="footnote-reference brackets" href="#fnddia" id="id102"&gt;12&lt;/a&gt; by Martin Kleppmann.&lt;/p&gt;
&lt;p&gt;Еще проблемы распределенности хорошо освещаются в книге "Database Reliability Engineering. Designing and Operating Resilient Database Systems." &lt;a class="footnote-reference brackets" href="#fndre" id="id103"&gt;13&lt;/a&gt; by Laine Campbell and Charity Majors.&lt;/p&gt;
&lt;p&gt;Ссылки по теме:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://queue.acm.org/detail.cfm?id=2610533"&gt;Don't Settle for Eventual Consistency. Stronger properties for low-latency geo-replicated storage.&lt;/a&gt;" (&lt;a class="reference external" href="https://dl.acm.org/ft_gateway.cfm?id=2610533&amp;amp;ftid=1449165&amp;amp;dwn=1"&gt;pdf&lt;/a&gt;) by Wyatt Lloyd, Facebook; Michael J. Freedman, Princeton University; Michael Kaminsky, Intel Labs; David G. Andersen, Carnegie Mellon University&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://www.bailis.org/papers/bolton-sigmod2013.pdf"&gt;Bolt-on Causal Consistency&lt;/a&gt;" by Peter Bailis, Ali Ghodsi, Joseph M. Hellerstein†, Ion Stoica, UC Berkeley KTH/Royal Institute of Technology&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://disco.ethz.ch/courses/hs08/seminar/papers/mattern4.pdf"&gt;Detecting Causal Relationships in Distributed Computations:In Search of the Holy Grail&lt;/a&gt;" by Reinhard Schwarz, Friedemann Mattern&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.microsoft.com/en-us/research/publication/principles-of-eventual-consistency/"&gt;Principles of Eventual Consistency&lt;/a&gt;" (&lt;a class="reference external" href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/final-printversion-10-5-14.pdf"&gt;pdf&lt;/a&gt;) by Sebastian Burckhardt, Microsoft Research&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://eventsourcing.readthedocs.io/en/stable/topics/process.html#causal-dependencies"&gt;Causal dependencies at eventsourcing framework by Python&lt;/a&gt;" by John Bywater&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://labix.org/vclock"&gt;The vclock package&lt;/a&gt; offers full vector clock support for the Go language. Vector clocks allow recording and analyzing the inherent partial ordering of events in a distributed system in a comfortable way." by Gustavo Niemeyer (&lt;a class="reference external" href="https://blog.labix.org/2010/12/21/vector-clock-support-for-go"&gt;more info&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ссылки для начинающих в Integration Events:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Хороший лаконичный обзорный блог-пост по возможностям NATS Streaming Server "&lt;a class="reference external" href="https://nats.io/blog/use-cases-for-persistent-logs-with-nats-streaming/"&gt;Guest Post: Use cases for persistent logs with NATS Streaming&lt;/a&gt;" by Byron Ruth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Лучше один раз увидеть. &lt;a class="reference external" href="https://github.com/bruth/code-examples/tree/master/patterns-nats-streaming"&gt;Живые примеры по работе с NATS Streaming Server&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id104"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id141"&gt;Где создавать Domain Event об удалении объекта?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Информации по этому вопросу практически нет, поэтому, я поделюсь своими мыслями.&lt;/p&gt;
&lt;p&gt;В Английском языке есть &lt;a class="reference external" href="https://english.stackexchange.com/a/52509"&gt;разница&lt;/a&gt; между словом "delete" и "remove".
"Delete" подразумевает "уничтожить".
"Remove" - "изъять", "вынести".&lt;/p&gt;
&lt;p&gt;Кстати, русское слово "удалить" &lt;a class="reference external" href="https://ru.wiktionary.org/wiki/%D1%83%D0%B4%D0%B0%D0%BB%D0%B8%D1%82%D1%8C#%D0%AD%D1%82%D0%B8%D0%BC%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D1%8F"&gt;происходит&lt;/a&gt; от слова "даль".
Например, "Удалить ненужные вещи из комнаты", "Удалить занозу".&lt;/p&gt;
&lt;p&gt;Термин "remove" (удаление) применим к Коллекции, содержащей объект, и означает то, что объект удаляется от Коллекции (в даль).
Но при этом, объект, сам по себе, продолжает существовать.
Он может быть удален от (из) одной Коллекции, а затем вставлен в иную Коллекцию.
Как говорилось ранее, источником Domain Event не обязательно должен быть Агрегат или Команда.
Источником может быть и Коллекция, т.е. Repository.&lt;/p&gt;
&lt;p&gt;Но если мы будем говорить не об удалении, а об "уничтожении" ("delete"), то мы говорим о состоянии, т.е. о части жизненного цикла объекта.
В таком случае было бы уместно, чтобы событие о переходе в новое состояние жизненного цикла объекта создавал сам объект.
Это становится особенно заметно, если мы используем soft delete (смотрите статью "&lt;a class="reference external" href="http://udidahan.com/2009/09/01/dont-delete-just-dont/"&gt;Don't Delete – Just Don't&lt;/a&gt;" by Udi Dahan по этому поводу).
Пример можно посмотреть &lt;a class="reference external" href="https://github.com/kgrzybek/modular-monolith-with-ddd/blob/78810bb44ae10cd88ca12b8d81712ba20c0ca43f/src/Modules/Meetings/Domain/Meetings/MeetingAttendee.cs#L124"&gt;здесь&lt;/a&gt; (вызывается &lt;a class="reference external" href="https://github.com/kgrzybek/modular-monolith-with-ddd/blob/78810bb44ae10cd88ca12b8d81712ba20c0ca43f/src/Modules/Meetings/Domain/Meetings/Meeting.cs#L289"&gt;здесь&lt;/a&gt;).
Это не Агрегат - это вложенная Сущность.&lt;/p&gt;
&lt;p&gt;В другом &lt;a class="reference external" href="https://github.com/kgrzybek/sample-dotnet-core-cqrs-api/blob/1d344b90658c6593993eaa1391410b5ab1ebabfc/src/SampleProject.Domain/Customers/Orders/Order.cs#L111"&gt;примере&lt;/a&gt; реализации soft delete, событие &lt;a class="reference external" href="https://github.com/kgrzybek/sample-dotnet-core-cqrs-api/blob/01a1d6517bc88773f004abc0cb9c6d79f537e575/src/SampleProject.Domain/Customers/Customer.cs#L89"&gt;создается&lt;/a&gt; Агрегатом, владеющим Сущностью.
Похожие примеры можно найти и у Vaughn Vernon, см. &lt;a class="reference external" href="https://github.com/VaughnVernon/IDDD_Samples_NET/blob/90fcc52d9c1af29640ec2a8a3e0e7c692f3e6663/iddd_identityaccess/Domain.Model/Identity/Group.cs#L159"&gt;здесь&lt;/a&gt; и &lt;a class="reference external" href="https://github.com/VaughnVernon/IDDD_Samples_NET/blob/90fcc52d9c1af29640ec2a8a3e0e7c692f3e6663/iddd_identityaccess/Domain.Model/Identity/Group.cs#L142"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Посмотреть &lt;a class="reference external" href="https://github.com/VaughnVernon/IDDD_Samples_NET/blob/90fcc52d9c1af29640ec2a8a3e0e7c692f3e6663/iddd_agilepm/Domain.Model/Products/BacklogItems/BacklogItem.cs#L360"&gt;пример реализации soft delete Агрегата&lt;/a&gt; (а не Сущности) можно у Vaughn Vernon (Агрегат BacklogItem хоть и &lt;a class="reference external" href="https://github.com/VaughnVernon/IDDD_Samples_NET/blob/90fcc52d9c1af29640ec2a8a3e0e7c692f3e6663/iddd_agilepm/Domain.Model/Products/Product.cs#L128"&gt;создается&lt;/a&gt; Агрегатом Product, но является самостоятельным корнем).&lt;/p&gt;
&lt;p&gt;Скрыть присутствие Repository помогает pattern "&lt;a class="reference external" href="https://martinfowler.com/eaaCatalog/unitOfWork.html"&gt;Unit of Work&lt;/a&gt;".
В одноименной главе книги "Patterns of Enterprise Application Architecture" &lt;a class="footnote-reference brackets" href="#fnpoeaa" id="id105"&gt;10&lt;/a&gt; приводится пример класса DomainObject, который содержит метод markRemoved().&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;With object registration (Figure 11.2), the onus is removed from the caller.
The usual trick here is to place registration methods in object methods. Loading an object from the database registers the object as clean;
the setting methods register the object as dirty.
For this scheme to work the Unit of Work needs either to be passed to the object or to be in a well-known place.
Passing the Unit of Work around is tedious but usually no problem to have it present in some kind of session object.&lt;/p&gt;
&lt;p&gt;- "Patterns of Enterprise Application Architecture" &lt;a class="footnote-reference brackets" href="#fnpoeaa" id="id106"&gt;10&lt;/a&gt; by Martin Fowler, David Rice, Matthew Foemmel, Edward Hieatt, Robert Mee, Randy Stafford, Chapter "16. Offline Concurrency Patterns :: Coarse-Grained Lock"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Для этих целей удобно применять Aspect-oriented programming:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;This is a natural place for code generation to generate appropriate calls, but that only works when you can clearly separate generated and nongenerated code.
This problem turns out to be particularly suited to aspect-oriented programming.
I've also come across post-processing of the object files to pull this off.
In this example a post-processor examined all the Java .class files, looked for the appropriate methods and inserted registration calls into the byte code.
Such finicking around feels dirty, but it separates the database code from the regular code.
Aspect-oriented programming will do this more cleanly with source code, and as its tools become more commonplace I expect to see this strategy being used.&lt;/p&gt;
&lt;p&gt;- "Patterns of Enterprise Application Architecture" &lt;a class="footnote-reference brackets" href="#fnpoeaa" id="id107"&gt;10&lt;/a&gt; by Martin Fowler, David Rice, Matthew Foemmel, Edward Hieatt, Robert Mee, Randy Stafford, Chapter "16. Offline Concurrency Patterns :: Coarse-Grained Lock"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Также существует разница и между термином "insert" ("вставить") и "create" ("создать").
Первый применим к Коллекции объектов (как и "remove"), а второй - к состоянию жизненного цикла самого объекта (как и "delete").&lt;/p&gt;
&lt;p&gt;Вопрос о том, где создавать Domain Event об уничтожении/удалении объекта, во многом зависит от того, где создавался Domain Event о его создании/вставке, который, в свою очередь, зависит от того, каким образом создается идентификатор создаваемого объекта, если он необходим для Domain Event.&lt;/p&gt;
&lt;p&gt;Как вариант, если нужно создавать Domain Event о создании ("create") объекта внутри него самого, но при этом используется автоинкрементный первичный ключ базы данных, то обойти это ограничение можно вложив сам экземпляр созданного объекта в Domain Event.
Тогда, в момент вызова обработчика Domain Event, если он, конечно, будет происходить после сохранения созданного объекта в Хранилище (хотя и до коммита), созданному объекту уже будет присвоен идентификатор.
Агрегат, в таком случае, можно снабдить методом &lt;a class="reference external" href="https://github.com/dotnet-architecture/eShopOnContainers/blob/1d8c6178de2830ad809eae138a0a99011c26ac2c/src/Services/Ordering/Ordering.Domain/SeedWork/Entity.cs#L42"&gt;IsTransient&lt;/a&gt;.
Другим возможным вариантом обхода этого ограничения может быть передача в Domain Event объекта отложенного значения (в крайнем случае - указателя на значение).
Ну и, разумеется, можно использовать &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUID&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hi/Lo_algorithm"&gt;Hi/Lo algorithm&lt;/a&gt; и т.п.&lt;/p&gt;
&lt;p&gt;В целом я придерживаюсь такого правила - если Domain Event о "вставке" ("insert") объекта создает Коллекция (Repository), то и Domain Event об "удалении" ("remove") объекта должна создавать тоже Коллекция (Repository), на том же уровне абстракции.
А если Domain Event о "создании" ("create") объекта создает сам объект, как уведомление о переходе в новое состояние своего жизненного цикла, то и Domain Event об "уничтожении" ("delete") объекта должен создавать он же.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id108"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id142"&gt;Почему важно читать оригиналы вместо переводов&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В самом начале этого поста я говорил, что важно читать первоисточники.
Теперь я хочу показать, почему важно читать оригиналы, а не их переводы.&lt;/p&gt;
&lt;p&gt;Возьмем известную фразу Эрика Эванса, которая послужила первопричиной для eventual consistency между агрегатами. Сравните ее смысл в оригинале:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Invariants, which are consistency rules that must be maintained whenever data changes, will involve relationships between members of the AGGREGATE.
&lt;strong&gt;Any rule that spans AGGREGATES [мн. число] will not be expected to be up-to-date at all times.&lt;/strong&gt;
Through event processing, batch processing, or other update mechanisms, other dependencies can be resolved within some specified time.
But the invariants applied within an AGGREGATE will be enforced with the completion of each transaction.&lt;/p&gt;
&lt;p&gt;- "Domain-Driven Design: Tackling Complexity in the Heart of Software" &lt;a class="footnote-reference brackets" href="#fnddd" id="id109"&gt;1&lt;/a&gt; by Eric Evans, Chapter "Six. The Life Cycle of a Domain Object:: Aggregates"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;И ее смысл в переводе:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Из взаимосвязей между объектами АГРЕГАТА можно составить так называемые инварианты, т.е. правила совместности, которые должны соблюдаться при любых изменениях данных.
&lt;strong&gt;Не всякое правило, распространяющееся на АГРЕГАТ [ед. число], обязано выполняться непрерывно.&lt;/strong&gt;
Восстановить нужные взаимосвязи за определенное время можно с помощью обработки событий, пакетной обработки и других механизмов обновления системы.
Но соблюдение инвариантов, имеющих силу внутри агрегата, должно контролироваться немедленно по завершении любой транзакции.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Смысл утрачен. А этот смысл имеет ключевое значение - он говорит о распространении правил между агрегатами.&lt;/p&gt;
&lt;p&gt;Или другой пример.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;There are several possible ways for remote Bounded Contexts to become aware of Events that occur in your Bounded Context.
The primary idea is that some form of messaging takes place, and an enterprise messaging mechanism is needed.
To be clear, the mechanism being spoken of here goes well beyond the simple, lightweight Publish-Subscribe components just discussed.
Here we are discussing what takes over &lt;strong&gt;where the lightweight mechanism leaves off&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;- "Implementing Domain-Driven Design" &lt;a class="footnote-reference brackets" href="#fniddd" id="id110"&gt;3&lt;/a&gt; by Vaughn Vernon, Chapter "8. Domain Events :: Spreading the News to Remote Bounded Contexts"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Сравните с русским переводом:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Существует несколько способов сообщить удаленным ОГРАНИЧЕННЫМ КОНТЕКСТАМ о событии, произошедшем в вашем ОГРАНИЧЕННОМ КОНТЕКСТЕ.
Основная идея заключается в том, чтобы организовать какую-то форму передачи сообщений и создать механизм передачи сообщений в масштабе предприятия.
Точнее говоря, механизм, о котором идет речь, выходит далеко за рамки простых облегченных компонентов шаблона ИЗДАТЕЛЬ - ПОДПИСЧИК.
Ниже мы обсудим, что произойдет, &lt;strong&gt;если отказаться от этого упрощенного механизма&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Русский перевод не отражает оригинального смысла, который, кстати, опять же имеет немаловажное значение.
И даже если считать оригинальный смысл недостаточно ясным, допускающим несколько трактовок, из которых можно выбрать наиболее корректную исходя из контекста и предыдущих утверждений автора, то русский перевод такой возможности нас лишает.
Я трактую эту фразу так, чтобы она находилась в согласованности с другими утверждениями Вернона, т.е. "Ниже мы обсудим, что произойдет &lt;strong&gt;за пределами этого упрощенного механизма&lt;/strong&gt;", что полностью соответствует рис.8.1. и его описанию.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id111"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id143"&gt;Послесловие&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Эта статья отражает мое мнение на текущий момент времени, которое, однако, я не спешил бы называть окончательно сформированным, поскольку существует еще достаточно большой пласт информации по этому вопросу, который мне только предстоит переработать.
Основной посыл статьи - больше внимания уделять первоисточникам, и быть более гибким в принятии решений, хорошо осознавая их причины и следствия.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="fnddd"&gt;&lt;span class="brackets"&gt;1&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id8"&gt;1&lt;/a&gt;,&lt;a href="#id9"&gt;2&lt;/a&gt;,&lt;a href="#id10"&gt;3&lt;/a&gt;,&lt;a href="#id13"&gt;4&lt;/a&gt;,&lt;a href="#id109"&gt;5&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"Domain-Driven Design: Tackling Complexity in the Heart of Software" by Eric Evans&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fndddr"&gt;&lt;span class="brackets"&gt;2&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id2"&gt;1&lt;/a&gt;,&lt;a href="#id3"&gt;2&lt;/a&gt;,&lt;a href="#id4"&gt;3&lt;/a&gt;,&lt;a href="#id60"&gt;4&lt;/a&gt;,&lt;a href="#id74"&gt;5&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://domainlanguage.com/ddd/reference/"&gt;Domain-Driven Design Reference&lt;/a&gt;" by Eric Evans&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fniddd"&gt;&lt;span class="brackets"&gt;3&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id5"&gt;1&lt;/a&gt;,&lt;a href="#id7"&gt;2&lt;/a&gt;,&lt;a href="#id11"&gt;3&lt;/a&gt;,&lt;a href="#id12"&gt;4&lt;/a&gt;,&lt;a href="#id16"&gt;5&lt;/a&gt;,&lt;a href="#id17"&gt;6&lt;/a&gt;,&lt;a href="#id20"&gt;7&lt;/a&gt;,&lt;a href="#id21"&gt;8&lt;/a&gt;,&lt;a href="#id24"&gt;9&lt;/a&gt;,&lt;a href="#id46"&gt;10&lt;/a&gt;,&lt;a href="#id62"&gt;11&lt;/a&gt;,&lt;a href="#id63"&gt;12&lt;/a&gt;,&lt;a href="#id64"&gt;13&lt;/a&gt;,&lt;a href="#id65"&gt;14&lt;/a&gt;,&lt;a href="#id66"&gt;15&lt;/a&gt;,&lt;a href="#id67"&gt;16&lt;/a&gt;,&lt;a href="#id72"&gt;17&lt;/a&gt;,&lt;a href="#id83"&gt;18&lt;/a&gt;,&lt;a href="#id90"&gt;19&lt;/a&gt;,&lt;a href="#id110"&gt;20&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://kalele.io/books/"&gt;Implementing Domain-Driven Design&lt;/a&gt;" by Vaughn Vernon&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fndddd"&gt;&lt;span class="brackets"&gt;4&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id19"&gt;1&lt;/a&gt;,&lt;a href="#id22"&gt;2&lt;/a&gt;,&lt;a href="#id45"&gt;3&lt;/a&gt;,&lt;a href="#id47"&gt;4&lt;/a&gt;,&lt;a href="#id71"&gt;5&lt;/a&gt;,&lt;a href="#id75"&gt;6&lt;/a&gt;,&lt;a href="#id76"&gt;7&lt;/a&gt;,&lt;a href="#id94"&gt;8&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://kalele.io/books/"&gt;Domain-Driven Design Distilled&lt;/a&gt;" by Vaughn Vernon&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnrmp"&gt;&lt;span class="brackets"&gt;5&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id92"&gt;1&lt;/a&gt;,&lt;a href="#id95"&gt;2&lt;/a&gt;,&lt;a href="#id96"&gt;3&lt;/a&gt;,&lt;a href="#id97"&gt;4&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://kalele.io/books/"&gt;Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka&lt;/a&gt;" by Vaughn Vernon&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnpppddd"&gt;&lt;span class="brackets"&gt;6&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id23"&gt;1&lt;/a&gt;,&lt;a href="#id30"&gt;2&lt;/a&gt;,&lt;a href="#id55"&gt;3&lt;/a&gt;,&lt;a href="#id56"&gt;4&lt;/a&gt;,&lt;a href="#id78"&gt;5&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"Patterns, Principles, and Practices of Domain-Driven Design" by Scott Millett, Nick Tune&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnnetms"&gt;&lt;span class="brackets"&gt;7&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id6"&gt;1&lt;/a&gt;,&lt;a href="#id26"&gt;2&lt;/a&gt;,&lt;a href="#id27"&gt;3&lt;/a&gt;,&lt;a href="#id28"&gt;4&lt;/a&gt;,&lt;a href="#id29"&gt;5&lt;/a&gt;,&lt;a href="#id31"&gt;6&lt;/a&gt;,&lt;a href="#id44"&gt;7&lt;/a&gt;,&lt;a href="#id48"&gt;8&lt;/a&gt;,&lt;a href="#id58"&gt;9&lt;/a&gt;,&lt;a href="#id59"&gt;10&lt;/a&gt;,&lt;a href="#id77"&gt;11&lt;/a&gt;,&lt;a href="#id88"&gt;12&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/index"&gt;.NET Microservices: Architecture for Containerized .NET Applications&lt;/a&gt;" edition v2.2.1 (&lt;a class="reference external" href="https://aka.ms/microservicesebook"&gt;mirror&lt;/a&gt;) by Cesar de la Torre, Bill Wagner, Mike Rousos&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fncqrsj"&gt;&lt;span class="brackets"&gt;8&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id99"&gt;1&lt;/a&gt;,&lt;a href="#id100"&gt;2&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-US/previous-versions/msp-n-p/jj554200(v=pandp.10)"&gt;CQRS Journey&lt;/a&gt;" by Dominic Betts, Julián Domínguez, Grigori Melnik, Fernando Simonazzi, Mani Subramanian&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnoosc"&gt;&lt;span class="brackets"&gt;9&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id81"&gt;1&lt;/a&gt;,&lt;a href="#id82"&gt;2&lt;/a&gt;,&lt;a href="#id84"&gt;3&lt;/a&gt;,&lt;a href="#id85"&gt;4&lt;/a&gt;,&lt;a href="#id86"&gt;5&lt;/a&gt;,&lt;a href="#id87"&gt;6&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnpoeaa"&gt;&lt;span class="brackets"&gt;10&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id14"&gt;1&lt;/a&gt;,&lt;a href="#id105"&gt;2&lt;/a&gt;,&lt;a href="#id106"&gt;3&lt;/a&gt;,&lt;a href="#id107"&gt;4&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.martinfowler.com/books/eaa.html"&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;" by Martin Fowler, David Rice, Matthew Foemmel, Edward Hieatt, Robert Mee, Randy Stafford&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fneip"&gt;&lt;span class="brackets"&gt;11&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id91"&gt;1&lt;/a&gt;,&lt;a href="#id93"&gt;2&lt;/a&gt;,&lt;a href="#id98"&gt;3&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.enterpriseintegrationpatterns.com/"&gt;Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions&lt;/a&gt;" by Gregor Hohpe, Bobby Woolf&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnddia"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id102"&gt;12&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://dataintensive.net/"&gt;Designing Data-Intensive Applications. The Big Ideas Behind Reliable, Scalable, and Maintainable Systems&lt;/a&gt;" by Martin Kleppmann&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fndre"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id103"&gt;13&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"Database Reliability Engineering. Designing and Operating Resilient Database Systems." by Laine Campbell and Charity Majors&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnmsp"&gt;&lt;span class="brackets"&gt;14&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id89"&gt;1&lt;/a&gt;,&lt;a href="#id101"&gt;2&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.manning.com/books/microservice-patterns"&gt;Microservices Patterns: With examples in Java&lt;/a&gt;" 1st edition by Chris Richardson (&lt;a class="reference external" href="https://microservices.io/book"&gt;more info&lt;/a&gt;)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnkgde1"&gt;&lt;span class="brackets"&gt;15&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id35"&gt;1&lt;/a&gt;,&lt;a href="#id36"&gt;2&lt;/a&gt;,&lt;a href="#id50"&gt;3&lt;/a&gt;,&lt;a href="#id51"&gt;4&lt;/a&gt;,&lt;a href="#id68"&gt;5&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="http://www.kamilgrzybek.com/design/how-to-publish-and-handle-domain-events/"&gt;How to publish and handle Domain Events&lt;/a&gt;" by Kamil Grzybek&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnkgde2"&gt;&lt;span class="brackets"&gt;16&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id37"&gt;1&lt;/a&gt;,&lt;a href="#id38"&gt;2&lt;/a&gt;,&lt;a href="#id49"&gt;3&lt;/a&gt;,&lt;a href="#id52"&gt;4&lt;/a&gt;,&lt;a href="#id53"&gt;5&lt;/a&gt;,&lt;a href="#id54"&gt;6&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="http://www.kamilgrzybek.com/design/handling-domain-events-missing-part/"&gt;Handling Domain Events: Missing Part&lt;/a&gt;" by Kamil Grzybek&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnkgoutbox"&gt;&lt;span class="brackets"&gt;17&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.kamilgrzybek.com/design/the-outbox-pattern/"&gt;The Outbox Pattern&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnjbde1"&gt;&lt;span class="brackets"&gt;18&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id32"&gt;1&lt;/a&gt;,&lt;a href="#id33"&gt;2&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2010/04/08/strengthening-your-domain-domain-events/"&gt;Strengthening your domain: Domain Events&lt;/a&gt;" by Jimmy Bogard&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnjbde2"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id34"&gt;19&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2014/05/13/a-better-domain-events-pattern/"&gt;A better domain events pattern&lt;/a&gt;" by Jimmy Bogard&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnudde1"&gt;&lt;span class="brackets"&gt;20&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="http://udidahan.com/2008/02/29/how-to-create-fully-encapsulated-domain-models/"&gt;How to create fully encapsulated Domain Models&lt;/a&gt;" by Udi Dahan&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnudde2"&gt;&lt;span class="brackets"&gt;21&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="http://udidahan.com/2008/08/25/domain-events-take-2/"&gt;Domain Events – Take 2&lt;/a&gt;" by Udi Dahan&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnudde3"&gt;&lt;span class="brackets"&gt;22&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id39"&gt;1&lt;/a&gt;,&lt;a href="#id40"&gt;2&lt;/a&gt;,&lt;a href="#id41"&gt;3&lt;/a&gt;,&lt;a href="#id42"&gt;4&lt;/a&gt;,&lt;a href="#id69"&gt;5&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="http://udidahan.com/2009/06/14/domain-events-salvation/"&gt;Domain Events – Salvation&lt;/a&gt;" by Udi Dahan&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fncdltdevie"&gt;&lt;span class="brackets"&gt;23&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id43"&gt;1&lt;/a&gt;,&lt;a href="#id57"&gt;2&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://devblogs.microsoft.com/cesardelatorre/domain-events-vs-integration-events-in-domain-driven-design-and-microservices-architectures/"&gt;Domain Events vs. Integration Events in Domain-Driven Design and microservices architectures&lt;/a&gt;" by Cesar De la Torre, Principal Program Manager, .NET&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnntuhbr"&gt;&lt;span class="brackets"&gt;24&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://medium.com/nick-tune-tech-strategy-blog/uncovering-hidden-business-rules-with-ddd-aggregates-67fb02abc4b"&gt;Uncovering Hidden Business Rules with DDD Aggregates&lt;/a&gt; by Nick Tune&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnmvpe"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id61"&gt;25&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://verraes.net/2019/05/patterns-for-decoupling-distsys-explicit-public-events/"&gt;Patterns for Decoupling in Distributed Systems: Explicit Public Events&lt;/a&gt;" by Mathias Verraes&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fngycqrs"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id80"&gt;26&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/"&gt;CQRS, Task Based UIs, Event Sourcing agh!&lt;/a&gt;" by Greg Young&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnvkdesars"&gt;&lt;span class="brackets"&gt;27&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/domain-events-simple-reliable-solution/"&gt;Domain events: simple and reliable solution&lt;/a&gt;" by Vladimir Khorikov&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnvkmdebd"&gt;&lt;span class="brackets"&gt;28&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/merging-domain-events-dispatching/"&gt;Merging domain events before dispatching&lt;/a&gt;" by Vladimir Khorikov&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>О гонке сообщений в условиях конкурирующих подписчиков</title><link>https://dckms.github.io/system-architecture/emacsway/it/integration/asynchronous/message-ordering-in-competing-consumers.html</link><description>
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Одной из непростых  тем в DDD и микросервисной архитектуре является т.н. &lt;strong&gt;проблема "конкурирующих подписчиков"&lt;/strong&gt;. Это когда два причинно-зависимых события попадают на конкурирующие узлы обработки событий, и второе событие может "обогнать" первое, например, по причине того, что при обработке первого события возникли сетевые издержки, или запустился сборщик мусора, или по какой-либо причине первое сообщение не было обработано и подтверждено (ack) с первого раза. Возникает гонка сообщений.&lt;/p&gt;
&lt;div class="contents topic" id="id2"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#index-0" id="id7"&gt;О гонке сообщений в условиях конкурирующих подписчиков&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id8"&gt;Поддержка коммутативности&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id9"&gt;Исключение причин нарушения очередности событий&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id5" id="id10"&gt;Восстановление очередности сообщений&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id6" id="id11"&gt;Восстановление очередности обработки сообщений&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Например, &lt;a class="reference external" href="https://docs.nats.io/nats-concepts/queue"&gt;NATS использует Round-robin для балансировки подписчиков группы&lt;/a&gt;, и там эта проблема хорошо проявляется. Партиционирование каналов &lt;a class="reference external" href="https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-5-sketching-a-new-system/"&gt;появилось&lt;/a&gt; только в пока еще нестабильном &lt;a class="reference external" href="https://github.com/nats-io/jetstream"&gt;jetstream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Кроме того, доставка сообщений может пакетироваться из соображений оптимизации.&lt;/p&gt;
&lt;p&gt;Один из примеров, который мне запомнился (с какой-то статьи) - это когда один из пользователей соц.сети удаляет из списка друзей другого пользователя, и тут же шлет оставшимся друзьям письмо, в котором дискредитирует удаленного друга. Возникает два события, первое - на удаление друга, второе - на отправку сообщения списку оставшихся друзей. Причем, второе сообщение находится в причинной зависимости от первого, и должно быть обработано после первого. Возникает гонка событий.&lt;/p&gt;
&lt;p&gt;В условиях конкурирующих подписчиков, хронология обработки событий может измениться. И тогда, в момент отправки дискредитирующего письма списку друзей, удаленный пользователь все еще будет присутствовать в списке получателей.&lt;/p&gt;
&lt;p&gt;Существует несколько стратегий решения этой проблемы:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Нивелировать побочные эффекты (устранить симптомы) от нарушения очередности событий (коммутативность).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Исключить причины нарушения очередности событий.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Восстановить очередность сообщений.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Восстановить очередность обработки сообщений.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Будем рассматривать каждый из вариантов поочередно в отдельных постах.&lt;/p&gt;
&lt;p&gt;А пока - список литературы, который хорошо освещает эту проблему:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Designing Data-Intensive Applications. The Big Ideas Behind Reliable, Scalable, and Maintainable Systems" by Martin Kleppmann&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martin.kleppmann.com/2020/11/18/distributed-systems-and-elliptic-curves.html"&gt;Lecture notes (PDF) (including exercises)&lt;/a&gt;" by Martin Kleppman (&lt;a class="reference external" href="https://www.cl.cam.ac.uk/teaching/2021/ConcDisSys/dist-sys-notes.pdf"&gt;download&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/ept/dist-sys"&gt;source code&lt;/a&gt;, &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB"&gt;video&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Database Internals: A Deep Dive into How Distributed Data Systems Work" by Alex Petrov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Distributed systems: principles and paradigms" 3d edition by Andrew S. Tanenbaum, Maarten Van Steen&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://books.ifmo.ru/file/pdf/1551.pdf"&gt;Введение в распределенные вычисления&lt;/a&gt;" / Косяков М. С. — СПб: НИУ ИТМО, 2014. — С. 75-82. — 155 с.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://book.mixu.net/distsys/"&gt;Distributed systems: for fun and profit&lt;/a&gt;" (2013). An introduction to distributed systems. (&lt;a class="reference external" href="https://github.com/mixu/distsysbook"&gt;source code&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Database Reliability Engineering. Designing and Operating Resilient Database Systems." by Laine Campbell and Charity Majors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://leanpub.com/dddwithpython"&gt;Event Sourced Building Blocks for Domain-Driven Design with Python&lt;/a&gt;" by John Bywater&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Статьи по теме:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://queue.acm.org/detail.cfm?id=2610533"&gt;Don't Settle for Eventual Consistency. Stronger properties for low-latency geo-replicated storage.&lt;/a&gt;" (&lt;a class="reference external" href="https://dl.acm.org/ft_gateway.cfm?id=2610533&amp;amp;ftid=1449165&amp;amp;dwn=1"&gt;pdf&lt;/a&gt;) by Wyatt Lloyd, Facebook; Michael J. Freedman, Princeton University; Michael Kaminsky, Intel Labs; David G. Andersen, Carnegie Mellon University&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://www.bailis.org/papers/bolton-sigmod2013.pdf"&gt;Bolt-on Causal Consistency&lt;/a&gt;" by Peter Bailis, Ali Ghodsi, Joseph M. Hellerstein†, Ion Stoica, UC Berkeley KTH/Royal Institute of Technology&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://disco.ethz.ch/courses/hs08/seminar/papers/mattern4.pdf"&gt;Detecting Causal Relationships in Distributed Computations:In Search of the Holy Grail&lt;/a&gt;" by Reinhard Schwarz, Friedemann Mattern&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.microsoft.com/en-us/research/publication/principles-of-eventual-consistency/"&gt;Principles of Eventual Consistency&lt;/a&gt;" (&lt;a class="reference external" href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/final-printversion-10-5-14.pdf"&gt;pdf&lt;/a&gt;) by Sebastian Burckhardt, Microsoft Research&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://habr.com/ru/company/ua-hosting/blog/487638/"&gt;HighLoad++, Михаил Тюленев (MongoDB): Causal consistency: от теории к практике&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/articles/patterns-of-distributed-systems/version-vector.html"&gt;Version Vector&lt;/a&gt;" by Unmesh Joshi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.infoq.com/articles/no-reliable-messaging/"&gt;Nobody Needs Reliable Messaging&lt;/a&gt;" by Marc de Graauw&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Список литературы по интеграционным паттернам:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions" by Gregor Hohpe, Bobby Woolf&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka" by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Camel in Action" 2nd Edition by Claus Ibsen and Jonathan Anstey&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Примеры интеграционных паттернов:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/VaughnVernon/ReactiveMessagingPatterns_ActorModel"&gt;https://github.com/VaughnVernon/ReactiveMessagingPatterns_ActorModel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://camel.apache.org/components/latest/eips/enterprise-integration-patterns.html"&gt;https://camel.apache.org/components/latest/eips/enterprise-integration-patterns.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/camelinaction/camelinaction2"&gt;https://github.com/camelinaction/camelinaction2&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/"&gt;https://www.enterpriseintegrationpatterns.com/patterns/messaging/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Каталог моделей согласованности:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://jepsen.io/consistency"&gt;https://jepsen.io/consistency&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Шпаргалка по EIP-паттернам:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.enterpriseintegrationpatterns.com/download/EIPTutorialReferenceChart.pdf"&gt;Enterprise Integration Patterns Tutorial Reference Chart&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Каталоги:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/"&gt;Cloud Design Patterns&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn568099(v=pandp.10)"&gt;Cloud Design Patterns. Prescriptive architecture guidance for cloud applications&lt;/a&gt;" by Alex Homer, John Sharp, Larry Brader, Masashi Narumoto, Trent Swanson.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code Samples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://aka.ms/cloud-design-patterns-sample"&gt;http://aka.ms/cloud-design-patterns-sample&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/"&gt;Cloud Best Practices&lt;/a&gt;" by Microsoft Corporation and community&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Поддержка коммутативности&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Первая из перечисленных стратегий решения проблемы "конкурирующих подписчиков" - это "&lt;strong&gt;нивелировать побочные эффекты (устранить симптомы) от нарушения очередности событий (коммутативность)&lt;/strong&gt;".&lt;/p&gt;
&lt;p&gt;Часто бывает так, что два действия подряд над одним и тем же агрегатом приводят к тому, что, в условиях конкурирующих подписчиков, сообщение второго события может обогнать сообщение первого события. Если при этом используется "&lt;strong&gt;Event-Carried State Transfer&lt;/strong&gt;" ( &lt;a class="reference external" href="https://martinfowler.com/articles/201701-event-driven.html"&gt;https://martinfowler.com/articles/201701-event-driven.html&lt;/a&gt; ), то при обработке следующего сообщения (которое было отправлено первым), система будет оперировать уже устаревшими данными.&lt;/p&gt;
&lt;p&gt;Как один из вариантов решения проблемы в таком случае, может быть переход на "&lt;strong&gt;Event Notification&lt;/strong&gt;". В некоторых случаях прокатывает. Но он ухудшает availability (CAP-Theorem) из-за каскадного синхронного запроса.&lt;/p&gt;
&lt;p&gt;В некоторых случаях также прокатывает игнорирование предыдущего события, если последующее событие уже было обработано.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Исключение причин нарушения очередности событий&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Вторая из перечисленных стратегий решения проблемы "конкурирующих подписчиков" - это "&lt;strong&gt;исключить причины нарушения очередности событий&lt;/strong&gt;".&lt;/p&gt;
&lt;p&gt;Этому способу решения проблемы посвящена глава "&lt;a class="reference external" href="https://livebook.manning.com/book/microservices-patterns/chapter-3/section-3-3-5?origin=product-toc"&gt;3.3.5 Competing receivers and message ordering&lt;/a&gt;" книги "Microservices Patterns: With examples in Java" by Chris Richardson&lt;/p&gt;
&lt;p&gt;Если mеssaging system не поддерживает партиционирование каналов, то его можно реализовать с помощью паттерна EIP "&lt;a class="reference external" href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/ContentBasedRouter.html"&gt;Content-Based Router&lt;/a&gt;"&lt;/p&gt;
&lt;p&gt;Например, &lt;a class="reference external" href="https://camel.apache.org/components/latest/eips/content-based-router-eip.html"&gt;используя Camel Framework&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;С помощью партиционирования каналов мы добиваемся того, что все сообщения одного и того же &lt;strong&gt;причинно-зависимого (causal) потока&lt;/strong&gt; попадают на один и тот же узел группы подписчиков. Нет конкуренции - нет проблемы. Здесь вводится новый и достаточно обширный термин "&lt;strong&gt;Causal Consistency&lt;/strong&gt;", имеющий критически важное значение для всех, кто имеет дело с распределенными системами.&lt;/p&gt;
&lt;p&gt;Vaughn Vernon в "Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka" (RMPwAM) ссылается на следующие две статьи по этому вопросу:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://queue.acm.org/detail.cfm?id=2610533"&gt;https://queue.acm.org/detail.cfm?id=2610533&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.bailis.org/papers/bolton-sigmod2013.pdf"&gt;http://www.bailis.org/papers/bolton-sigmod2013.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Каталог моделей согласованности:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://jepsen.io/consistency"&gt;https://jepsen.io/consistency&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Было бы, наверное, уместно упомянуть в контексте этого обсуждения пару превосходных материалов на тему CAP-theorem и Consistency:&lt;/p&gt;
&lt;p&gt;Самое понятное объяснение CAP-Theorem, которое я когда-либо видел:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://ksat.me/a-plain-english-introduction-to-cap-theorem"&gt;A plain english introduction to CAP Theorem&lt;/a&gt;" by Kaushik Sathupadi (&lt;a class="reference external" href="https://habr.com/ru/post/130577/"&gt;перевод на русский&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Превосходная статья от CTO of Amazon.com Werner Vogels:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.allthingsdistributed.com/2008/12/eventually_consistent.html"&gt;Eventually Consistent - Revisited&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Превосходная статья по Causal Consistency (Causal Dependencies) доступным языком:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://habr.com/ru/company/ua-hosting/blog/487638/"&gt;HighLoad++, Михаил Тюленев (MongoDB): Causal consistency: от теории к практике&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Восстановление очередности сообщений&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Третья из перечисленных стратегий решения проблемы "конкурирующих подписчиков" - это "&lt;strong&gt;восстановить очередность сообщений&lt;/strong&gt;".&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Хьюитт был против включения требований о том, что сообщения должны прибывать в том порядке, в котором они отправлены на модель актора. Если желательно упорядочить входящие сообщения, то это можно смоделировать с помощью очереди акторов, которая обеспечивает такую функциональность. Такие очереди акторов упорядочивали бы поступающие сообщения так, чтобы они были получены в порядке FIFO. В общем же случае, если актор X отправляет сообщение M1 актору Y, а затем тот же актор X отправляет другое сообщение M2 к Y, то не существует никаких требований о том, что M1 придёт к Y раньше M2."&lt;/p&gt;
&lt;p class="attribution"&gt;—Pаздел "&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_%D0%B0%D0%BA%D1%82%D0%BE%D1%80%D0%BE%D0%B2#%D0%9D%D0%B8%D0%BA%D0%B0%D0%BA%D0%B8%D1%85_%D1%82%D1%80%D0%B5%D0%B1%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B9_%D0%BE_%D0%BF%D0%BE%D1%80%D1%8F%D0%B4%D0%BA%D0%B5_%D0%BF%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D0%B9"&gt;Никаких требований о порядке поступления сообщений&lt;/a&gt;" статьи "Модель акторов" Википедии&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Для решения этой задачи можно использовать EIP Pattern "&lt;a class="reference external" href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/Resequencer.html"&gt;Resequencer&lt;/a&gt;". Например, &lt;a class="reference external" href="https://camel.apache.org/components/latest/eips/resequence-eip.html"&gt;используя Camel Framework&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Восстановление очередности обработки сообщений&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Четвертая из перечисленных стратегий решения проблемы "конкурирующих подписчиков" - это "&lt;strong&gt;восстановить очередность обработки сообщений&lt;/strong&gt;".&lt;/p&gt;
&lt;p&gt;Иными словами, можно пойти другим путем, и отказаться от гарантированной очередности доставки сообщений. Но, в таком случае, подписчик сам должен будет решать, может ли он обработать поступившее сообщение, или же причинно-предшествующее сообщение еще пока не было обработано, и тогда он должен оставить поступившее сообщение в очереди. Правда, на выяснение этого требуется потратить ресурсы (где-то нужно фиксировать обработку сообщений и потом удостоверяться, что предшествующее причинное сообщение уже было обработано).&lt;/p&gt;
&lt;p&gt;Как красиво заметил Alexey Zimarev, "мир occasionally-connected устройств по определению не упорядочен".&lt;/p&gt;
&lt;p&gt;Такой подход применяется в Actor Model:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "... модель акторов зеркально отражает систему коммутации пакетов, которая не гарантирует, что пакеты будут получены в порядке отправления. Отсутствие гарантий порядка доставки сообщений позволяет системе коммутации пакетов буферизовать пакеты, использовать несколько путей отправки пакетов, повторно пересылать повреждённые пакеты и использовать другие методы оптимизации."&lt;/p&gt;
&lt;p class="attribution"&gt;—Pаздел "&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_%D0%B0%D0%BA%D1%82%D0%BE%D1%80%D0%BE%D0%B2#%D0%9D%D0%B8%D0%BA%D0%B0%D0%BA%D0%B8%D1%85_%D1%82%D1%80%D0%B5%D0%B1%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B9_%D0%BE_%D0%BF%D0%BE%D1%80%D1%8F%D0%B4%D0%BA%D0%B5_%D0%BF%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D0%B9"&gt;Никаких требований о порядке поступления сообщений&lt;/a&gt;" статьи "Модель акторов" Википедии&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Messages in the Actor model are generalizations of packets in Internet computing in that they need not be received in the order sent. Not implementing the order of delivery, allows packet switching to buffer packets, use multiple paths to send packets, resend damaged packets, and to provide other optimizations.&lt;/p&gt;
&lt;p&gt;For example, Actors are allowed to pipeline the processing of messages. What this means is that in the course of processing a message m1, an Actor can designate how to process the next message, and then in fact begin processing another message m2 before it has finished processing m1. Just because an Actor is allowed to pipeline the processing of messages does not mean that it must pipeline the processing. Whether a message is pipelined is an engineering tradeoff."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://arxiv.org/abs/1008.1459"&gt;Actor  Model  of  Computation: Scalable  Robust  Information Systems&lt;/a&gt;" by Carl Hewitt&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Тут нужно сделать короткое отступление. Хотя, как говорилось ранее, "&lt;em&gt;Хьюитт был против включения требований о том, что сообщения должны прибывать в том порядке, в котором они отправлены на модель актора&lt;/em&gt;", в современных реализациях Actor Model mailbox представлен как FIFO-queue:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "One of the guarantees of the Actor model is sequential message delivery. That is, by default actor mailboxes are first-in, first-out (FIFO) channels. When a message arrives through the actor's channel, it will be received in the order in which it was sent. Thus, if actor A sends a message to actor B and then actor A sends a second message to actor B, the message that was sent first will be the first message received by actor B."&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Однако, вопрос все-равно остается открытым:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "What if you introduce a third actor, C? Now actor A and actor C both send one or more messages to actor B. There is no guarantee which message actor B will receive first, either the first from actor A or the first from actor C. Nevertheless, the first message from actor A will always be received by actor B before the second message that actor A sends, and the first message from actor C will always
be received by actor B before the second message that actor C sends...&lt;/p&gt;
&lt;p&gt;What is implied? Actors must be prepared to accept and reject messages based on their current state, which is reflected by the order in which previous messages were received. Sometimes a latent message could be accepted even if it is not perfect timing, but the actor's reaction to the latent message may have to carefully take into account its current state beforehand. This may be dealt with more gracefully by using the actors become() capabilities."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka" by Vaughn Vernon, Chapter "5. Messaging Channels :: Point-to-Point Channel"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Кроме того,&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Because individual messages may follow different routes, some messages are likely to pass through the processing steps sooner than others, &lt;strong&gt;resulting in the messages getting out of order&lt;/strong&gt;. However, some subsequent processing steps do require in-sequence processing of messages, for example to maintain referential integrity.&lt;/p&gt;
&lt;p&gt;One common way things get out of sequence is the fact that different messages may take different processing paths. Let's look at a simple example. Let's assume we are dealing with a numbered sequence of messages. If all even numbered messages have to undergo a special transformation whereas all odd numbered messages can be passed right through, then odd numbered messages will appear on the resulting channel while the even ones queue up at the transformation. If the transformation is quite slow, all odd messages may appear on the output channel before a single even message makes it, bringing the sequence completely out of order.&lt;/p&gt;
&lt;p&gt;To avoid getting the messages out of order, we could introduce a loop-back (acknowledgment) mechanism that makes sure that only one message at a time passes through the system. The next message will not be sent until the last one is done processing. This conservative approach will resolve the issue, but has two significant drawbacks. First, it can slow the system significantly. If we have a large number of parallel processing units, we would severely underutilize the processing power. In many instances, the reason for parallel processing is that we need to increase performance, so throttling traffic to one message at a time would complete erase the purpose of the solution. The second issue is that this approach requires us to have control over messages being sent into the processing units. However, often we find ourselves at the receiving end of an out-of-sequence message stream without having control over the message origin."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions" by Gregor Hohpe, Bobby Woolf&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Решение?&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "While not discussed in detail here, Message Metadata can be used to achieve causal consistency [&lt;a class="reference external" href="https://queue.acm.org/detail.cfm?id=2610533"&gt;AMC-Causal Consistency&lt;/a&gt;] among Messages (130) that must be replicated across a network with full ordering preserved [&lt;a class="reference external" href="http://www.bailis.org/papers/bolton-sigmod2013.pdf"&gt;Bolt-on Causal Consistency&lt;/a&gt;]."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka" by Vaughn Vernon, Chapter "10. System Management and Infrastructure :: Message Metadata/History"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Even so, a technique called causal consistency [&lt;a class="reference external" href="https://queue.acm.org/detail.cfm?id=2610533"&gt;AMC-Causal Consistency&lt;/a&gt;] can be used to achieve the same."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka" by Vaughn Vernon, Chapter "10. System Management and Infrastructure :: Message Journal/Store"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "To see the full power that results from using Domain Events , consider the concept of causal consistency. A business domain provides causal consistency if its operations that are causally related —one operation causes another—are seen by every dependent node of a distributed system in the same order [&lt;a class="reference external" href="https://queue.acm.org/detail.cfm?id=2610533"&gt;Causal&lt;/a&gt;] . This means that causally related operations must occur in a specific order, and thus one thing cannot happen unless another thing happens before it. Perhaps this means that one Aggregate cannot be created or modified until it is clear that a specific operation occurred to another
Aggregate."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Domain-Driven Design Distilled" by Vaughn Vernon&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Посмотреть вживую &lt;a class="reference external" href="https://eventsourcing.readthedocs.io/en/v8.3.0/topics/process.html#causal-dependencies"&gt;обеспечение Causal Consistency&lt;/a&gt; на уровне подписчика можно в EventSourcing Framework. Реализация &lt;a class="reference external" href="https://github.com/johnbywater/eventsourcing/blob/fd73c5dbd97c0ae759c59f7bb0700afb12db7532/eventsourcing/application/process.py#L273"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Собственно, Causal является промежуточным уровнем строгости согласованности, чтобы избежать строгую линеаризацию сообщений (которая часто избыточна) из соображений сохранения параллелизма и повышения производительности, но при этом, не допускать параллелизма в потоках причинно-зависимых сообщений (где очередность сообщений, действительно, востребована).&lt;/p&gt;
&lt;p&gt;Обычно идентификатором потока (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;streamId&lt;/span&gt;&lt;/code&gt;) выступает идентификатор агрегата. А идентификатором последовательности события в этом потоке (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;position&lt;/span&gt;&lt;/code&gt;) обычно &lt;a class="reference external" href="https://github.com/johnbywater/eventsourcing/blob/fd73c5dbd97c0ae759c59f7bb0700afb12db7532/eventsourcing/application/process.py#L82"&gt;выступает номер версии агрегата&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Другой пример кода, реализующего Causal Store можно посмотреть в главе "6.4.2 Causal Store" статьи "&lt;a class="reference external" href="https://www.microsoft.com/en-us/research/publication/principles-of-eventual-consistency/"&gt;Principles of Eventual Consistency&lt;/a&gt;" (&lt;a class="reference external" href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/final-printversion-10-5-14.pdf"&gt;pdf&lt;/a&gt;) by Sebastian Burckhardt, Microsoft Research.&lt;/p&gt;
&lt;p&gt;Реализация Vector Clock на Golang - &lt;a class="reference external" href="https://labix.org/vclock"&gt;vclock&lt;/a&gt;.
Статья об этой библиотеке на сайте автора: "&lt;a class="reference external" href="https://blog.labix.org/2010/12/21/vector-clock-support-for-go"&gt;Vector clock support for Go&lt;/a&gt;" by Gustavo Niemeyer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Note that just &lt;strong&gt;saving the Domain Event in its causal order doesn't guarantee that it will arrive at other distributed nodes in the same order&lt;/strong&gt;. Thus, it is also the responsibility of the consuming Bounded Context to recognize proper &lt;strong&gt;causality&lt;/strong&gt;. It might be the Domain Event type itself that can indicate causality, or it may be &lt;strong&gt;metadata&lt;/strong&gt; associated with the Domain Event, such as a &lt;strong&gt;sequence&lt;/strong&gt; or &lt;strong&gt;causal identifier&lt;/strong&gt;. The &lt;strong&gt;sequence&lt;/strong&gt; or &lt;strong&gt;causal identifier&lt;/strong&gt; would &lt;strong&gt;indicate what caused this Domain Event, and if the cause was not yet seen, the consumer must wait to apply the newly arrived event until its cause arrives&lt;/strong&gt;. In some cases it is possible to ignore latent Domain Events that have already been superseded by the actions associated with a later one; in this case causality has a dismissible impact [об этом способе уже говорилось ранее, прим. моё]."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Domain-Driven Design Distilled" by Vaughn Vernon, Chapter "6. Tactical Design with Domain Events:: Designing, Implementing, and Using Domain Events"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The first option is to use message sessions, a feature of the Azure Service Bus. If you use &lt;strong&gt;message sessions&lt;/strong&gt;, this guarantees that messages within a session are delivered in the same order that they were sent.
The second alternative is to modify the handlers within the application to detect out-of-order messages through the use of sequence numbers or timestamps added to the messages when they are sent. &lt;strong&gt;If the receiving handler detects an out-of-order message, it rejects the message and puts it back onto the queue or topic to be processed later, after it has processed the messages that were sent before the rejected message.&lt;/strong&gt;"&lt;/p&gt;
&lt;p class="attribution"&gt;—"CQRS Journey" by Dominic Betts, Julián Domínguez, Grigori Melnik, Fernando Simonazzi, Mani Subramanian, Chapter "&lt;a class="reference external" href="https://docs.microsoft.com/ru-ru/previous-versions/msp-n-p/jj591565(v=pandp.10)#message-ordering"&gt;Journey 6: Versioning Our System :: Message ordering&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "&lt;strong&gt;Actors must be prepared to accept and reject messages based on their current state, which is reflected by the order in which previous messages were received.&lt;/strong&gt; Sometimes a latent message could be accepted even if it is not perfect timing, but the actor's reaction to the latent message may have to carefully take into account its current state beforehand. This may be dealt with more gracefully by using the actors become() capabilities."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka" by Vaughn Vernon, Chapter "5. Messaging Channels :: Point-to-Point Channel"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Возникает вопрос о том, нужно ли заниматься восстановлением очередности сообщений на уровне Domain Logic, или на уровне Application Logic.
В статье "&lt;a class="reference external" href="https://www.infoq.com/articles/no-reliable-messaging/"&gt;Nobody Needs Reliable Messaging&lt;/a&gt;" by Marc de Graauw приводятся убедительные аргументы о том, что если это важно для бизнеса, то это должно быть на уровне бизнес-логики (Domain Logic).
Однако, нужно учитывать, что термина "Сообщение" в предметной области вообще не существует (есть только "Событие").
Зато существует термин "время", которое едино для всего в предметной области, в отличии от времени приложения в распределенной системе.&lt;/p&gt;
&lt;p&gt;Таким образом, очередность доставки сообщений - это проблема, свойственная не предметной области, а приложению.
Нужно ли решать её на уровне бизнеса?
Ответ зависит от конкретных обстоятельств.&lt;/p&gt;
&lt;p&gt;Еще один из способов решения проблемы согласованности - это дублирование данных, сохранение, обработка и передача зависимых данных атомарно.
Этот прием часто используется для обеспечения границ согласованности Aggregate в DDD, для обеспечения автономности микросервисов и Bounded Contexts.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;An implementation consistent with this model would guarantee the invariant relating PO [Purchase Order] and its items, while changes to the price of a part would not have to immediately affect the items that reference it.
Broader consistency rules could be addressed in other ways.
For example, the system could present a queue of items with outdated prices to the users each day, so they could update or exempt each one.
But this is not an invariant that must be enforced at all times.
By making the dependency of line items on parts looser, we avoid contention and reflect the realities of the business better.
At the same time, tightening the relationship of the PO and its line items guarantees that an important business rule will be followed.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Domain-Driven Design" by Eric Evans&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Родственные EIP patterns:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/CorrelationIdentifier.html"&gt;Correlation Identifier&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageSequence.html"&gt;Message Sequence&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Применяется в том числе и в Event Sourcing.&lt;/p&gt;
&lt;p&gt;В  метаданных eventstore есть переменные &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$causationid&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$correlationid&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The are both really simple patterns I have never quite understood why they end up so misunderstood.
Let's say every message has 3 ids. 1 is its id. Another is correlation the last it causation.
The rules are quite simple. If you are responding to a message, you copy its correlation id as your correlation id, its message id is your causation id.
This allows you to see an entire conversation (correlation id) or to see what causes what (causation id).
Cheers,
Greg Young"&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://discuss.eventstore.com/t/causation-or-correlation-id/828/4"&gt;https://discuss.eventstore.com/t/causation-or-correlation-id/828/4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Примеры:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/microsoftarchive/cqrs-journey/blob/6ffd9a8c8e865a9f8209552c52fa793fbd496d1f/scripts/CreateDatabaseObjects.sql#L57-L62"&gt;раз&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/kgrzybek/modular-monolith-with-ddd/blob/4e2d66d16f97b3c863fbecd072dad52338516882/src/Modules/Payments/Infrastructure/AggregateStore/SqlStreamAggregateStore.cs#L44-L45"&gt;два&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Шпаргалка по EIP-паттернам:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.enterpriseintegrationpatterns.com/download/EIPTutorialReferenceChart.pdf"&gt;Enterprise Integration Patterns Tutorial Reference Chart&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Но даже если подписчик всего один, и сообщения доставляются последовательно, то и тогда очередность обработки сообщений может быть нарушена. Пример из NATS Streaming Server:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "With the redelivery feature, order can't be guaranteed, since by definition server will resend messages that have not been acknowledged after a period of time. Suppose your consumer receives messages 1, 2 and 3, does not acknowledge 2. Then message 4 is produced, server sends this message to the consumer. The redelivery timer then kicks in and server will resend message 2. The consumer would see messages: 1, 2, 3, 4, 2, 5, etc...&lt;/p&gt;
&lt;p&gt;In conclusion, the server does not offer this guarantee although it tries to redeliver messages first thing on startup. That being said, if the durable is stalled (number of outstanding messages &amp;gt;= MaxInflight), then the redelivery will also be stalled, and new messages will be allowed to be sent. When the consumer resumes acking messages, then it may receive redelivered and new messages interleaved (new messages will be in order though)."&lt;/p&gt;
&lt;p class="attribution"&gt;—nats-streaming-server, &lt;a class="reference external" href="https://github.com/nats-io/nats-streaming-server/issues/187#issuecomment-257024506"&gt;issue #187 "Order of delivery"&lt;/a&gt;, comment by Ivan Kozlovic&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Кстати, проблема очередности доставки сообщений хорошо описана в главе "Projections and Queries :: Building read models from events :: Subscriptions" книги "&lt;a class="reference external" href="https://www.amazon.com/Hands-Domain-Driven-Design-NET-ebook/dp/B07C5WSR9B"&gt;Hands-On Domain-Driven Design with .NET Core: Tackling complexity in the heart of software by putting DDD principles into practice&lt;/a&gt;" by Alexey Zimarev. И он добавил несколько &lt;a class="reference external" href="https://t.me/emacsway_chat/85"&gt;интересных аргументов в чат канала&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>TDD - Разработка через тестирование</title><link>https://dckms.github.io/system-architecture/emacsway/it/tdd/tdd.html</link><description>
&lt;span id="emacsway-tdd"/&gt; 
&lt;p&gt;Вокруг TDD (Test-Driven Development) сложилось немало мифов и заблуждений, и здесь я попытаюсь восстановить изначальный его смысл.
Для этого придется обратиться к первоисточникам.&lt;/p&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#tdd" id="id31"&gt;TDD - Разработка через тестирование&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id2" id="id32"&gt;Что такое TDD?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#tdd-software-design" id="id33"&gt;TDD - это о Software Design&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id8" id="id34"&gt;TDD - это способ управления сложностью&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#tdd-clean-code" id="id35"&gt;TDD - основной катализатор Clean Code&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id24" id="id36"&gt;Влияние TDD на темпы разработки&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#black-box-or-white-box" id="id37"&gt;Black Box or White Box?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#sociable-or-solitary" id="id38"&gt;Sociable or Solitary?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#tdd-design-patterns" id="id39"&gt;TDD и Design Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#one-assertion-per-test" id="id40"&gt;One assertion per test?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id32"&gt;Что такое TDD?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Прежде всего, что такое TDD (Test-Driven Development)?&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Чистый код, который работает (clean code that works), — в этой короткой, но содержательной фразе, придуманной Роном Джеффризом (Ron Jeffries), кроется весь смысл методики Test-Driven Development (TDD).
Чистый код, который работает, — это цель, к которой стоит стремиться, и этому есть причины.&lt;/p&gt;
&lt;p&gt;Clean code that works - now.
This is the seeming contradiction that lies behind much of the pain of programming.
Test-driven development replies to this contradiction with a paradox-test the program before you write it.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id3"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="section" id="tdd-software-design"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id33"&gt;TDD - это о Software Design&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Классическое заблуждение заключается в том, что TDD - это методика тестирования.
На самом же деле, TDD - это, прежде всего, методика разработки и проектирования:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Ирония TDD состоит в том, что это вовсе не методика тестирования.
Это методика анализа, методика проектирования, фактически методика структурирования всей деятельности, связанной с разработкой программного кода.&lt;/p&gt;
&lt;p&gt;One of the ironies of TDD is that it isn't a testing technique (the Cunningham Koan).
It's an analysis technique, a design technique, really a technique for structuring all the activities of development.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id4"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Если сравнивать со средним уровнем индустрии разработки программного обеспечения, методика TDD позволяет вам писать код, содержащий значительно меньше дефектов и формировать значительно более чистый дизайн. Те, кто стремится к изяществу, могут найти в TDD средство для достижения цели.&lt;/p&gt;
&lt;p&gt;It lets you write code with far fewer defects and a much cleaner design than is common in the industry. However, those whose souls are healed by the balm of elegance can find in TDD a way to do well by doing good.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id5"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;TDD базируется на очаровательно-наивном предположении программиста о том, что чем красивее код, тем вероятнее успех.
TDD помогает вам обращать внимание на правильные вопросы в подходящие для этого моменты времени. Благодаря этому вы можете делать дизайн чище и модифицировать его по мере того, как перед вами встают новые обстоятельства.&lt;/p&gt;
&lt;p&gt;TDD rests on a charmingly naive geekoid assumption that if you write better code, you'll be more successful.
TDD helps you to pay attention to the right issues at the right time so you can make your designs cleaner, you can refine your designs as you learn.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id6"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Мы с Робертом Мартином (Robert Martin) занимались исследованием подобного стиля TDD.
Проблема состоит в том, что дизайн продолжает вас удивлять.
Идеи, которые на первый взгляд кажутся вам вполне уместными, позже оказываются неправильными.
Поэтому я не рекомендую целиком и полностью доверять своим предчувствиям относительно паттернов.
Лучше думайте о том, что, по-вашему, должна делать система, позвольте дизайну оформиться так, как это необходимо.&lt;/p&gt;
&lt;p&gt;Robert Martin and I did some research into this style of TDD. The problem is that the design keeps surprising you.
Perfectly sensible design ideas turn out to be wrong.
Better just to think about what you want the system to do, and let the design sort itself out later.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id7"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id34"&gt;TDD - это способ управления сложностью&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Согласно закономерности &lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two"&gt;Магического числа семь плюс-минус два&lt;/a&gt;, обнаруженной американским учёным-психологом Джорджем Миллером, кратковременная человеческая память, как правило, не может запомнить и повторить более 7 ± 2 элементов.
Превышение этого порога замедляет темпы разработки, так как мозг не может преодолеть высокую концентрацию сложности.&lt;/p&gt;
&lt;p&gt;Тут можно провести аналогию с народной пословицей: веник сложно поломать пока он связан, но, развязав его на отдельные прутики, их можно легко переломать по отдельности.
TDD именно именно это и делает - декомпозирует сложность в процессе разработки.&lt;/p&gt;
&lt;p id="index-0"&gt;Здесь хорошо прослеживается аналогия с рефакторингом, который, в значительной мере, был основан тем же самым человеком - Кент Беком.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Мой первый опыт проведения дисциплинированного "поэтапного" рефакторинга связан с программированием на пару с Кентом Беком (Kent Beck) на высоте 30 000 футов.&lt;/p&gt;
&lt;p&gt;My first experience with disciplined, "one step at a time" refactoring was when I was pair-programming at 30,000 feet with Kent Beck.&lt;/p&gt;
&lt;p class="attribution"&gt;—Martin Fowler, the key author of "Refactoring: Improving the Design of Existing Code" &lt;a class="footnote-reference brackets" href="#fnrefactoring" id="id9"&gt;5&lt;/a&gt;, перевод С. Маккавеева&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;К тому же, рефакторинг является необъемлемой частью цикла TDD:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Красный—зеленый—рефакторинг — это мантра TDD.&lt;/p&gt;
&lt;p&gt;Red/green/refactor - the TDD mantra.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id10"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;По основной версии, слово "refactoring" происходит от математического термина "factoring", и дословно переводится как "факторизация" или "декомпозиция", о чем говорит на своем сайте ключевой автор известной книги "Refactoring: Improving the Design of Existing Code" &lt;a class="footnote-reference brackets" href="#fnrefactoring" id="id11"&gt;5&lt;/a&gt; (благодаря которой, рефакторинг, собственно, и стал популярным):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The obvious answer comes from the notion of factoring in mathematics. You can take an expressions such as x^2 + 5x + 6 and factor it into (x+2)(x+3). By factoring it you can make a number of mathematical operations much easier. Obviously this is much the same as representing 18 as 2*3^2. I've certainly often heard of people talking about a program as well factored once it's broken out into similarly logical chunks.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/bliki/EtymologyOfRefactoring.html"&gt;Etymology Of Refactoring&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Такое же мнение можно увидеть и на сайте Ward Cunningham:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Refactoring is a kind of reorganization. &lt;strong&gt;Technically, it comes from mathematics when you factor an expression into an equivalence - the factors are cleaner ways of expressing the same statement.&lt;/strong&gt; Refactoring implies equivalence; the beginning and end products must be functionally identical. You can view refactoring as a special case of reworking (see WhatIsReworking).&lt;/p&gt;
&lt;p&gt;Practically, refactoring means making code clearer and cleaner and simpler and elegant. Or, in other words, clean up after yourself when you code. Examples would run the range from renaming a variable to introducing a method into a third-party class that you don't have source for.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Refactoring is not rewriting, although many people think they are the same.&lt;/strong&gt; There are many good reasons to distinguish them, such as regression test requirements and knowledge of system functionality. The technical difference between the two is that refactoring, as stated above, doesn't change the functionality (or information content) of the system whereas rewriting does. Rewriting is reworking. See WhatIsReworking.&lt;/p&gt;
&lt;p&gt;Refactoring is a good thing because complex expressions are typically built from simpler, more grokable components. Refactoring either exposes those simpler components or reduces them to the more efficient complex expression (depending on which way you are going).&lt;/p&gt;
&lt;p&gt;For an example of efficiency, count the terms and operators: (x - 1) * (x + 1) = x^2 - 1. Four terms versus three. Three operators versus two. However, the left hand side expression is (arguably) simpler to understand because it uses simpler operations. Also, it provides you more information about the structure of the function f(x) = x^2 - 1, like the roots are +/- 1, that would be difficult to determine just by "looking" at the right hand side.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="http://wiki.c2.com/?WhatIsRefactoring"&gt;What Is Refactoring&lt;/a&gt;" on wiki.c2.com&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Если кому-то имя Ward Cunningham ни о чем не говорит, то вот как представил его сам Kent Beck в книге "Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id12"&gt;1&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Я начал свою жизнь настоящего программиста благодаря наставничеству и в рамках постоянного сотрудничества с Уордом Каннингэмом (Ward Cunningham).
Иногда я рассматриваю разработку, основанную на тестах, как попытку предоставить каждому программисту, работающему в произвольной среде, ощущение комфорта и тесной дружбы, которое было у нас с Уордом, когда мы вместе разрабатывали программы Smalltalk в среде Smalltalk.
He существует способа определить первоначальный источник идей, если два человека обладают одним общим мозгом.
Если вы предположите, что все хорошие идеи на самом деле изначально придумал Уорд, вы не будете далеки от истины.&lt;/p&gt;
&lt;p&gt;My life as a real programmer started with patient mentoring from and continuing collaboration
with Ward Cunningham. Sometimes I see Test-Driven Development (TDD) as an attempt to
give any software engineer, working in any environment, the sense of comfort and intimacy
we had with our Smalltalk environment and our Smalltalk programs. There is no way to sort
out the source of ideas once two people have shared a brain. If you assume that all of the
good ideas here are Ward's, then you won't be far wrong.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id13"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Ну и Википедия о факторизации:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Factorization (or factoring) may also refer to more general decompositions of a mathematical object into the product of smaller or simpler objects.
For example, every function may be factored into the composition of a surjective function with an injective function.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Factorization"&gt;Factorization&lt;/a&gt;", Wikipedia&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Decomposition in computer science, also known as factoring, is breaking a complex problem or system into parts that are easier to conceive, understand, program, and maintain.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Decomposition_(computer_science)"&gt;Decomposition&lt;/a&gt;", Wikipedia&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;В математике факториза́ция или фа́кторинг — это декомпозиция объекта (например, числа, полинома или матрицы) в произведение других объектов или факторов, которые, будучи перемноженными, дают исходный объект.
Например, число 15 факторизуется на простые числа 3 и 5, а полином x2 − 4 факторизуется на (x − 2)(x + 2).
В результате факторизации во всех случаях получается произведение более простых объектов, чем исходный.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%A4%D0%B0%D0%BA%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F"&gt;Факторизация&lt;/a&gt;", Wikipedia&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Таким образом, рефакторинг - это способ управления сложностью программы, который делает программу более читаемой и понимаемой за счет декомпозиции сложности, что позволяет снизить нагрузку на человеческую память.
Процесс рефакторинга подобен факторизации математического выражения, в результате которого выводится более простое эквивалентное выражение, т.е. сохраняется функциональная идентичность.
Именно поэтому рефакторинг оставляет неизменным внешнее поведение системы:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Рефакторинг представляет собой процесс такого изменения программной системы, при котором не меняется внешнее поведение кода, но улучшается его внутренняя структура.&lt;/p&gt;
&lt;p&gt;Refactoring is the process of changing a software system in such a way that it does not alter the external behavior of the code yet improves its internal structure.&lt;/p&gt;
&lt;p class="attribution"&gt;—Martin Fowler in "Refactoring: Improving the Design of Existing Code" &lt;a class="footnote-reference brackets" href="#fnrefactoring" id="id14"&gt;5&lt;/a&gt;, перевод С. Маккавеева&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;TDD, как и рефакторинг, расщепляет сложность таким образом, чтобы минимизировать объем сложности, рассматриваемый разработчиком в единицу времени.
Это как песочные часы - одна песчинка в единицу времени.
Именно этим объясняется повышение темпов разработки при использовании TDD.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Каким образом можно модифицировать одну часть метода или объекта, состоящего из нескольких частей?
Вначале изолируйте изменяемую часть.
Мне приходит в голову аналогия с хирургической операцией: фактически все тело оперируемого пациента покрыто специальной простыней за исключением места, в котором, собственно, осуществляется операция.
&lt;strong&gt;Благодаря такому покрытию хирург имеет дело с фиксированным набором переменных.&lt;/strong&gt;
Перед выполнением операции врачи сколь угодно долго могут обсуждать, какое влияние на здоровье пациента оказывает тот или иной орган, однако во время операции внимание хирурга должно быть сфокусировано.&lt;/p&gt;
&lt;p&gt;How do you change one part of a multi-part method or object? First, isolate the part that has to change.
The picture that comes to my mind is surgery: The entire patient except the part to be operated on is draped.
&lt;strong&gt;The draping leaves the surgeon with only a fixed set of variables.&lt;/strong&gt;
Now, we could have long arguments over whether this abstraction of a person to a lower left quadrant abdomen leads to good health care, but at the moment of surgery, I'm kind of glad the surgeon can focus.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id15"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Несмотря на множество появившихся в последнее время мощных инструментов, программирование по-прежнему остается сложной работой.
Я часто ощущаю себя в ситуации, когда мне кажется, что я жонглирую шариками, и мне приходится следить за несколькими шариками в воздухе в одно и то же время: малейшая потеря внимания, и все сыпется на пол.
Методика TDD позволяет избавиться от этого ощущения.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Когда вы работаете в стиле TDD, в воздухе постоянно находится лишь один шарик.&lt;/strong&gt;
&lt;strong&gt;Вы можете сконцентрироваться на нем, а значит, хорошо справиться со своей работой.&lt;/strong&gt;
Когда я добавляю в программу новую функциональность, я не думаю о том, какой дизайн должен быть реализован в данной функции.
Я просто пытаюсь добиться срабатывания тестов самым простым из доступных мне способов.
Когда я переключаюсь в режим рефакторинга, я не беспокоюсь о добавлении в программу новых функций, я думаю только о правильном дизайне.
На каждом из этих этапов я концентрируюсь на единственной задаче, благодаря этому мое внимание не распыляется.&lt;/p&gt;
&lt;p&gt;Despite all the fancy tools that we have, programming is still hard.
I can remember many programming times when I feel like I was trying to keep several balls in the air at once, any lapse of concentration and everything would come tumbling down.
Test-driven development helps reduce that feeling, and as a result you get this rapid unhurriedness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I think the reason for this is that working in a test-driven development style gives you this sense of keeping just one ball in the air at once, so you can concentrate on that ball properly and do a really good job with it.&lt;/strong&gt;
When I'm trying to add some new functionality, I'm not worried about what really makes a good design for this piece of function, I'm just trying to get a test to pass as easily as I can.
When I switch to refactoring mode, I'm not worried about adding some new function, I'm just worried about getting the right design.
With both of these I'm just focused on one thing at a time, and as a result I can concentrate better on that one
thing.&lt;/p&gt;
&lt;p class="attribution"&gt;—Martin Fowler, Afterword, "Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id16"&gt;1&lt;/a&gt;, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Снижение количества дефектов приводит к возникновению множества вторичных психологических и социальных эффектов.
После того как я начал работать в стиле TDD, программирование стало для меня значительно менее нервным занятием.
&lt;strong&gt;Когда я работаю в стиле TDD, мне не надо беспокоиться о множестве вещей.&lt;/strong&gt;
&lt;strong&gt;Вначале я могу заставить paботать только один тест, потом — все остальные.&lt;/strong&gt;
Уровень стресса существенно снизился.
Взаимоотношения с партнерами по команде стали более позитивными.
Разработанный мною код перестал быть причиной сбоев, люди стали в большей степени рассчитывать на него.
У заказчиков тоже повысилось настроение.
Теперь выпуск очередной версии системы означает новую функциональность, а не набор новых дефектов, которые добавляются к уже существующим.&lt;/p&gt;
&lt;p&gt;Part of the effect certainly comes from reducing defects.
The sooner you find and fix a defect, the cheaper it is, often dramatically so (just ask the Mars Lander).
There are plenty of secondary psychological and social effects from reduced defects. My own practice of programming became much less stressful when I started with TDD.
&lt;strong&gt;No longer did I have to worry about everything at once.&lt;/strong&gt;
&lt;strong&gt;I could make this test run, and then all the rest.&lt;/strong&gt;
Relationships with my teammates became more positive.
I stopped breaking builds, andpeople could rely on my software to work.
Customers of my systems became more positive, too.
A new release of the system just meant more functionality, not a host of new defects to identify among all of their old favorite bugs.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id17"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Jason Gorman публиковал свою статистику прохождения кат как по TDD, так и без TDD (см. "Clean Architecture: A Craftsman's Guide to Software Structure and Design" &lt;a class="footnote-reference brackets" href="#fncarch" id="id18"&gt;4&lt;/a&gt; by Robert C. Martin).
TDD всегда оказывался существенно быстрее, причем, даже при многократном прохождении одних и тех же кат.&lt;/p&gt;
&lt;p&gt;Я перепроверял эту особенность на личном опыте, и убедился, что это действительно работает.&lt;/p&gt;
&lt;p&gt;Иногда можно слышать, что при TDD приходится больше кодировать.
Используя TDD, разработчик, действительно, вводит больше символов с клавиатуры.
Но суть в том, что во время кодирования, ввод символов с клавиатуры занимает, в лучшем случае, 10% времени.
А 90% времени занимает обдумывание.
Иногда мозгу сложно удержать все в голове, и разработчик берется за листочек и ручку.
При TDD, вместо листочка и ручки используется файловый редактор.
TDD позволяет сфокусировать мозг на минимально возможной единице сложности, которую можно рассмотреть изолированно, что приводит к перераспределению умственных ресурсов.
Кстати, именно это является одной из ключевых особенностей, благодаря которой, практикование TDD делает код чище.&lt;/p&gt;
&lt;p&gt;Если рефакторинг помогает сосредоточиться на одной обязанности, выполняемой функцией, то TDD идет еще дальше, и помогает сосредоточиться на одном конкретном значении функции, а значит, - на одном из ее внутренних состояний.
Это позволяет выводить алгоритм функции путем обобщения пересекаемых триангуляцией ее внутренних состояний (и поведений, производящих эти состояния).
А это, в свою очередь, позволяет моделировать поведение функции небольшими законченными фрагментами, удовлетворяющими конкретным значениям функции, и визуализировать формирование поведения функции прямо в редакторе.
Наглядно это демонстрируется на примере &lt;a class="reference download internal" download="" href="../../../_downloads/ab3bcac3e843b3925d3fa4bcadf08fbe/tdd-fibonacci.txt"&gt;&lt;code class="xref download docutils literal notranslate"&gt;&lt;span class="pre"&gt;выведения&lt;/span&gt; &lt;span class="pre"&gt;функции&lt;/span&gt; &lt;span class="pre"&gt;Фибоначи&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; в приложении книги, см. Appendix II. Fibonacci &lt;a class="footnote-reference brackets" href="#fntdd" id="id19"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Это еще один паттерн рефакторинга: &lt;strong&gt;разработать код, который работает с некоторым конкретным экземпляром, и обобщить этот код так, чтобы он мог работать со всеми остальными экземплярами&lt;/strong&gt;, для этого константы заменяются переменными.
В данном случае роль константы играет не некоторое значение, а жестко фиксированный код (имя конкретного метода).
Однако принцип остается одним и тем же.
В рамках TDD эта проблема решается очень легко: &lt;strong&gt;методика TDD снабжает вас конкретными работающими примерами, исходя из которых вы можете выполнить обобщение&lt;/strong&gt;.
Это значительно проще, чем выполнять обобщение исходя только из собственных умозаключений.&lt;/p&gt;
&lt;p&gt;Here is another general pattern of refactoring: &lt;strong&gt;take code that works in one instance and generalize it to work in many&lt;/strong&gt; by replacing constants with variables.
Here the constant was hardwired code, not a data value, but the principle is the same.
&lt;strong&gt;TDD makes this work well by giving you running concrete examples from which to generalize&lt;/strong&gt;, instead of having to generalize purely with reasoning.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id20"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Контроль над объемом работы.
Программисты привыкли пытаться предвидеть возникновение в будущем самых разнообразных проблем.
Если вы начинаете с конкретного примера и затем осуществляете &lt;strong&gt;обобщение кода&lt;/strong&gt;, это помогает вам избавиться от излишних опасений.
Вы можете &lt;strong&gt;сконцентрироваться на решении конкретной проблемы&lt;/strong&gt; и поэтому выполнить работу лучше.
При переходе к следующему тесту вы опять же концентрируетесь на нем, так как знаете, что предыдущий тест гарантированно работает.&lt;/p&gt;
&lt;p&gt;Scope control - Programmers are good at imagining all sorts of future problems.
Starting with one concrete example and &lt;strong&gt;generalizing&lt;/strong&gt; from there prevents you from prematurely confusing yourself with extraneous concerns.
You can do a better job of solving the immediate problem &lt;strong&gt;because you are focused&lt;/strong&gt;.
When you go to implement the next test case, you can focus on that one, too, knowing that the previous test is guaranteed to work.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id21"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Математическое объяснение этого явления можно найти в главе "1. Recurrent Problems : 1.1. The Tower of Hanoi" книги "Concrete Mathematics: A Foundation for Computer Science" 2nd edition by Ronald L. Graham, Donald E. Knuth, Oren Patashnik.&lt;/p&gt;
&lt;p&gt;Кроме того, при TDD хорошо отслеживается ниточка, за которую можно распутать клубок сложности, и вопрос "с какого конца подступиться" решается сам собой.&lt;/p&gt;
&lt;p&gt;При TDD Вы больше работаете пальцами, но меньше работаете головой. А поскольку 90% при кодировании занимает именно обдумывание, отсюда и бОльшее влияние на темпы разработки.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tdd-clean-code"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id35"&gt;TDD - основной катализатор Clean Code&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Каким образом тестирование улучшает качество кода?&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"The problem with testing code is that you have to isolate that code. It is often difficult to test a function if that function calls other functions.
To write that test you've got to figure out some way to decouple the function from all the others.
In other words, the need to test first forces you to think about good design.&lt;/p&gt;
&lt;p&gt;If you don't write your tests first, there is no force preventing you from coupling the functions together into an untestable mass.
If you write your tests later, you may be able to test the inputs and the outputs of the total mass, but it will probably be quite difficult to test the individual functions."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Coder" &lt;a class="footnote-reference brackets" href="#fnccoder" id="id22"&gt;2&lt;/a&gt; by Robert Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Однако, нужно учитывать:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Я сказал, что предположение наивное, однако, скорее всего, я преувеличил.
На самом деле наивно предполагать, что чистый код — это все, что необходимо для успеха.
Мне кажется, что хорошее проектирование — это лишь 20% успеха.
Безусловно, если проектирование будет плохим, вы можете быть на 100% уверены в том, что проект провалится.
Однако приемлемый дизайн сможет обеспечить успех проекта только в случае, если остальные 80% будут там, где им полагается быть.&lt;/p&gt;
&lt;p&gt;I say "naive," but that's perhaps overstating.
What's naive is assuming that clean code is all there is to success.
Good engineering is maybe 20 percent of a project's success.
Bad engineering will certainly sink projects, but modest engineering can enable project success as long as the other 80 percent lines up right.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id23"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id24"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id36"&gt;Влияние TDD на темпы разработки&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Я уже перечислял &lt;a class="reference external" href="https://emacsway.github.io/ru/it/agile/easily-about-agile-way-to-rapid-development/#self-testing-code-for-agile-ru"&gt;превосходства TDD для быстрой разработки&lt;/a&gt;, поэтому повторяться не буду.&lt;/p&gt;
&lt;p&gt;Однако, перечислю основные методики, которые используются для быстрой разработки:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Emergent Design&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Evolutionary (Incremental, Continuous) Design&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;YAGNI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Очевидная Реализация (Obvious Implementation)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Копирование Паттернов (Pattern Copying)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Первые два хорошо подходят для начинающих специалистов, поскольку они позволяют эффективно обрабатывать случаи неполной информированности.
Последние два - для опытных специалистов.&lt;/p&gt;
&lt;p&gt;Несмотря на то, что Martin Fowler (как редактор статьи Jim Shore) объединяет смысл Emergent Design и Continuous Design:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Continuous design is also known as evolutionary or emergent design.
I prefer the term continuous design because it emphasizes the core of the process: continuously taking advantage of opportunities to improve your design.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://www.martinfowler.com/ieeeSoftware/continuousDesign.pdf"&gt;Continuous Design&lt;/a&gt;" by Jim Shore&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Существует точка зрения, что они, все-таки, отличаются:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;We distinguish between emergent and evolutionary architecture, and this distinction is an important one.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://www.thoughtworks.com/insights/blog/microservices-evolutionary-architecture"&gt;Microservices as an Evolutionary Architecture&lt;/a&gt;" by Neal Ford, Rebecca Parsons&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="black-box-or-white-box"&gt;
&lt;span id="index-1"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id37"&gt;Black Box or White Box?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Тесты по возможности должны быть черным ящиком, т.е. тестируем поведение, а не реализацию.
Это позволяет безболезненно подменять реализацию при рефакторинге.
Опускаться в глубь реализации нужно тогда, когда это требуется для сокращения комбинаций условий тестирования, например, класс использует несколько подключаемых стратегий, и нам проще протестировать стратегии по одной.
Но при этом мы должны минимизировать зависимость от реализации.
Нарушение этого принципа, в сочетании со стремлением к высокому уровню покрытия кода тестами, накладывает на код оковы и ставит крест на дальнейшей эволюции программы.
Эту тему раскрывает Бек в первой и второй серии сериала "&lt;a class="reference external" href="https://martinfowler.com/articles/is-tdd-dead/"&gt;Is TDD dead?&lt;/a&gt;".&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;My personal practice - I mock almost nothing.
If I can't figure out how to test efficiently with the real stuff, I find another way of creating a feedback loop for myself.
I have to have feedback loop and the feedback loop has to be repeatable, but like I just don't go very far down the mock path.
I look at a code where you have mocks returning mocks returning mocks and my experience is if I use TDD I can refactor stuff.
And then I heard these stories people say well I use TDD and now I can't refactor anything and I feel like I couldn't understand that and I started looking at their tests well.
If you have mocks returning mocks returning mocks your test is completely coupled to the implementation, not the interface, but the exact implementation of some object you know three streets away.
Of course you can't change anything without breaking the test.
So that for me is too high a price to pay.
That's not a trade-off I'm willing to make just to get piecemeal development.&lt;/p&gt;
&lt;p class="attribution"&gt;—Kent Beck, "&lt;a class="reference external" href="https://youtu.be/z9quxZsLcfo?t=1269"&gt;Is TDD Dead? Part 1 at 21:10&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Думать об объектах, как о черных ящиках, достаточно тяжело.
Представим, что у нас есть объект Contract, состояние которого содержится в поле status, которое может принадлежать либо классу Offered, либо классу Running.
В этом случае можно написать тест, исходя из предполагаемой реализации:&lt;/p&gt;
&lt;div class="highlight-java notranslate" id="code-1-ru"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class="n"&gt;Contract&lt;/span&gt; &lt;span class="n"&gt;contract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// по умолчанию состояние Offered&lt;/span&gt;
&lt;span class="n"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// состояние меняется на Running&lt;/span&gt;
&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Этот тест слишком сильно зависит от текущей реализации объекта status.
Однако тест должен срабатывать даже в случае, если поле status станет булевским значением.
Может быть, когда status меняется на Running, можно протестировать дату начала работы над контрактом:&lt;/p&gt;
&lt;div class="highlight-java notranslate" id="code-2-ru"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(...,&lt;/span&gt; &lt;span class="n"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// генерирует исключение, если status равен Offered&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Я признаю, что пытаюсь плыть против течения, когда настаиваю на том, что все тесты должны быть написаны только с использованием публичного (public) протокола.
Существует специальный пакет JXUnit, который является расширением JUnit и позволяет тестировать значения переменных, даже тех, которые объявлены как закрытые.&lt;/p&gt;
&lt;p&gt;Желание протестировать объект в рамках концепции белого ящика — это не проблема тестирования, это проблема проектирования.
Каждый раз, когда у меня возникает желание протестировать значение переменной-члена для того, чтобы убедиться в работоспособности кода, я получаю возможность улучшить дизайн системы.
Если я забываю о своих опасениях и просто проверяю значение переменной, я теряю такую возможность.
Иначе говоря, если идея об улучшении дизайна не приходит мне в голову, ничего не поделаешь.
Я проверяю значение переменной, смахиваю непрошеную слезу, вношу соответствующую отметку в список задач и продолжаю двигаться вперед, надеясь, что наступит день, когда смогу найти подходящее решение.&lt;/p&gt;
&lt;p&gt;Thinking about objects as black boxes is hard. If I have a Contract with a Status that can be an instance of either Offered or Running , I might feel like writing a test based on my expected implementation:&lt;/p&gt;
&lt;div class="highlight-java notranslate" id="code-1-en"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class="n"&gt;Contract&lt;/span&gt; &lt;span class="n"&gt;contract&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Offered status by default&lt;/span&gt;
&lt;span class="n"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Changes status to Running&lt;/span&gt;
&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;This test is too dependent on the current implementation of status.
The test should pass even if the representation of status changed to a boolean.
Perhaps once the status changes to Running, it is possible to ask for the actual start date.&lt;/p&gt;
&lt;div class="highlight-java notranslate" id="code-2-en"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(...,&lt;/span&gt; &lt;span class="n"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Throws an exception if the status is Offered&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;I'm aware that I am swimming against the tide in insisting that all tests be written using only public protocol.
There is even a package that extends JUnit called JXUnit, which allows testing the value of variables, even those declared private.&lt;/p&gt;
&lt;p&gt;Wishing for white box testing is not a testing problem, it is a design problem.
Anytime I want to use a variable as a way of checking to see whether code ran correctly or not, I have an opportunity to improve the design.
If I give in to my fear and just check the variable, then I lose that opportunity.
That said, if the design idea doesn't come, it doesn't come. I'll check the variable, shed a tear, make a note to come back on one of my smarter days, and move on.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id25"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Взгляд на тестирование в рамках TDD прагматичен.
В TDD тесты являются средством достижения цели.
Целью является код, в корректности которого мы в достаточной степени уверены.
Если знание особенностей реализации без какого-либо теста дает нам уверенность в том, что код работает правильно, мы не будем писать тест.
Тестирование черного ящика (когда мы намеренно игнорируем реализацию) обладает рядом преимуществ.
Если мы игнорируем код, мы наблюдаем другую систему ценностей: тесты сами по себе представляют для нас ценность.
В некоторых ситуациях это вполне оправданный подход, однако он отличается от TDD.&lt;/p&gt;
&lt;p&gt;TDD's view of testing is pragmatic.
In TDD, the tests are a means to an end—the end being code in which we have great confidence.
If our knowledge of the implementation gives us confidence even without a test, then we will not write that test.
Black box testing, where we deliberately choose to ignore the implementation, has some advantages.
By ignoring the code, it demonstrates a different value system—the tests are valuable alone.
It's an appropriate attitude to take in some circumstances, but that is different from TDD.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id26"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Many people make bad trade-offs, especially with heavy mocking.
Kent thinks it's about trade-offs: is it worth making intermediate results testable?
He used the example of a compiler where an intermediate parse-tree makes a good test point, and is also a better design.&lt;/p&gt;
&lt;p class="attribution"&gt;—Kent Beck, "&lt;a class="reference external" href="https://martinfowler.com/articles/is-tdd-dead/"&gt;Is TDD Dead?&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Separate interface from implementation thinking.
I have a tendency to pollute API design decisions with implementation speculation.
I need to find a new way to separate the two levels of thinking while still providing rapid feedback between them.&lt;/p&gt;
&lt;p class="attribution"&gt;—Kent Beck, "&lt;a class="reference external" href="https://www.facebook.com/notes/kent-beck/rip-tdd/750840194948847/"&gt;RIP TDD&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Структурная зависимость&lt;/p&gt;
&lt;p&gt;Структурная зависимость - одна из самых сильных и наиболее коварных форм зависимости тестов.
Представьте набор тестов, в котором имеются тестовые классы для всех прикладных классов и тестовые методы для всех прикладных методов.
Такой набор очень тесно связан со структурой приложения.&lt;/p&gt;
&lt;p&gt;Изменение в одном из прикладных методов или классов может повлечь необходимость изменить большое количество тестов.
Следовательно, тесты слишком хрупкие и могут сделать прикладной код слишком жестким.&lt;/p&gt;
&lt;p&gt;Роль API тестирования - скрыть структуру приложения от тестов.
Это позволит развивать прикладной код, не влияя на тесты. Это также позволит развивать тесты, не влияя на прикладной код.&lt;/p&gt;
&lt;p&gt;Такая возможность независимого развития абсолютно необходима, потому что с течением времени тесты становятся все более конкретными, а прикладной код, напротив, — все более абстрактным и обобщенным.
Тесная структурная зависимость препятствует такому развитию - или, по меньшей мере, затрудняет его - и мешает прикладному коду становиться все более обобщенным и гибким.&lt;/p&gt;
&lt;p&gt;STRUCTURAL COUPLING&lt;/p&gt;
&lt;p&gt;Structural coupling is one of the strongest, and most insidious, forms of test coupling.
Imagine a test suite that has a test class for every production class, and a set of test methods for every production method.
Such a test suite is deeply coupled to the structure of the application.&lt;/p&gt;
&lt;p&gt;When one of those production methods or classes changes, a large number of tests must change as well.
Consequently, the tests are fragile, and they make the production code rigid.&lt;/p&gt;
&lt;p&gt;The role of the testing API is to hide the structure of the application from the tests.&lt;/p&gt;
&lt;p&gt;This allows the production code to be refactored and evolved in ways that don't affect the tests.
It also allows the tests to be refactored and evolved in ways that don't affect the production code.&lt;/p&gt;
&lt;p&gt;This separation of evolution is necessary because as time passes, the tests tend to become increasingly more concrete and specific.
In contrast, the production code tends to become increasingly more abstract and general.
Strong structural coupling prevents - or at least impedes - this necessary evolution, and prevents the production code from being as general, and flexible, as it could be.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Architecture: A Craftsman's Guide to Software Structure and Design" &lt;a class="footnote-reference brackets" href="#fncarch" id="id27"&gt;4&lt;/a&gt; by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"Mock across architecturally significant boundaries, but not within those boundaries."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://blog.cleancoder.com/uncle-bob/2014/05/10/WhenToMock.html"&gt;When to Mock&lt;/a&gt;" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="sociable-or-solitary"&gt;
&lt;span id="index-2"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id38"&gt;Sociable or Solitary?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Наверное, самое часто заблуждение, которое мне приходилось слышать, это то, тесты должны быть полностью изолированы, и должны взаимодействовать только с &lt;a class="reference external" href="https://martinfowler.com/bliki/TestDouble.html"&gt;дублерами&lt;/a&gt;.
Этот вопрос известен как "Solitary or Sociable?".&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Indeed using sociable unit tests was one of the reasons we were criticized for our use of the term "unit testing". I think that the term "unit testing" is appropriate because these tests are tests of the behavior of a single unit. We write the tests assuming everything other than that unit is working correctly.&lt;/p&gt;
&lt;p&gt;As xunit testing became more popular in the 2000's the notion of solitary tests came back, at least for some people. We saw the rise of Mock Objects and frameworks to support mocking. Two schools of xunit testing developed, which I call the classic and mockist styles. One of the differences between the two styles is that mockists insist upon solitary unit tests, while classicists prefer sociable tests. Today I know and respect xunit testers of both styles &lt;strong&gt;(personally I've stayed with classic style)&lt;/strong&gt;.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/bliki/UnitTest.html#SolitaryOrSociable"&gt;Unit Test&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;At the end of the day it's not important to decide if you go for solitary or sociable unit tests. Writing automated tests is what's important. Personally, I find myself using both approaches all the time.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/practical-test-pyramid.html#SociableAndSolitary"&gt;The Practical Test Pyramid&lt;/a&gt;" by Ham Vocke with support of Martin Fowler.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;TestDrivenDevelopment produces Developer Tests. The failure of a test case implicates only the developer's most recent edit. &lt;strong&gt;This implies that developers don't need to use Mock Objects to split all their code up into testable units&lt;/strong&gt;. And it implies a developer may always avoid debugging by reverting that last edit.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://wiki.c2.com/?UnitTest"&gt;Unit Test&lt;/a&gt;" on c2.com&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Недостатки и достоинства обоих подходов описаны в статье "&lt;a class="reference external" href="https://martinfowler.com/articles/mocksArentStubs.html"&gt;Mocks Aren't Stubs&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;Мнение самого основателя TDD:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"My personal practice - I mock almost nothing."&lt;/p&gt;
&lt;p class="attribution"&gt;—Kent Beck, "&lt;a class="reference external" href="https://youtu.be/z9quxZsLcfo?t=1269"&gt;Is TDD Dead? Part 1 at 21:10&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Лично я считаю что нужно ограничивать использование современных средства мокирования, активно эксплуатирующих Monkey Patch,  поскольку они позволяют создавать и тестировать низкокачественный код.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tdd-design-patterns"&gt;
&lt;span id="index-3"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id39"&gt;TDD и Design Patterns&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Почему-то многие начинающие программисты, не знакомые с первоисточниками по TDD, думают, что TDD подразумевает только Evolutionary Design, а Simple Design противопоставляется паттернам программирования.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Я обратил внимание на один важный эффект, который, я надеюсь, смогут принять во внимание и другие.
Если на основе постоянно повторяющихся действий формулируются правила, дальнейшее применение этих правил становится неосознанным и автоматическим.
Естественно, ведь это проще, чем обдумывать все за и все против того или иного действия с самого начала.
Благодаря этому повышается скорость работы, и если в дальнейшем вы сталкиваетесь с исключением или проблемой, которая не вписывается ни в какие правила, у вас появляется дополнительное время и энергия для того, чтобы в полной мере применить свои творческие способности.&lt;/p&gt;
&lt;p&gt;Именно это произошло со мной, когда я писал книгу Smalltalk Best Practice Patterns (Лучшие паттерны Smalltalk).
В какой-то момент я решил просто следовать правилам, описываемым в моей книге.
В начале это несколько замедлило скорость моей работы, — мне требовалось дополнительное время, чтобы вспомнить то или иное правило, или написать новое правило.
Однако по прошествии недели я заметил, что с моих пальцев почти мгновенно слетает код, над разработкой которого ранее мне приходилось некоторое время размышлять.
Благодаря этому у меня появилось дополнительное время для анализа и важных размышлений о дизайне.&lt;/p&gt;
&lt;p&gt;Существует еще одна связь между TDD и паттернами: TDD является методом реализации дизайна, основанного на паттернах.
Предположим, что в определенном месте разрабатываемой системы мы хотим реализовать паттерн Strategy (Стратегия).
Мы пишем тест для первого варианта и реализуем его, создав метод.
После этого мы намеренно пишем тест для второго варианта, ожидая, что на стадии рефакторинга мы придем к паттерну Strategy (Стратегия).
Мы с Робертом Мартином (Robert Martin) занимались исследованием подобного стиля TDD.
Проблема состоит в том, что дизайн продолжает вас удивлять.
Идеи, которые на первый взгляд кажутся вам вполне уместными, позже оказываются неправильными.
Поэтому я не рекомендую целиком и полностью доверять своим предчувствиям относительно паттернов.
Лучше думайте о том, что, по-вашему, должна делать система, позвольте дизайну оформиться так, как это необходимо.&lt;/p&gt;
&lt;p&gt;The effect that I have noticed, and which I hope others find, is that by reducing repeatable behavior to rules, applying the rules becomes rote and mechanical.
This is quicker than redebating everything from first principles all the time.
When along comes an exception, or a problem that just doesn't fit any of the rules, you have more time and energy to generate and apply creativity.&lt;/p&gt;
&lt;p&gt;This happened to me when writing the Smalltalk Best Practice Patterns.
At some point I decided just to follow the rules I was writing.
It was much slower at first, to be looking up the rules, or to be stopping to write a new rule.
After a week, however, I discovered that code was ripping off my fingertips that would have required a pause for thought before.
This gave me more time and attention for bigger thoughts about design and analysis.
Another relationship between TDD and patterns is TDD as an implementation method for pattern-driven design.
Say we decide we want a Strategy for something.
We write a test for the first variant and implement it as a method.
Then we consciously write a test for the second variant, expecting the refactoring phase to drive us to a Strategy.
Robert Martin and I did some research into this style of TDD.
The problem is that the design keeps surprising you.
Perfectly sensible design ideas turn out to be wrong.
Better just to think about what you want the system to do, and let the design sort itself out later.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id28"&gt;1&lt;/a&gt; by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Добавление новой функциональности при помощи тестов и рефакторинг — это две монологические разновидности программирования.
Совсем недавно я открыл еще одну разновидность: копирование паттерна.
Я занимался разработкой сценария на языке Ruby, выполняющего извлечение информации из базы данных.
Я начал с создания класса, являющегося оболочкой таблицы базы данных, а затем сказал себе, что раз я только что закончил книгу о паттернах работы с базами данных, я должен использовать паттерн.
Примеры программ в книге были написаны на Java, поэтому нужный мне код легко можно было перенести на Ruby.
Когда я программировал, я не думал о решении проблемы, я думал лишь о том, каким образом лучше всего адаптировать паттерн для условий, в рамках которых я работал.&lt;/p&gt;
&lt;p&gt;Копирование паттернов само по себе не является хорошим программированием, — я всегда подчеркиваю этот факт, когда говорю о паттернах.
Любой паттерн — это полуфабрикат, — вы должны адаптировать его для условий своего проекта.
Однако чтобы сделать это, лучше всего вначале, особо не задумываясь, скопировать паттерн, а затем, воспользовавшись смесью рефакторинга и TDD, выполнить адаптацию.
В этом случае в процессе копирования паттерна вы также концентрируетесь только на одной вещи — на паттерне.
Сообщество ХР интенсивно работает над тем, чтобы добавить в общую картину паттерны.
Со всей очевидностью можно сказать, что сообщество ХР любит паттерны.
В конце концов, между множеством приверженцев ХР и множеством приверженцев паттернов существует значительное пересечение: Уорд и Кент являются лидерами обоих направлений.
Наверное, копирование паттерна — это третий монологический режим программирования наряду с разработкой в стиле "тесты вначале" и рефакторингом.
Как и первые два режима, копирование паттерна — опасная штука, если ее использовать отдельно от двух других режимов.
Все три вида программирования проявляют свою мощь только тогда, когда используются совместно друг с другом.&lt;/p&gt;
&lt;p&gt;Adding features test-first and refactoring are two of these monological flavors of programming.
At a recent stint at the keyboard I experienced another one: pattern copying.
I was writing a little Ruby script that pulled some data out of a database.
As I did this I started on a class to wrap the database table and thought to myself that since I'd just finished off a book of database patterns I should use a pattern.
Although the sample code was Java, it wasn't difficult to adapt it to Ruby.
While I programmed it I didn't really think about the problem, I just thought about making a fair adaptation of the pattern to the language and specific data I was manipulating.
Pattern copying on its own isn't good programming—a fact I always stress when talking about patterns.
Patterns are always half baked, and need to be adapted in the oven of your own project.
But a good way to do this is to first copy the pattern fairly blindly, and then use some mix of refactoring or test-first, to perform the adaptation.
That way when you're doing the pattern-copying, you can concentrate on just the pattern—one thing at a time.
The XP community has struggled with where patterns fit into the picture.
Clearly the XP community is in favor of patterns, after all there is huge intersection between XP advocates and patterns advocates — Ward and Kent were leaders in both.
Perhaps pattern copying is a third monological mode to go with test-first and refactoring, and like those two is dangerous on its own but powerful in concert.&lt;/p&gt;
&lt;p class="attribution"&gt;—Martin Fowler, Afterword, "Test-Driven Development By Example" &lt;a class="footnote-reference brackets" href="#fntdd" id="id29"&gt;1&lt;/a&gt;, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Patterns and XP&lt;/p&gt;
&lt;p&gt;The JUnit example leads me inevitably into bringing up patterns. The relationship between patterns and XP is interesting, and it's a common question. Joshua Kerievsky argues that patterns are under-emphasized in XP and he makes the argument eloquently, so I don't want to repeat that. But it's worth bearing in mind that for many people patterns seem in conflict to XP.&lt;/p&gt;
&lt;p&gt;The essence of this argument is that patterns are often over-used. The world is full of the legendary programmer, fresh off his first reading of GOF who includes sixteen patterns in 32 lines of code. I remember one evening, fueled by a very nice single malt, running through with Kent a paper to be called "Not Design Patterns: 23 cheap tricks" We were thinking of such things as use an if statement rather than a strategy. The joke had a point, patterns are often overused, but that doesn't make them a bad idea. The question is how you use them.&lt;/p&gt;
&lt;p&gt;One theory of this is that the forces of simple design will lead you into the patterns. Many refactorings do this explicitly, but even without them by following the rules of simple design you will come up with the patterns even if you don't know them already. This may be true, but is it really the best way of doing it? Surely it's better if you know roughly where you're going and have a book that can help you through the issues instead of having to invent it all yourself. I certainly still reach for GOF whenever I feel a pattern coming on. For me effective design argues that we need to know the price of a pattern is worth paying - that's its own skill. Similarly, as Joshua suggests, we need to be more familiar about how to ease into a pattern gradually. In this regard XP treats the way we use patterns differently to the way some people use them, but certainly doesn't remove their value.&lt;/p&gt;
&lt;p&gt;But reading some of the mailing lists I get the distinct sense that many people see XP as discouraging patterns, despite the irony that most of the proponents of XP were leaders of the patterns movement too. Is this because they have seen beyond patterns, or because patterns are so embedded in their thinking that they no longer realize it? I don't know the answers for others, but for me patterns are still vitally important. XP may be a process for development, but patterns are a backbone of design knowledge, knowledge that is valuable whatever your process may be. Different processes may use patterns in different ways. XP emphasizes both not using a pattern until it's needed and evolving your way into a pattern via a simple implementation. But patterns are still a key piece of knowledge to acquire.&lt;/p&gt;
&lt;p&gt;My advice to XPers using patterns would be&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Invest time in learning about patterns&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Concentrate on when to apply the pattern (not too early)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Concentrate on how to implement the pattern in its simplest form first, then add complexity later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you put a pattern in, and later realize that it isn't pulling its weight - don't be afraid to take it out again.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think XP should emphasize learning about patterns more. I'm not sure how I would fit that into XP's practices, but I'm sure Kent can come up with a way.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/designDead.html#PatternsAndXp"&gt;Is Design Dead?&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Смотрите так же:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;XP and Patterns Ralph Johnson's View:  &lt;a class="reference external" href="http://objectclub.jp/community/XP-jp/xp_relate/xp_patterns"&gt;http://objectclub.jp/community/XP-jp/xp_relate/xp_patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Joshua Kerievsky, Patterns &amp;amp; XP: &lt;a class="reference external" href="http://www.industriallogic.com/xp/PatternsAndXP.pdf"&gt;http://www.industriallogic.com/xp/PatternsAndXP.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="one-assertion-per-test"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id40"&gt;One assertion per test?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Я часто слышу это распространенное убеждение, что один тестовый метод должен содержать только одно утверждение (assertion) и не больше.
И это интересно, потому что Кент Бек этому правилу не очень-то и следует, что заставило меня найти первоисточник этого убеждения.
Источник я нашел, и он, действительно, авторитетный - это "xUnit Test Patterns. Refactoring Test Code." by Gerard Meszaros, глава "Principle: Verify One Condition per Test", но там есть кое-что еще, о чем это широко распространенное убеждение умалчивает:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;One possibly contentious aspect of "Verify One Condition per Test" is what we mean by "one condition."
Some test drivers insist on one assertion per test.
This insistence may be based on using a "Testcase Class per Fixture" organization
of the "Test Methods" and naming each test based on what the one assertion is verifying.
(For example, AwaitingApprovalFlight.validApproverRequestShouldBeApproved.)
Having one assertion per test makes such naming very easy but also leads to many more test methods if we have to assert on many output fi elds.
Of course, we can often comply with this interpretation by extracting a "Custom Assertion" (page 474)
or "Verification Method" (see "Custom Assertion") that allows us to reduce the multiple assertion method calls to a single call.
Sometimes that approach makes the test more readable.
When it doesn't, I wouldn't be too dogmatic about insisting on a single assertion.&lt;/p&gt;
&lt;p class="attribution"&gt;—"xUnit Test Patterns. Refactoring Test Code." by Gerard Meszaros&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Эту же тему рассматривает и Robert C. Martin в главе "Chapter 9: Unit Tests :: One Assert per Test" книги "Clean Code: A Handbook of Agile Software Craftsmanship":&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Я думаю, что правило "одного assert" является хорошей рекомендацией.
Обычно я стараюсь создать предметно-ориентированный язык тестирования, который это правило поддерживает, как в листинге 9.5.
Но при этом я не боюсь включать в свои тесты более одной директивы assert.
Вероятно, лучше всего сказать, что количество директив assert в тесте должно быть сведено к минимуму.&lt;/p&gt;
&lt;p&gt;I think the single assert rule is a good guideline.
I usually try to create a domainspeciﬁc testing language that supports it, as in Listing 9-5.
But I am not afraid to put more than one assert in a test.
I think the best thing we can say is that the number of asserts in a test ought to be minimized.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Code: A Handbook of Agile Software Craftsmanship" &lt;a class="footnote-reference brackets" href="#fnccode" id="id30"&gt;3&lt;/a&gt; by Robert C. Martin, перевод Е. Матвеев&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Здесь он отсылает к статье "&lt;a class="reference external" href="https://www.artima.com/weblogs/viewpost.jsp?thread=35578"&gt;One Assertion Per Test&lt;/a&gt;" by Dave Astels в качестве первоисточника.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="fntdd"&gt;&lt;span class="brackets"&gt;1&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id3"&gt;1&lt;/a&gt;,&lt;a href="#id4"&gt;2&lt;/a&gt;,&lt;a href="#id5"&gt;3&lt;/a&gt;,&lt;a href="#id6"&gt;4&lt;/a&gt;,&lt;a href="#id7"&gt;5&lt;/a&gt;,&lt;a href="#id10"&gt;6&lt;/a&gt;,&lt;a href="#id12"&gt;7&lt;/a&gt;,&lt;a href="#id13"&gt;8&lt;/a&gt;,&lt;a href="#id15"&gt;9&lt;/a&gt;,&lt;a href="#id16"&gt;10&lt;/a&gt;,&lt;a href="#id17"&gt;11&lt;/a&gt;,&lt;a href="#id19"&gt;12&lt;/a&gt;,&lt;a href="#id20"&gt;13&lt;/a&gt;,&lt;a href="#id21"&gt;14&lt;/a&gt;,&lt;a href="#id23"&gt;15&lt;/a&gt;,&lt;a href="#id25"&gt;16&lt;/a&gt;,&lt;a href="#id26"&gt;17&lt;/a&gt;,&lt;a href="#id28"&gt;18&lt;/a&gt;,&lt;a href="#id29"&gt;19&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"Test-Driven Development By Example" by Kent Beck&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnccoder"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id22"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"The Clean Coder: a code of conduct for professional programmers" by Robert C. Martin&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnccode"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id30"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"Clean Code: A Handbook of Agile Software Craftsmanship" by Robert C. Martin&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fncarch"&gt;&lt;span class="brackets"&gt;4&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id18"&gt;1&lt;/a&gt;,&lt;a href="#id27"&gt;2&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fnrefactoring"&gt;&lt;span class="brackets"&gt;5&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="#id9"&gt;1&lt;/a&gt;,&lt;a href="#id11"&gt;2&lt;/a&gt;,&lt;a href="#id14"&gt;3&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;"Refactoring: Improving the Design of Existing Code" by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Список литературы для самообучения разработчика программного обеспечения</title><link>https://dckms.github.io/system-architecture/emacsway/it/self-education/self-education-for-software-engineer.html</link><description>&lt;span class="target" id="index-0"/&gt;&lt;div class="section" id="emacsway-self-education-literature"&gt;
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Один из частых вопросов, который я наблюдаю регулярно, - это "посоветуйте список литературы в области разработки программного обеспечения".
В этой статье я изложу свое видение самообучения и приведу список тематической литературы, с учетом моего личного опыта.&lt;/p&gt;
&lt;div class="contents topic" id="id2"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#emacsway-self-education-literature" id="id39"&gt;Список литературы для самообучения разработчика программного обеспечения&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id40"&gt;Предисловие&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id41"&gt;Кандидатский минимум&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id5" id="id42"&gt;Учимся обучению&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id6" id="id43"&gt;Изучаем основную используемую технологию&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id7" id="id44"&gt;Азбука программирования&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id8" id="id45"&gt;Учимся быть эффективным&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id9" id="id46"&gt;Учимся делать команду эффективной&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id10" id="id47"&gt;Изучаем операционную систему&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id11" id="id48"&gt;Изучаем основы алгоритмов и структур данных&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id12" id="id49"&gt;Изучаем математику&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id13" id="id50"&gt;Учимся архитектуре&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id14" id="id51"&gt;Изучаем распределенные системы&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id15" id="id52"&gt;Изучаем распределенные системы. Углубляем навыки.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ddd" id="id53"&gt;Изучаем DDD&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id16" id="id54"&gt;Статьи на частые вопросы по DDD&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#aggregate-domain-modeling" id="id55"&gt;Aggregate &amp;amp; Domain Modeling&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#cqrs-event-sourcing" id="id56"&gt;CQRS &amp;amp; Event Sourcing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#bounded-context-and-microservices" id="id57"&gt;Bounded Context and Microservices&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#domain-events" id="id58"&gt;Domain Events&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#api-design" id="id59"&gt;API-Design&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#event-storming" id="id60"&gt;Event Storming&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#modelling" id="id61"&gt;Modelling&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id17" id="id62"&gt;Дополнительная литература (на выбор)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#sdls" id="id63"&gt;SDLS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#single-team-agile" id="id64"&gt;Single-Team Agile&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#scaled-agile" id="id65"&gt;Scaled Agile&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id18" id="id66"&gt;Стандарты&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id19" id="id67"&gt;Менеджмент&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id20" id="id68"&gt;Развитие личностных профессиональных качеств&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id21" id="id69"&gt;Базы данных&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id22" id="id70"&gt;Изучаем распределенные системы. Третий заход.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id23" id="id71"&gt;API-Design&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#streaming-processing" id="id72"&gt;Streaming Processing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id24" id="id73"&gt;Углубляем DDD&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id25" id="id74"&gt;Изучаем проектирование&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#posa" id="id75"&gt;POSA&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id26" id="id76"&gt;Алгоритмы. Второй заход.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id27" id="id77"&gt;Тестирование&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id28" id="id78"&gt;Компиляторы&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id29" id="id79"&gt;Архитектура&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id30" id="id80"&gt;Аналитика&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id31" id="id81"&gt;Изучаем оценивание задач&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id32" id="id82"&gt;Функциональное программирование&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id33" id="id83"&gt;Справочники&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id34" id="id84"&gt;Справочная информация&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#body-of-knowledge" id="id85"&gt;Body of Knowledge&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id35" id="id86"&gt;ГОСТы&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#online" id="id87"&gt;Online-каталоги&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#code-smell-catalogs" id="id88"&gt;Code Smell catalogs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id36" id="id89"&gt;Другие подборки литературы&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id37" id="id90"&gt;Почтовые рассылки и сообщества&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#reference-applications-ru" id="id91"&gt;Эталонные демонстрационные приложения&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id40"&gt;Предисловие&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Классическая ошибка новичков - жажда к знаниям, нетерпеливость.
Обычно это приводит к тому, что, в погоне за количеством, они &lt;a class="reference internal" href="../../soft-skills/planning-in-psychology.html"&gt;&lt;span class="doc"&gt;надрываются&lt;/span&gt;&lt;/a&gt; (объем знаний, который предстоит освоить, действительно, огромный), осознают невыполнимость желаемого, впадают в депрессию, а затем и в состояние &lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D1%89%D0%B8%D1%82%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%B7%D0%BC"&gt;психологической защиты&lt;/a&gt; (мол, "академичность" неуместна на практике), и прекращают развиваться.
Решается эта проблема очень просто - жажда должна быть не к знаниям, а к дисциплине.
А уж дисциплина обязательно приведет к обретению знаний.
Дисциплина - это, своего рода, производная знаний.
Она поддерживает постоянную скорость на пути освоения знаний.
Сперва нужно выработать привычку, а затем привычка будет работать на вас.
Как говорится, сохраняйте порядок, и порядок сохранит вас.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "I'm not a great programmer; I'm just a good programmer with great habits."&lt;/p&gt;
&lt;p class="attribution"&gt;—Kent Beck at "Refactoring: Improving the Design of Existing Code" 1st edition by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Достаточно читать по 5 страниц в день.
Тут главное - стабильность.
Пусть будет по чуть-чуть, но постоянно.
Дисциплина - мать победы, говорил А.В. Суворов.
Гнаться за количеством не нужно.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"A little reading goes a long way toward professional advancement. If you read even one
good programming book every two months, roughly 35 pages a week, you'll soon have
a firm grasp on the industry and distinguish yourself from nearly everyone around you."&lt;/p&gt;
&lt;p&gt;- "Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"We become authorities and experts in the practical and scientific spheres
by so many separate acts and hours of work.
If a person keeps faithfully busy each hour of the working day,
he can count on waking up some morning to find himself one of the competent
ones of his generation."&lt;/p&gt;
&lt;p&gt;- William James, cited by Steve McConnell in "Code Complete"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;И, желательно, чтобы читаемая книга совпадала с тематикой текущего проекта, чтобы через практику хорошо легла в память.
Я по этой причине часто изменял свой график чтения.
Обычно я читал в параллели 2-3 книги. Одну - планово, другие - по потребностям проекта.&lt;/p&gt;
&lt;p&gt;Еще одной ошибкой является неудачный выбор литературы.
Сегодня штампуется много литературы, но далеко не каждая книга достойна внимания.
&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BA%D0%BE%D0%BD_%D0%9F%D0%B0%D1%80%D0%B5%D1%82%D0%BE"&gt;Закон Парето&lt;/a&gt; работает и здесь.&lt;/p&gt;
&lt;p&gt;Хорошей вещью для систематизации собственных знаний является написание статей и участие в профессиональных дискуссиях.
Ничто так не систематизирует собственные знания, как попытка объяснить что-то другому человеку.
Вы, конечно, будете периодически ошибаться, но для кристализации знаний это лучше, чем ничего не делать.
К тому же, это хорошо развивает сдержанность в аргументации, что немаловажно.&lt;/p&gt;
&lt;p&gt;На первых порах критически важно участвовать в Open Source проектах.
Можно завести свои собственные Open Source проекты.
Можно принимать участие в каких-то существующих проектах с авторитетными комьюнити, которые будут помогать избавляться от ошибок.
В любом случае, не надейтесь на то, что профессиональные проекты предоставят вам достаточную практику для закрепления знаний.
А Open Source проекты - очень даже предоставят.
Я даже считаю, что практика должна предшествовать теории, потому что трудно запомнить какое-то решение, если вам на практике не знакома решаемая проблема.
Потребность в теории должна назреть.
Когда я приступал к теории, то у меня был накоплен уже солидный багаж проблем, решение которых я искал.
Когда я впервые прочитал о мотивации паттерна Bridge, у меня в голове промелькнуло: "так вот, оказывается, как решается та самая проблема".
Когда я читал каталог Code Smells, я частенько вспоминал свой код.
В результате, решения навечно запечатлелись в памяти.&lt;/p&gt;
&lt;p&gt;Очень правильно &lt;a class="reference external" href="https://sergeyteplyakov.blogspot.com/2017/02/reading-books-considered-harmful.html"&gt;сказал&lt;/a&gt; Сергей Тепляков: "Полноценное обучение – это не теория vs. практика. Это комбинация этих вещей, при этом процент одного и другого зависит от человека и изучаемой темы."&lt;/p&gt;
&lt;p&gt;Ну и, главное, не впадать в фанатизм.
Засасывает.
Нужно себя уравновешивать другими интересами, семья, спорт, физкультура, шашлыки, друзья, путешествия...
Непредвзятый и свободный взгляд намного важнее изобилия знаний.
Путешествие должно быть на легке, как говорил Кент Бек.
По сути, знания нужны только для того, чтобы избавиться от всего лишнего.
Архитектура - это, на самом деле, наука об ограничениях (т.е. о том, как не надо делать).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id41"&gt;Кандидатский минимум&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id42"&gt;Учимся обучению&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Это может показаться немного удивительным, но первая книга будет посвящена не техническим знаниям, а вопросам самоорганизации, управления временем, психологии, методикам работы под стрессом, оцеванию задач по разработке программного обеспечения, вопросам коммуникации и поведению в конфликтных ситуациях, и, самое главное, - науке быть правдивым.
Именно правдивость является важнейшим отличительным признаком настоящего профессионала.
И это не так просто, как может показаться на первый взгляд.
Есть разница между кодером и профессионалом.
И эта книга о том, как стать профессионалом.
Без знаний, изложенных в этой книге, вы просто не сможете изыскать время на самообучение, и список остальных книг вам может просто не понадобиться:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"The Clean Coder" by Robert C. Martin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id43"&gt;Изучаем основную используемую технологию&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Следующая книга должна быть посвящена основной используемой технологии, т.е. синтаксическим возможностям языка программирования.
Для Python-разработчиков хорошим выбором была бы книга:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Learning Python" 5th edition by Mark Lutz&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для Golang интересно выглядят книги:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Hands-On Software Architecture with Golang. Design and architect highly scalable and robust applications using Go" by Jyotiswarup Raiturkar&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Go Programming Language" by Alan A.A. Donovan Google Inc., Brian W. Kernighan Princeton University&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для Erlang:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Programming Erlang: Software for a Concurrent World (Pragmatic Programmers)" 2nd edition by Joe Armstrong&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для frontend-разработчиков, работающих с Angular, имеет смысл обратить внимание на книгу:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"ng-book2. The Complete Book on Angular 6" by Nate Murray, Felipe Coury, Ari Lerner, and Carlos Taborda&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id44"&gt;Азбука программирования&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Подразумевается что вы уже хорошо знаете синтаксис основного языка программирования.
Но, знание букв еще не делает вас поэтом.
Следующие книги являются азбукой программирования.
Я привожу их в таком порядке, в каком я рекомендую их прочтение:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Design Patterns: Elements of Reusable Object-Oriented Software" by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Patterns of Enterprise Application Architecture" by Martin Fowler, David Rice, Matthew Foemmel, Edward Hieatt, Robert Mee, Randy Stafford&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Refactoring: Improving the Design of Existing Code" 1st edition by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Clean Code: A Handbook of Agile Software Craftsmanship" by Robert C. Martin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Code Complete" 2nd edition by Steve McConnell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"UML Distilled. A Brief Guide to the Standard Object Modeling Language" 3d edition by Martin Fowler&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://people.apache.org/~fhanik/kiss.html"&gt;KISS Principles&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id45"&gt;Учимся быть эффективным&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Знаний предыдущих пяти книг достаточно для того, чтобы вы стали работать в разы эффективней.
Но нужно не только знать, а еще и &lt;a class="reference internal" href="../tdd/tdd.html"&gt;&lt;span class="doc"&gt;уметь быть эффективным на практике&lt;/span&gt;&lt;/a&gt;.
Никто не раскрывает этот вопрос лучше, чем Kent Beck:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Test-Driven Development By Example" by Kent Beck&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id46"&gt;Учимся делать команду эффективной&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Следующий барьер - умение сделать команду эффективной.
Вы не сможете быть эффективным в изоляции, поскольку ваша эффективность определяется качеством кодовой базы, а она разрабатывается всей командой.
Или вы сделаете команду эффективной, или ваша эффективность так и останется мечтательством.
Опять же, лучший наставник в этих вопросах - Kent Beck:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Extreme Programming Explained" 1st edition by Kent Beck&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;На данном этапе, этой книги достаточно.
Обратите внимание, я советую именно первое издание, так как оно лучше раскрывает смысл и назначение &lt;a class="reference external" href="https://emacsway.github.io/ru/it/agile/easily-about-agile-way-to-rapid-development/"&gt;Agile разработки&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id47"&gt;Изучаем операционную систему&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Вот по операционным системам я мало что могу посоветовать, так как низкоуровневым программированием я практически не занимался.
Но вам обязательно нужно получить представление о том, как работают регистры процессора, память, и как управлять операционной системой.&lt;/p&gt;
&lt;p&gt;Я в свое время читал эти книги (к сожалению, сегодня они устарели):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"The Linux® Kernel Primer: A Top-Down Approach for x86 and PowerPC Architectures" by Claudia Salzberg Rodriguez, Gordon Fischer, Steven Smolski&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Digital computers and microprocessors" by Aliyev / "Цифровая вычислительная техника и микропроцессоры" М.М.Алиев&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;А вот этот справочник у меня всегда под рукой:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Unix and Linux System Administration Handbook" 5th edition by Evi Nemeth, Garth Snyder, Trent R. Hein, Ben Whaley, Dan Mackin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id48"&gt;Изучаем основы алгоритмов и структур данных&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Алгоритмы хоть и используются редко в прикладной разработке (если вы только не пишете поисковые системы, системные утилиты, языки программирования и операционные системы, системы маршрутизации, биржевые анализаторы и т.п.), но знать хотя бы базовые основы необходимо.
Существует книга, которая за двести с небольшим страниц может дать эти базовые основы в легкой и популярной форме:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Algorithms Unlocked" 3d edition by Thomas H. Cormen&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Данная книга не акцентируется на математике, что, с одной стороны, облегчает освоение материала, но, с другой стороны, оставляет невосполненным важный аспект профессиональных знаний.
К счастью, существует книга, которая обеспечивает легкий вход в алгоритмы, включая их математический анализ:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Introduction to the Design and Analysis of Algorithms" 3d edition by A.Levitin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;При чтении этой книги могут возникать вопросы справочного характера по математике, ответы на которые можно найти в приложении этой книги (Appendix A: Useful Formulas for the Analysis of Algorithms, Appendix B: Short Tutorial on Recurrence Relations), в математических справочниках (например, М.Я. Выгодского, А.А. Гусака) или в справочном разделе по математике "VIII Appendix: Mathematical Background" книги "Introduction to Algorithms" 3d edition by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein.&lt;/p&gt;
&lt;p&gt;В качестве минималистичного ликбеза по теоретическим основам может неплохо подойти книга:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Computer Science Distilled" by Wladston Ferreira Filho&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Она содержит минималистичные основы математики (логика, комбинаторика, вероятность), алгоритмы и структуры данных, основы Баз Данных (RDBMS, NoSQL), описание Парадигм Программирования и основы архитектуры железа.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id49"&gt;Изучаем математику&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Существует монументальная книга, которую стоит упомянуть отдельно (обратите внимание на фамилии авторов, которые в представлении не нуждаются).
Чтобы не тормозить общий процесс обучения, ее лучше читать в параллельно-фоновом режиме.
К тому же математические знания следует всегда поддерживать в актуальном состоянии, и регулярно освежать их в голове в фоновом режиме.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Concrete Mathematics: A Foundation for Computer Science" 2nd edition by Ronald L. Graham, Donald E. Knuth, Oren Patashnik&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Эта книга дает прекрасную математическую базу для функционального программирования.
И хорошо заходит в сочетании с "The Art Of Computer Programming" Volume 1 3d edition by Donald Knuth, поскольку у них многие темы пересекаются и раскрываются с разных точек зрения, что дает полноту понимания.
Справочник математических нотаций в конце книги нередко оказывается полезным.&lt;/p&gt;
&lt;p&gt;Книги по математике и алгоритмам - сложные книги, и я хотел бы поделиться одним советом, который я услышал еще в студенчестве.
Если что-то непонятно - прочитай три раза:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Первый раз просто прочитай, оставив попытки что-то понять, - нужно просто получить обзорность материала.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Второй раз прочитай уже пытаясь слегка вникать.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;И третий раз прочитай уже вникая полностью.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id50"&gt;Учимся архитектуре&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Теперь можно приступить и к архитектуре:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id51"&gt;Изучаем распределенные системы&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"NoSQL Distilled. A Brief Guide to the Emerging World of Polyglot Persistence." by Pramod J. Sadalage, Martin Fowler&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Building Microservices. Designing Fine-Grained Systems" 2nd edition by Sam Newman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://ksat.me/a-plain-english-introduction-to-cap-theorem"&gt;A plain english introduction to CAP Theorem&lt;/a&gt;" (&lt;a class="reference external" href="https://habr.com/ru/post/130577/"&gt;Russian&lt;/a&gt;) by Kaushik Sathupadi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://ksat.me/map-reduce-a-really-simple-introduction-kloudo"&gt;Map Reduce: A really simple introduction&lt;/a&gt;" by Kaushik Sathupadi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.allthingsdistributed.com/2008/12/eventually_consistent.html"&gt;Eventually Consistent - Revisited&lt;/a&gt;" by Werner Vogels&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://book.mixu.net/distsys/"&gt;Distributed systems: for fun and profit&lt;/a&gt;" (2013). An introduction to distributed systems. (&lt;a class="reference external" href="https://github.com/mixu/distsysbook"&gt;source code&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martin.kleppmann.com/2020/11/18/distributed-systems-and-elliptic-curves.html"&gt;Lecture notes (PDF) (including exercises)&lt;/a&gt;" by Martin Kleppmann (&lt;a class="reference external" href="https://www.cl.cam.ac.uk/teaching/2021/ConcDisSys/dist-sys-notes.pdf"&gt;download&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/ept/dist-sys"&gt;source code&lt;/a&gt;, &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB"&gt;video&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://github.com/ept/ddia-references"&gt;Literature references for "Designing Data-Intensive Applications"&lt;/a&gt;" by Martin Kleppmann&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://crdt.tech/"&gt;Resources and community around CRDT technology - papers, blog posts, code and more.&lt;/a&gt;" by Martin Kleppmann (&lt;a class="reference external" href="https://github.com/ept/crdt-website"&gt;source code&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id52"&gt;Изучаем распределенные системы. Углубляем навыки.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Книг по этой теме предстоит прочитать слишком много.
Вряд-ли ваша работа будет ждать, пока вы прочитаете их все.
К счастью, сообщество .NET разработчиков подготовило краткий справочник, который заменит вам прочтение десятка книг:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/index"&gt;.NET Microservices: Architecture for Containerized .NET Applications&lt;/a&gt;" edition v2.2.1 (&lt;a class="reference external" href="https://aka.ms/microservicesebook"&gt;mirror&lt;/a&gt;) by Cesar de la Torre, Bill Wagner, Mike Rousos&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;К этой книге существует эталонное приложение, которое наглядно демонстрирует практическое применение изложенной в книге информации:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/dotnet-architecture/eShopOnContainers"&gt;https://github.com/dotnet-architecture/eShopOnContainers&lt;/a&gt; (CQRS, DDD, Microservices)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Еще одно хорошее краткое руководство от Microsoft:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices/"&gt;Building microservices on Azure&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;И можно сюда включить еще и книгу:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-US/previous-versions/msp-n-p/jj554200(v=pandp.10)"&gt;CQRS Journey&lt;/a&gt;" by Dominic Betts, Julián Domínguez, Grigori Melnik, Fernando Simonazzi, Mani Subramanian&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;К ней также существует демонстрационное приложение:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/microsoftarchive/cqrs-journey"&gt;https://github.com/microsoftarchive/cqrs-journey&lt;/a&gt; (Event Sourcing, SAGA transactions)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ddd"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id53"&gt;Изучаем DDD&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Начинать я рекомендовал бы с прекрасного краткого руководства:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.oreilly.com/library/view/what-is-domain-driven/9781492057802/"&gt;What Is Domain-Driven Design?&lt;/a&gt;" by Vladik Khononov&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Или с более новой книги этого же автора:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Learning Domain-Driven Design: Aligning Software Architecture and Business Strategy" 1st Edition by Vlad Khononov&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Затем приступить к классике:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Domain-Driven Design" by Eric Evans&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://kalele.io/books/"&gt;Implementing Domain-Driven Design&lt;/a&gt;" by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Существуют краткие изложения этих двух книг по DDD.&lt;/p&gt;
&lt;p&gt;Краткие изложения "Domain-Driven Design" by Eric Evans:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://domainlanguage.com/ddd/reference/"&gt;Domain-Driven Design Reference&lt;/a&gt;" by Eric Evans&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.infoq.com/books/domain-driven-design-quickly/"&gt;Domain-Driven Design Quickly&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Краткое изложение "Implementing Domain-Driven Design" by Vaughn Vernon:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://kalele.io/books/"&gt;Domain-Driven Design Distilled&lt;/a&gt;" by V.Vernon&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id16"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id54"&gt;Статьи на частые вопросы по DDD&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://martinfowler.com/tags/domain%20driven%20design.html"&gt;Patterns related to Domain Driven Design&lt;/a&gt; by Martin Fowler&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="aggregate-domain-modeling"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id55"&gt;Aggregate &amp;amp; Domain Modeling&lt;/a&gt;&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/what-is-domain-logic/"&gt;What is domain logic?&lt;/a&gt;" by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/domain-vs-application-services/"&gt;Domain services vs Application services&lt;/a&gt;" by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/domain-model-isolation/"&gt;Domain model isolation&lt;/a&gt;" by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/email-uniqueness-as-aggregate-invariant/"&gt;Email uniqueness as an aggregate invariant&lt;/a&gt;" by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/how-to-know-if-your-domain-model-is-properly-isolated/"&gt;How to know if your Domain model is properly isolated?&lt;/a&gt;" by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/domain-model-purity-completeness/"&gt;Domain model purity vs. domain model completeness&lt;/a&gt;" by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/domain-model-purity-lazy-loading/"&gt;Domain model purity and lazy loading&lt;/a&gt;" by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/domain-model-purity-current-time/"&gt;Domain model purity and the current time&lt;/a&gt;" by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/immutable-architecture/"&gt;Immutable architecture&lt;/a&gt;" by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/link-to-an-aggregate-reference-or-id/"&gt;Link to an aggregate: reference or Id?&lt;/a&gt;" by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://udidahan.com/2008/02/29/how-to-create-fully-encapsulated-domain-models/"&gt;How to create fully encapsulated Domain Models&lt;/a&gt;" by Udi Dahan&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://dddcommunity.org/library/vernon_2011/"&gt;Effective Aggregate Design&lt;/a&gt;" by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://github.com/ardalis/DDD-NoDuplicates"&gt;Designing a Domain Model to enforce No Duplicate Names&lt;/a&gt; by Steve Smith&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cqrs-event-sourcing"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id56"&gt;CQRS &amp;amp; Event Sourcing&lt;/a&gt;&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://zimarev.com/blog/event-sourcing/myth-busting/2020-07-09-overselling-event-sourcing/"&gt;Overselling Event Sourcing&lt;/a&gt;" by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://zimarev.com/blog/event-sourcing/microservices/"&gt;Event Sourcing and Microservices&lt;/a&gt;" by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://zimarev.com/blog/event-sourcing/projections/"&gt;Projections in Event Sourcing&lt;/a&gt;" by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://zimarev.com/blog/event-sourcing/cqrs/"&gt;Event Sourcing and CQRS&lt;/a&gt;" by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://zimarev.com/blog/event-sourcing/entities-as-streams/"&gt;Entities as event streams&lt;/a&gt;" by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://zimarev.com/blog/event-sourcing/introduction/"&gt;Event Sourcing basics&lt;/a&gt;" by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://eventstore.com/blog/what-is-event-sourcing/"&gt;What is Event Sourcing?&lt;/a&gt;" by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://eventstore.com/blog/event-sourcing-and-cqrs/"&gt;Event Sourcing and CQRS&lt;/a&gt;" by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/"&gt;CQRS, Task Based UIs, Event Sourcing agh!&lt;/a&gt;" by Greg Young&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf"&gt;CQRS Documents&lt;/a&gt;" by Greg Young&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://leanpub.com/esversioning"&gt;Versioning in an Event Sourced System&lt;/a&gt;" by Greg Young ("&lt;a class="reference external" href="https://leanpub.com/esversioning/read"&gt;читать online&lt;/a&gt;", "&lt;a class="reference external" href="https://github.com/luque/Notes--Versioning-Event-Sourced-System"&gt;конспект книги&lt;/a&gt;")&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://udidahan.com/2009/12/09/clarified-cqrs/"&gt;Clarified CQRS&lt;/a&gt;" by Udi Dahan&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2012/08/22/busting-some-cqrs-myths/"&gt;Busting some CQRS myths&lt;/a&gt;" by Jimmy Bogard&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="bounded-context-and-microservices"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id57"&gt;Bounded Context and Microservices&lt;/a&gt;&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://vladikk.com/2018/01/21/bounded-contexts-vs-microservices/"&gt;Bounded Contexts are NOT Microservices&lt;/a&gt;" by Vladik Khononov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://vladikk.com/2018/02/28/microservices/"&gt;Tackling Complexity in Microservices&lt;/a&gt;" by Vladik Khononov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://youtu.be/Z0RgR9xIQE4"&gt;DDDDD: Bounded Contexts, Microservices, and Everything In Between&lt;/a&gt;" by Vladik Khononov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://kalele.io/reactive-microservices/"&gt;Reactive Microservices&lt;/a&gt;" by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://kalele.io/microservices-and-microservices/"&gt;Microservices and [Micro]services&lt;/a&gt;" by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://blog.avanscoperta.it/2020/06/11/about-bounded-contexts-and-microservices/"&gt;About Bounded Contexts and Microservices&lt;/a&gt;" by Alberto Brandolini&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices/model/domain-analysis"&gt;Using domain analysis to model microservices&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices/model/microservice-boundaries"&gt;Identifying microservice boundaries&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://medium.com/nick-tune-tech-strategy-blog/domains-subdomain-problem-solution-space-in-ddd-clearly-defined-e0b49c7b586c"&gt;Domain, Subdomain, Bounded Context, Problem/Solution Space in DDD: Clearly Defined&lt;/a&gt;" by Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://medium.com/@kentbeck_7670/monolith-services-theory-practice-617e4546a879"&gt;Monolith -&amp;gt; Services: Theory &amp;amp; Practice&lt;/a&gt;" by Kent Beck&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/articles/break-monolith-into-microservices.html#GoMacroFirstThenMicro"&gt;How to break a Monolith into Microservices :: Go Macro First, then Micro&lt;/a&gt;" by Zhamak Dehghani&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="domain-events"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id58"&gt;Domain Events&lt;/a&gt;&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../ddd/tactical-design/domain-model/domain-events/domain-events-in-ddd.html"&gt;&lt;span class="doc"&gt;Domain Events in DDD&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="api-design"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id59"&gt;API-Design&lt;/a&gt;&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices/design/api-design"&gt;Designing APIs for microservices&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design"&gt;Web API design&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-implementation"&gt;Web API implementation&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://github.com/Microsoft/api-guidelines"&gt;Microsoft REST API Guidelines&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/graph/query-parameters#filter-parameter"&gt;Microsoft Graph API&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752358"&gt;OData protocol&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://google.aip.dev/general"&gt;Google REST API Guidelines&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://microservice-api-patterns.org/"&gt;Microservice API Patterns&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://w3ctag.github.io/capability-urls/"&gt;Good Practices for Capability URLs&lt;/a&gt;", W3C Draft&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf"&gt;Web API Design - Crafting Interfaces that Developers Love&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://goodapi.co/blog/rest-vs-graphql"&gt;REST vs. GraphQL: A Critical Review&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://blog.logrocket.com/5-reasons-you-shouldnt-be-using-graphql-61c7846e7ed3/?gi=f67074d77004"&gt;5 reasons you shouldn't be using GraphQL&lt;/a&gt;" (&lt;a class="reference external" href="https://medium.com/devschacht/esteban-herrera-5-reasons-you-shouldnt-use-graphql-bae94ab105bc"&gt;перевод на Русский&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.openapis.org/"&gt;OpenAPIs&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.asyncapi.com/"&gt;AsyncAPI&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://www.persvr.org/rql/"&gt;Resource Query Language (RQL)&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://jsonapi.org/"&gt;JSON:API&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://goessner.net/articles/JsonPath/"&gt;JSONPath specification - XPath for JSON&lt;/a&gt;", "&lt;a class="reference external" href="https://www.baeldung.com/guide-to-jayway-jsonpath"&gt;Introduction to JsonPath&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://netflix.github.io/falcor/starter/what-is-falcor.html"&gt;Falcor&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://microservice-api-patterns.org/cheatsheet"&gt;Cheat Sheet a.k.a. API Design Heuristics&lt;/a&gt;" - шпаргалка по "Microservices API Patterns"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling"&gt;REST API Design - Resource Modeling&lt;/a&gt;" by Prakash Subramaniam, WhoughtWorks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2016/06/01/cqrs-and-rest-the-perfect-match/"&gt;CQRS and REST: the perfect match&lt;/a&gt;" by Jimmy Bogard&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2016/05/12/entities-arent-resources-resources-arent-representations/"&gt;Entities aren't resources, resources aren't representations&lt;/a&gt;" by Jimmy Bogard&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="event-storming"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id60"&gt;Event Storming&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;By Alberto Brandolini (&lt;a class="reference external" href="https://twitter.com/ziobrando"&gt;twitter&lt;/a&gt;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Domain-Driven Design: The First 15 Years", chapter "Discovering Bounded Contexts with EventStorming" by Alberto Brandolini&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://ziobrando.blogspot.com/2013/11/introducing-event-storming.html"&gt;Introducing Event Storming&lt;/a&gt;" by Alberto Brandolini&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://blog.avanscoperta.it/2020/03/26/remote-eventstorming/"&gt;Remote EventStorming&lt;/a&gt;" by Alberto Brandolini&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://blog.avanscoperta.it/2020/03/26/eventstorming-in-covid-19-times/"&gt;EventStorming in COVID-19 times&lt;/a&gt;" by Alberto Brandolini&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://leanpub.com/introducing_eventstorming"&gt;Leanpub: Introducing EventStorming&lt;/a&gt;" by Alberto Brandolini&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.eventstorming.com/"&gt;EventStorming.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Others:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Domain-Driven Design Distilled" by Vaughn Vernon, chapter "Chapter 7 Acceleration and Management Tools :: Event Storming"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.oreilly.com/library/view/what-is-domain-driven/9781492057802/"&gt;What is Domain-Driven Design?&lt;/a&gt;" by Vladik Khononov, chapter "Chapter 8: Event Storming"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ddd-crew.github.io/eventstorming-glossary-cheat-sheet/"&gt;EventStorming Glossary &amp;amp; Cheat sheet&lt;/a&gt;" by Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Open Agile Architecture", chapter "&lt;a class="reference external" href="https://pubs.opengroup.org/architecture/o-aa-standard/"&gt;19. Event Storming&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://agilemindset.ru/event-storming-%D0%BD%D0%B0-%D0%BF%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85-%D0%BA%D0%B5%D0%B9%D1%81%D0%B0%D1%85/"&gt;Event Storming на практических кейсах&lt;/a&gt;", Сергей Баранов (&lt;a class="reference external" href="https://www.youtube.com/watch?v=kJjuTuviZ-E"&gt;видео&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://developer.ibm.com/tutorials/reactive-in-practice-1/"&gt;Reactive in practice, Unit 1: Event storming the stock trader domain&lt;/a&gt;" by Kevin Webber, Dana Harrington&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.ibm.com/cloud/architecture/architecture/practices/event-storming-methodology-architecture/"&gt;Event storming at ibm.com&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ibm-cloud-architecture.github.io/refarch-eda/methodology/event-storming/"&gt;Event driven solution implementation methodology&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://github.com/mariuszgil/awesome-eventstorming"&gt;Awesome EventStorming&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tools:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/tmorin/plantuml-libs/blob/master/dist/eventstorming/README.md"&gt;EventStorming для PlantUML&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://miro.com/"&gt;miro.com&lt;/a&gt;, см. &lt;a class="reference external" href="https://miro.com/miroverse/category/ideation-and-brainstorming/event-storming"&gt;Event Storming template&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;EventStorming для ArchiMate:&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;см. "&lt;a class="reference external" href="https://nicea.nic.in/download-files.php?nid=247"&gt;Figure 13: Event Storming Model&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://community.opengroup.org/archimate-user-community/home/-/issues/8"&gt;Model used by Jean-Baptiste Sarrodie for presentation "Enterprise Architecture Modelling with ArchiMate in an Agile at Scale Programme"&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="modelling"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id61"&gt;Modelling&lt;/a&gt;&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://github.com/ddd-crew/welcome-to-ddd"&gt;Getting started with DDD. Definitions of DDD and fundamental concepts to reduce the learning curve and confusion.&lt;/a&gt;" by Nick Tune &amp;amp; DDD-Crew&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://github.com/ddd-crew/ddd-starter-modelling-process"&gt;Domain-Driven Design Starter Modelling Process. If you're new to DDD and not sure where to start, this process will guide you step-by-step.&lt;/a&gt;" by Nick Tune &amp;amp; DDD-Crew&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://medium.com/nick-tune-tech-strategy-blog/legacy-architecture-modernisation-with-strategic-domain-driven-design-3e7c05bb383f"&gt;Legacy Architecture Modernisation With Strategic Domain-Driven Design&lt;/a&gt;" by Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Собственно, этих знаний достаточно для того, чтобы стать зрелым специалистом.
Своего рода - кандидатский минимум.
Далее - порядок чтения может быть произвольным.
Читать весь список необязательно.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id62"&gt;Дополнительная литература (на выбор)&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="sdls"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id63"&gt;SDLS&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="single-team-agile"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id64"&gt;Single-Team Agile&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Extreme Programming Explained" 2nd edition by Kent Beck&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Planning Extreme Programming" by Kent Beck, Martin Fowler&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"More Effective Agile: A Roadmap for Software Leaders" by Steve McConnell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Clean Agile: Back to Basics" by Robert C. Martin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Agile! The Good, the Hype and the Ugly" by Bertrand Meyer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Scrum and XP from the Trenches: How We Do Scrum" 2nd edition by Henrik Kniberg&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Essential Scrum: A Practical Guide to the Most Popular Agile Process" by Kenneth Rubin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Succeeding with Agile: Software Development Using Scrum" by Mike Cohn&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"User Stories Applied: For Agile Software Development" by Mike Cohn&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="scaled-agile"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id65"&gt;Scaled Agile&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Scaling Software Agility: Best Practices for Large Enterprises" by Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise" by Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"SAFe® 5.0: The World's Leading Framework for Business Agility" by Richard Knaster, Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Large-Scale Scrum: More with LeSS" by Craig Larman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://less.works/less/framework/introduction"&gt;LeSS&lt;/a&gt;" (&lt;a class="reference external" href="https://less.works/ru/less/framework/introduction"&gt;перевод на Русский&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.pmi.org/pmbok-guide-standards/practice-guides/agile"&gt;Agile Practice Guide&lt;/a&gt;" by Project Management Institute&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id66"&gt;Стандарты&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"ISO/IEC/IEEE 12207:2017 Systems and software engineering — Software life cycle processes"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ISO/IEC/IEEE 15288:2015 Systems and software engineering — System life cycle processes"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ISO/IEC/IEEE 29148:2011 Systems and software engineering — Life cycle processes — Requirements engineering"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ISO/IEC/IEEE 15289:2019 Systems and software engineering — Content of life-cycle information items (documentation)"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ISO/IEC/IEEE 24765:2017 Systems and software engineering — Vocabulary"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ISO 9000:2005 Quality management systems — Fundamentals and vocabulary"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ISO/IEC 33001:2015 Information technology — Process assessment — Concepts and terminology"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ГОСТ Р ИСО/МЭК 12207-2010 Информационная технология. Системная и программная инженерия. Процессы жизненного цикла программных средств."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ГОСТ Р 57193-2016 Системная и программная инженерия. Процессы жизненного цикла систем."&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id19"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id67"&gt;Менеджмент&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://less.works/less/principles/systems-thinking.html"&gt;Systems Thinking&lt;/a&gt;" by Craig Larman (&lt;a class="reference external" href="https://less.works/ru/less/principles/systems-thinking.html"&gt;перевод на Русский&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Art of Project Management" by Scott Berkun&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Менеджмент: Учебник для вузов." 3-е изд. Глухов В. В.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Оргуправленческое мышление. Идеология, методология, технология" / Щедровицкий Георгий Петрович&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://publications.opengroup.org/g183"&gt;Managing Digital Concepts and Practices&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id20"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id68"&gt;Развитие личностных профессиональных качеств&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"The Pragmatic Programmer: From Journeyman to Master" 1st edition by David Thomas, Andrew Hunt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Pragmatic Programmer: your journey to mastery, 20th Anniversary Edition" 2nd edition by David Thomas, Andrew Hunt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"A Mind for Numbers: How to Excel at Math and Science" by Barbara Ann Oakley&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Systems Thinking. Quality Software Management. New York: Dorset House." by Gerald M. Weinberg, 1992,  ISBN: 0932633226&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"An Introduction to General Systems Thinking" by Gerald M. Weinberg&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Becoming a Technical Leader" by Gerald M. Weinberg&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Harvard Business Review on Decision Making" by Harvard Business School Press&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Software Architect Elevator: Redefining the Architect's Role in the Digital Enterprise 1st Edition" by Gregor Hohpe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Fundamentals of Software Architecture: An Engineering Approach" 1st edition by Mark Richards, Neal Ford&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Software Architecture: The Hard Parts: Modern Trade-Off Analyses for Distributed Architectures" 1st Edition by Neal Ford, Mark Richards, Pramod Sadalage, Zhamak Dehghani&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Book: 37 Things One Architect Knows About IT Transformation" by Gregor Hohpe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Eat or Be Eaten!: Jungle Warfare for the Corporate Master Politician" by Phil Porter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Presentation patterns: techniques for crafting better presentations" by Neal Ford, Matthew McCullough, Nathaniel Schutta&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Technology Strategy Patterns: Architecture as Strategy" 1st edition by Eben Hewitt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Thinking in Systems: A Primer" by Donella H. Meadows, Diana Wright&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Social psychology" 13th edition by David G. Myers. Перевод: "Социальная психология" / Майерс Д. Пер. с англ. З. Замчук; Зав. ред. кол. Л. Винокуров. — 7-е изд. — СПб.: Питер, 2006.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Never split the difference: negotiating as if life depended on it" by Chris Voss. Перевод: "Договориться не проблема. Как добиваться своего без конфликтов и ненужных уступок." / Крис Восс&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Искусство спора. О теории и практике спора." / Поварнин С.И.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Эристика, или Искусство побеждать в спорах" / Шопенгауэр Артур. English: "The Art of Being Right: 38 Ways to Win an Argument" by Arthur Schopenhauer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Как читать книги" / Поварнин С.И.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ruxpert.ru/%D0%98%D1%81%D0%BA%D1%83%D1%81%D1%81%D1%82%D0%B2%D0%BE_%D1%81%D0%BF%D0%BE%D1%80%D0%B0_(%D0%BE%D0%B1%D1%83%D1%87%D0%B0%D1%8E%D1%89%D0%B8%D0%B5_%D0%BC%D0%B0%D1%82%D0%B5%D1%80%D0%B8%D0%B0%D0%BB%D1%8B)"&gt;Искусство спора (обучающие материалы)&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://m.vk.com/wall-56611080_127534"&gt;Книги по риторике&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Простой и доходчивый видеокурс по SoftSkills:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://youtube.com/channel/UCSN7G8syJUaRiXrw1l0qk_g"&gt;Soft Skills Pro&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id21"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id69"&gt;Базы данных&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Mastering PostgreSQL In Application Development" by Dimitri Fontaine&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Art of PostgreSQL" 2nd edition by Dimitri Fontaine - is the new title of "Mastering PostgreSQL in Application Development"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"SQL Antipatterns. Avoiding the Pitfalls of Database Programming." by Bill Karwin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Refactoring Databases. Evolutionary Database Design" by Scott J Ambler and Pramod J. Sadalage&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"An Introduction to Database Systems" by C.J. Date&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"PostgreSQL 10 High Performance" by Ibrar Ahmed, Gregory Smith, Enrico Pirozzi&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PostgresPro представил &lt;a class="reference external" href="https://postgrespro.ru/education/books"&gt;три книги&lt;/a&gt; для трех разных уровней подготовленности читателей, от совершенно неосведомленного человека до разработчика баз данных.
Книги дают комплексные знания в лаконичной форме.
Все книги доступны для скачивания в свободном доступе:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://postgrespro.ru/education/books/introbook"&gt;Postgres: первое знакомство&lt;/a&gt;" / Л.П. Вениаминович, Р.Е. Валерьевич, Л.И. Викторович&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://postgrespro.ru/education/books/sqlprimer"&gt;PostgreSQL. Основы языка SQL: учеб. пособие&lt;/a&gt;"  / Е.П. Моргунов; под ред. Е.В. Рогова, П.В. Лузанова.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://postgrespro.ru/education/books/dbtech"&gt;Основы технологий баз данных: учеб. пособие&lt;/a&gt;" / Б. А. Новиков, Е. А. Горшкова, Н. Г. Графеева; под ред. Е. В. Рогова.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Так же доступны &lt;a class="reference external" href="https://postgrespro.ru/education/courses"&gt;учебные материалы курсов&lt;/a&gt;: слайды, видео, руководства. Скачать можно все материалы каждого курса одним архивом.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://postgrespro.ru/education/where"&gt;Видеозаписи курсов&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Превосходная подборка статей с фундаментальной информацией простым языком о внутреннем устройстве PostgreSQL, от разработчиков PostgresPro:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://m.habr.com/ru/company/postgrespro/blog/442804/"&gt;MVCC-1. Изоляция&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://m.habr.com/ru/company/postgrespro/blog/458186/"&gt;WAL в PostgreSQL: 1. Буферный кеш&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Шпаргалка по выбору типа хранилища данных:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/guide/technology-choices/data-store-comparison"&gt;Understand data store models&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/guide/technology-choices/data-store-decision-tree"&gt;Select an Azure data store for your application&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jepsen's analysis over two dozen databases, coordination services, and queues—and we've found replica divergence, data loss, stale reads, read skew, lock conflicts, and much more:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://jepsen.io/analyses"&gt;Analyses&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://aphyr.com/tags/jepsen"&gt;Everything Tagged "Jepsen"&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Рейтинг хранилищ данных:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://db-engines.com/en/ranking"&gt;DB-Engines Ranking&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id22"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id70"&gt;Изучаем распределенные системы. Третий заход.&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions" by Gregor Hohpe, Bobby Woolf&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Service Design Patterns: Fundamental Design Solutions for SOAP/WSDL and RESTful Web Services" by Robert Daigneau&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Microsoft .NET: Architecting Applications for the Enterprise" 2nd edition by Dino Esposito, Andrea Saltarello&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/"&gt;Cloud Design Patterns&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn568099(v=pandp.10)"&gt;Cloud Design Patterns. Prescriptive architecture guidance for cloud applications&lt;/a&gt;" by Alex Homer, John Sharp, Larry Brader, Masashi Narumoto, Trent Swanson. (&lt;a class="reference external" href="http://aka.ms/cloud-design-patterns-sample"&gt;Code Samples&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices"&gt;Build Microservices on Azure&lt;/a&gt;" by Microsoft Corporation and community&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/"&gt;Cloud Best Practices&lt;/a&gt;" by Microsoft Corporation and community&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/antipatterns"&gt;Performance Antipatterns&lt;/a&gt;" by Microsoft Corporation and community&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/guide/"&gt;Azure Application Architecture Guide&lt;/a&gt;" by Microsoft Corporation and community&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/data-guide/"&gt;Azure Data Architecture Guide&lt;/a&gt;" by Microsoft Corporation and community&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Release It! Design and Deploy Production-Ready Software" 2nd edition by Michael Nygard&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.manning.com/books/microservice-patterns"&gt;Microservices Patterns: With examples in Java&lt;/a&gt;" 1st edition by Chris Richardson (&lt;a class="reference external" href="https://microservices.io/book"&gt;more info&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Monolith to Microservices Evolutionary Patterns to Transform Your Monolith" by Sam Newman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Microservices AntiPatterns and Pitfalls" by Mark Richards&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Microservices vs. Service-Oriented Architecture" by Mark Richards&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://landing.google.com/sre/books/"&gt;Site Reliability Engineering: How Google runs production systems&lt;/a&gt;" edited by Betsy Beyer, Chris Jones, Jennifer Petoff &amp;amp; Niall Richard Murphy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://landing.google.com/sre/books/"&gt;The Site Reliability Workbook: Practical Ways to Implement SRE.&lt;/a&gt;" by Betsy Beyer, Niall Richard Murphy, David K. Rensin, Kent Kawahara &amp;amp; Stephen Thorne&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://landing.google.com/sre/books/"&gt;Building Secure &amp;amp; Reliable Systems: Best Practices for Designing, Implementing and Maintaining Systems.&lt;/a&gt;" by Heather Adkins, Betsy Beyer, Paul Blankinship, Ana Oprea, Piotr Lewandowski, Adam Stubblefield&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Database Reliability Engineering. Designing and Operating Resilient Database Systems." by Laine Campbell and Charity Majors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Designing Data-Intensive Applications. The Big Ideas Behind Reliable, Scalable, and Maintainable Systems" by Martin Kleppmann&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Database Internals: A Deep Dive into How Distributed Data Systems Work" by Alex Petrov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.distributed-systems.net/index.php/books/ds3/"&gt;Distributed systems: principles and paradigms&lt;/a&gt;" 3d edition by Andrew S. Tanenbaum, Maarten Van Steen&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://books.ifmo.ru/file/pdf/1551.pdf"&gt;Введение в распределенные вычисления&lt;/a&gt;" / Косяков М. С. — СПб: НИУ ИТМО, 2014. — С. 75-82. — 155 с.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Service-Oriented Architecture Analysis and Design for Services and Microservices" by Thomas Erl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Workflow patterns: the definitive guide" by Aalst, Wil van der, Russell, Nick, Ter Hofstede, Arthur&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Real-Life BPMN (4th edition): Includes an introduction to DMN" by Jakob Freund, Bernd Rücker&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Practical Process Automation" by Bernd Ruecker&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id23"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id71"&gt;API-Design&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"REST in Practice: Hypermedia and Systems Architecture" by Savas Parastatidis, Jim Webber, Ian Robinson&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"RESTful Web APIs: Services for a Changing World" by Leonard Richardson, Sam Ruby, Mike Amundsen&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Web API Design Crafting Interfaces that Developers Love" by Brian Mulloy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"REST API Design Rulebook" by Mark Massé&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Principles of Web API Design: Delivering Value with APIs and Microservices" by James Higginbotham&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="streaming-processing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id72"&gt;Streaming Processing&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Streaming Data: Understanding the real-time pipeline" 1st edition by Andrew Psaltis&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Big Data: Principles and best practices of scalable realtime data systems" 1st edition by Nathan Marz, James Warren&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Kafka Streams in Action: Real-time apps and microservices with the Kafka Streams API" 1st edition by Bill Bejeck&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Enterprise Big Data Lake: Delivering the Promise of Big Data and Data Science" 1st edition by Alex Gorelik&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id24"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id73"&gt;Углубляем DDD&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka" by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Patterns, Principles, and Practices of Domain-Driven Design" by Scott Millett, Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Hands-On Domain-Driven Design with .NET Core: Tackling complexity in the heart of software by putting DDD principles into practice" by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Balancing Coupling in Software Design: Successful Software Architecture in General and Distributed Systems" by Vladislav Khononov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.informit.com/imprint/series_detail.aspx?ser=7937178"&gt;The Addison-Wesley Signature Series: Vaughn Vernon&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://leanpub.com/dddwithpython"&gt;Event Sourced Building Blocks for Domain-Driven Design with Python&lt;/a&gt;" by John Bywater&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id25"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id74"&gt;Изучаем проектирование&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Agile Software Development. Principles, Patterns, and Practices." by Robert C. Martin, James W. Newkirk, Robert S. Koss&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Analysis Patterns. Reusable Object Models" by Martin Fowler&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Implementation Patterns" by Kent Beck&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Smalltalk Best Practice Patterns" by Kent Beck&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/eaaDev/"&gt;Development of Further Patterns of Enterprise Application Architecture&lt;/a&gt;" by Martin Fowler&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Domain Specific Languages" by Martin Fowler (with Rebecca Parsons)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Pattern Hatching: Design Patterns Applied" by John Vlissides&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff650706(v=pandp.10)?redirectedfrom=MSDN"&gt;Microsoft Application Architecture Guide&lt;/a&gt;" 2nd edition (Patterns &amp;amp; Practices) by Microsoft Corporation (J.D. Meier, David Hill, Alex Homer, Jason Taylor, Prashant Bansode, Lonnie Wall, Rob Boucher Jr., Akshay Bogawat)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development" by Craig Larman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Object-Oriented Software Construction" 2nd edition by Bertrand Meyer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Working Effectively with Legacy Code" by Michael C. Feathers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Refactoring To Patterns" by Joshua Kerievsky&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Structure and Interpretation of Computer Programs" (aka SICP) 2nd edition (MIT Electrical Engineering and Computer Science) by Harold Abelson, Gerald Jay Sussman, Julie Sussman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"How to Design Programs, second edition: An Introduction to Programming and Computing" 2d edition by Matthias Felleisen, Robert Bruce Findler, Matthew Flatt, Shriram Krishnamurthi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Object Oriented Software Engineering: A Use Case Driven Approach" by Ivar Jacobson&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Object-Oriented Analysis and Design with Applications" 3rd edition by Grady Booch, Robert A. Maksimchuk, Michael W. Engle, Bobbi J. Young Ph.D., Jim Conallen, Kelli A. Houston&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="posa"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id75"&gt;POSA&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Pattern-Oriented Software Architecture: A System of Patterns, Volume 1" by Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, Michael Stal&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Pattern-Oriented Software Architecture: Patterns for Concurrent and Networked Objects, Volume 2" by Douglas C. Schmidt, Michael Stal, Hans Rohnert, Frank Buschmann&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Pattern-Oriented Software Architecture: Patterns for Resource Management, Volume 3" by Michael Kircher, Prashant Jain&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Pattern-Oriented Software Architecture: A Pattern Language for Distributed Computing, Volume 4" by Frank Buschmann, Kevin Henney, Douglas C. Schmidt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Pattern-Oriented Software Architecture: On Patterns and Pattern Languages, Volume 5" by Frank Buschmann, Kevin Henney, Douglas C. Schmidt&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id26"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id76"&gt;Алгоритмы. Второй заход.&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Introduction to Algorithms" 3d edition by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Algorithms and Data Structures" (Oberon version: August 2004) by N.Wirth&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Donald E. Knuth:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"The Art of Computer Programming, Volume 1: Fundamental Algorithms" 3d edition by Donald Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Art of Computer Programming, Volume 1, Fascicle 1: MMIX; A RISC Computer for the New Millennium" 1st edition by Donald Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Art of Computer Programming, Volume 2, Seminumerical Algorithms" 3rd edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Art of Computer Programming, Volume 3, Sorting and Searching" 2nd edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Art of Computer Programming, Volume 4, Fascicle 0: Introduction to Combinatorial Algorithms and Boolean Functions" 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Art of Computer Programming, Volume 4, Fascicle 1: Bitwise Tricks &amp;amp; Techniques; Binary Decision Diagrams" 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Art of Computer Programming, Volume 4, Fascicle 2: Generating All Tuples and Permutations" 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Art of Computer Programming, Volume 4, Fascicle 3: Generating All Combinations and Partitions Paperback" 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Art of Computer Programming, Volume 4, Fascicle 4: Generating All Trees; History of Combinatorial Generation 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Art of Computer Programming" Volume 4, Fascicle 5: Mathematical Preliminaries Redux; Introduction to Backtracking; Dancing Links" 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Art of Computer Programming, Volume 4, Fascicle 6: Satisfiability" 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Art of Computer Programming, Volume 4A, Combinatorial Algorithms, Part 1" 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Хорошая подборка книг по алгоритмам: &lt;a class="reference external" href="http://e-maxx.ru/bookz/"&gt;http://e-maxx.ru/bookz/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id27"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id77"&gt;Тестирование&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"xUnit Test Patterns. Refactoring Test Code." by Gerard Meszaros&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Unit Testing Principles, Practices, and Patterns: Effective testing styles, patterns, and reliable automation for unit testing, mocking, and integration testing with examples in C#" 1st Edition by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Growing Object-Oriented Software, Guided by Tests" by Steve Freeman, Nat Pryce&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Agile Testing: A Practical Guide for Testers and Agile Teams" by Lisa Crispin, Janet Gregory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"More Agile Testing: Learning Journeys for the Whole Team" by Lisa Crispin, Janet Gregory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ATDD by Example: A Practical Guide to Acceptance Test-Driven Development" by Markus Gärtner&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation" by Jez Humble, David Farley&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Continuous Integration: Improving Software Quality and Reducing Risk" by Paul M. Duvall, Steve Matyas, Andrew Glover&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.istqb.org/references/books/istqb-related-books.html"&gt;ISTQB® Related Books&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.istqb.org/references/books/referenced-books-in-istqb-syllabi.html"&gt;Referenced Books in ISTQB® Syllabi&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id28"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id78"&gt;Компиляторы&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Compiler Construction" by N.Wirth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Compilers: Principles, Techniques, and Tools" 2nd edition by Alfred V. Aho, Monica S. Lam, Ravi Sethi, Jeffrey D. Ullman&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id29"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id79"&gt;Архитектура&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Software Architecture in Practice" 4th edition by Len Bass, Paul Clements, Rick Kazman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Documenting Software Architectures: Views and Beyond" 2nd edition by Paul Clements, Felix Bachmann, Len Bass, David Garlan, James Ivers, Reed Little, Paulo Merson, Robert Nord, Judith Stafford&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Software Systems Architecture: Working With Stakeholders Using Viewpoints and Perspectives" 2nd edition by Nick Rozanski, Eóin Woods&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Designing Software Architectures: A Practical Approach (SEI Series in Software Engineering)" 1st edition by Humberto Cervantes, Rick Kazman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Fundamentals of Software Architecture: An Engineering Approach" 1st edition by Mark Richards, Neal Ford&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Introduction to Solution Architecture Paperback" by Alan McSweeney&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Systems Analysis and Design" 7th edition by Alan Dennis, Barbara Haley Wixom, Roberta M. Roth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Design of Design: Essays from a Computer Scientist" by Frederick P. Brooks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Living Documentation: Continuous Knowledge Sharing by Design" by Cyrille Martraire&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Just Enough Software Architecture: A Risk-Driven Approach" by George H. Fairbanks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Book: 37 Things One Architect Knows About IT Transformation" by Gregor Hohpe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"The Software Architect Elevator: Redefining the Architect's Role in the Digital Enterprise 1st Edition" by Gregor Hohpe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Cloud Strategy: A Decision-based Approach to Successful Cloud Migration" by Gregor Hohpe, Michele Danieli, Jean-Francois Landreau, Tahir Hashmi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Architecting for Scale" 2nd Edition by Lee Atchison&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Software Engineering: A Practitioner's Approach" 9th edition by Roger S. Pressman, Bruce Maxim&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Presentation patterns: techniques for crafting better presentations" by Neal Ford, Matthew McCullough, Nathaniel Schutta&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Team Topologies: Organizing Business and Technology Teams for Fast Flow" by Matthew Skelton, Manuel Pais&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Technology Strategy Patterns: Architecture as Strategy" 1st edition by Eben Hewitt&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Архитектура в Agile:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Building Evolutionary Architectures: Support Constant Change" 1st Edition by Neal Ford, Rebecca Parsons, Patrick Kua&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Agile Software Architecture: Aligning Agile Processes and Software Architectures" by Muhammad Ali Babar, Alan W. Brown, Kai Koskimies, Ivan Mistrík&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Continuous Architecture: Sustainable Architecture in an Agile and Cloud-Centric World" by Murat Erder, Pierre Pureur&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Стандарты:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://pubs.opengroup.org/architecture/o-aa-standard/"&gt;Open Agile Architecture: A Standard of The Open Group&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.iso.org/standard/50508.html"&gt;ISO/IEC/IEEE 42010:2011(en) Systems and software engineering — Architecture description&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.iso.org/standard/68982.html"&gt;ISO/IEC/IEEE 42020:2019 Software, systems and enterprise — Architecture processes&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.iso.org/standard/73436.html"&gt;ISO/IEC/IEEE 42030:2019 Software, systems and enterprise — Architecture evaluation framework&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://allgosts.ru/35/080/gost_r_57100-2016"&gt;ГОСТ Р 57100-2016 Системная и программная инженерия. Описание архитектуры&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Рейтинг инструментов для упраления требованиями/архитектурой/SDLC/etc. от Gartner по категориям: "&lt;a class="reference external" href="https://www.gartner.com/reviews/markets"&gt;Reviews Organized by Markets&lt;/a&gt;".&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id30"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id80"&gt;Аналитика&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Software Requirements (Developer Best Practices)" 3rd Edition by Karl Wiegers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"INCOSE Guide for Writing Requirements" by INCOSE&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.incose.org/products-and-publications/se-handbook"&gt;Systems engineering handbook. A guide for System Life Cycle Processes and activities.&lt;/a&gt;" by INCOSE&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Managing Software Requirements: A Unified Approach" 1st edition by Dean Leffingwell, Don Widrig&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Managing Software Requirements (paperback): A Use Case Approach" 2d Edition by Dean Leffingwell, Don Widrig&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Requirements Engineering Fundamentals: A Study Guide for the Certified Professional for Requirements Engineering Exam - Foundation Level - IREB compliant" 2nd Edition by Klaus Pohl, Chris Rupp&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.iiba.org/career-resources/a-business-analysis-professionals-foundation-for-success/babok/"&gt;A Guide to the Business Analysis Body of Knowledge (BABOK®)&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.sebokwiki.org/wiki/Download_SEBoK_PDF"&gt;Guide to the Systems Engineering Body of Knowledge (SEBoK)&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.ireb.org/en/downloads/tag:handbook"&gt;Library of IREB artifacts&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.ireb.org/content/downloads/5-cpre-foundation-level-handbook/cpre_foundationlevel_handbook_en_v1.0.pdf"&gt;Handbook for the CPRE Foundation Level according to the IREB Standard Education and Training for Certified Professional for Requirements Engineering (CPRE) Foundation Level&lt;/a&gt;" Version 1.0.0&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.ireb.org/content/downloads/13-cpre-advanced-level-elicitation-handbook/advanced_level_elicitation_handbook_en.pdf"&gt;Handbook of Advanced Level Elicitation according to the IREB Standard Education and Training for IREB Certified Professional for Requirements Engineering Advanced Level Advanced Level Elicitation&lt;/a&gt;" Version 1.0.3&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.ireb.org/content/downloads/16-cpre-advanced-level-requirements-management-handbook/ireb-cpre-handbook-for-requirements-management-advanced-level-en-v1.1.pdf"&gt;Requirements Management according to the IREB Standard Education and Training for the IREB Certified Professional for Requirements Engineering Qualification Advanced Level Requirements Management&lt;/a&gt;" Version 1.1.0&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.ireb.org/content/downloads/19-handbook-cpre-advanced-level-requirements-modeling/ireb_cpre_handbook_requirements-modeling_advanced-level-v1.3.pdf"&gt;Handbook of Requirements Modeling According to the IREB Standard Education and Training for IREB Certified Professional for Requirements Engineering Advanced Level Requirements Modeling&lt;/a&gt;" Version 1.3&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.ireb.org/content/downloads/1-cpre-glossary/ireb_cpre_glossary_17.pdf"&gt;A Glossary of Requirements Engineering Terminology&lt;/a&gt;" Version 1.7&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.ireb.org/content/downloads/2-cpre-glossary-2-0/ireb_cpre_glossary_en_2.0.pdf"&gt;A  Glossary  of Requirements Engineering Terminology Caution: This glossary is aligned to the CPRE Foundation Level syllabus 3.0 only!&lt;/a&gt;" Version 2.0.0&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Аналитика в Agile:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise" by Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Whitepaper "&lt;a class="reference external" href="https://scalingsoftwareagility.files.wordpress.com/2007/03/a-lean-and-scalable-requirements-information-model-for-agile-enterprises-pdf.pdf"&gt;A Lean and Scalable Requirements Information Model for the Agile Enterprise&lt;/a&gt;" by Dean Leffingwell with Juha‐Markus Aalto&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://scalingsoftwareagility.wordpress.com/2010/03/05/an-agile-architectural-epic-kanban-system-part-2-%E2%80%93-the-model/"&gt;An Agile Architectural Epic Kanban System: Part 2 – The Model&lt;/a&gt;" by Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.iiba.org/career-resources/business-analysis-resources/iiba-bookstore/"&gt;Agile Extension to the BABOK® Guide&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.ireb.org/content/downloads/22-cpre-advanced-level-re-agile-handbook/handbook_cpre_al_re%40agile_en_v1.0.2.pdf"&gt;Handbook of RE@Agile According to the IREB Standard Education and Training for IREB Certified Professional for Requirements Engineering Advanced Level RE@Agile&lt;/a&gt;" Version 1.0.2&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.ireb.org/content/downloads/34-re-agile-glossary/ireb_cpre_re%40agile_glossary_v1.0.5.pdf"&gt;IREB Certified Professional for Requirements Engineering RE@Agile Glossary&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Другие подборки литературы по аналитике:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://systems.education/books"&gt;Литература по аналитике на сайте Systems.Education&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.volere.org/resources/books/"&gt;Литература по аналитике на сайте Volere Requirements Resources&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Смотрите также список инструментов для управления требованиями:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.volere.org/tools/"&gt;Tools&lt;/a&gt; on Volere Requirements Resources&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.volere.org/requirements-tools/"&gt;Requirements Tools&lt;/a&gt; on Volere Requirements Resources&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id31"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id81"&gt;Изучаем оценивание задач&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Software Estimation: Demystifying the Black Art (Developer Best Practices)" by Steve McConnell (я встречал в интернете &lt;a class="reference external" href="http://igorshevchenko.ru/blog/entries/software-estimation"&gt;краткий конспект&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Agile Estimating and Planning" by Mike Cohn&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id32"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id82"&gt;Функциональное программирование&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://se.ethz.ch/~meyer/publications/functional/meyer_functional_oo.pdf"&gt;"Software architecture: object-oriented vs functional&lt;/a&gt;" by Bertrand Meyer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"&gt;Category Theory for Programmers&lt;/a&gt;" by Bartosz Milewski (&lt;a class="reference external" href="https://github.com/hmemcpy/milewski-ctfp-pdf"&gt;unofficial PDF and LaTeX source&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://fsharpforfunandprofit.com/books/"&gt;Domain Modeling Made Functional. Tackle Software Complexity with Domain-Driven Design and F#&lt;/a&gt;" by Scott Wlaschin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://fsharpforfunandprofit.com/"&gt;F# for Fun and Profit&lt;/a&gt;" by Scott Wlaschin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Functional Programming for the Object-Oriented Programmer" by Brian Marick&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Functional Thinking" by Neal Ford&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://en.wikibooks.org/wiki/Haskell"&gt;Haskell&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://github.com/winitzki/sofp/blob/master/sofp-src/sofp.pdf"&gt;The Science of Functional Programming. A Tutorial, with Examples in Scala.&lt;/a&gt;" by Sergei Winitzki, Ph.D.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Microservices with Clojure. Develop event-driven, scalable, and reactive microservices with real-time monitoring" by Anuj Kumar&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для Golang-разработчиков:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Learning Functional Programming in Go: Change the way you approach your applications using functional programming in Go" by Lex Sheehan&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id33"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id83"&gt;Справочники&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Computing Handbook. Computer Science and Software Engineering." 3d edition by Allen Tucker, Teofilo Gonzalez, Jorge Diaz-Herrera&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id34"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id84"&gt;Справочная информация&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="body-of-knowledge"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id85"&gt;Body of Knowledge&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.sebokwiki.org/wiki/Download_SEBoK_PDF"&gt;Guide to the Systems Engineering Body of Knowledge (SEBoK)&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://itabok.iasaglobal.org/"&gt;The Information Technology Architecture Body of Knowledge (ITABoK)&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.mitre.org/publications/technical-papers/guide-to-the-evolving-enterprise-architecture-body-of-knowledge"&gt;The Enterprise Architecture Body of Knowledge (EABoK)&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.mitre.org/publications/technical-papers/the-mitre-systems-engineering-guide"&gt;MITRE Systems Engineering Guide&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.businessarchitectureguild.org/page/BIZBOK"&gt;A Guide to the Business Architecture Body of Knowledge(R) (BIZBOK(R) Guide)&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.iiba.org/career-resources/a-business-analysis-professionals-foundation-for-success/babok/"&gt;A Guide to the Business Analysis Body of Knowledge (BABOK®)&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.iiba.org/career-resources/business-analysis-resources/iiba-bookstore/"&gt;Agile Extension to the BABOK® Guide&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.dama.org/content/what-data-management"&gt;DAMA-DMBOK: Data Management Body of Knowledge&lt;/a&gt;" 2nd edition by DAMA International&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.pmi.org/pmbok-guide-standards/foundational/pmbok"&gt;The Project Management Body of Knowledge (PMBoK)&lt;/a&gt;" by Project Management Institute (PMI)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.pmi.org/pmbok-guide-standards/practice-guides/agile"&gt;Agile Practice Guide&lt;/a&gt;" by Project Management Institute (PMI), 2017&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://book4cio.ru/"&gt;Учебник 4CIO. Настольная книга ИТ-Директора&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://4cio.ru/pages/570"&gt;Учебник 4CDTO. Настольная книга руководителя цифровой трансформации&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.incose.org/products-and-publications/se-handbook"&gt;Systems engineering handbook. A guide for System Life Cycle Processes and activities.&lt;/a&gt;" by INCOSE&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://sfia-online.org/en"&gt;The global skills and competency framework for a digital world&lt;/a&gt;" by SFIA Foundation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://sfia-online.org/en/tools-and-resources/bodies-of-knowledge/list-of-bodies-of-knowledge"&gt;List of Bodies of Knowledge&lt;/a&gt;" by SFIA Foundation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id35"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id86"&gt;ГОСТы&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://allgosts.ru/35/"&gt;База ГОСТов allgosts.ru - 35. ИНФОРМАЦИОННЫЕ ТЕХНОЛОГИИ. МАШИНЫ КОНТОРСКИЕ&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://standartgost.ru/0/753-informatsionnye_tehnologii_mashiny_kontorskie"&gt;StandartGOST.ru - бесплатные ГОСТы и магазин документов. Информационные технологии. Машины конторские&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="online"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id87"&gt;Online-каталоги&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.refactoring.com/catalog/"&gt;Catalog of Refactorings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://c2.com/cgi/wiki?CodeSmell"&gt;Code Smell&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://c2.com/cgi/wiki?AntiPatternsCatalog"&gt;Anti Patterns Catalog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://martinfowler.com/eaaCatalog/"&gt;Catalog of Patterns of Enterprise Application Architecture&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.martinfowler.com/dslCatalog/"&gt;List of DSL Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.enterpriseintegrationpatterns.com/"&gt;Enterprise Integration Patterns&lt;/a&gt; (&lt;a class="reference external" href="https://www.enterpriseintegrationpatterns.com/download/EIPTutorialReferenceChart.pdf"&gt;шпаргалка по EIP&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://verraes.net/2019/05/ddd-msg-arch/"&gt;DDD and Messaging Architectures&lt;/a&gt; - an overview of different series on patterns in distributed systems by Mathias Verraes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://servicedesignpatterns.com/"&gt;Service Design Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://patterns.arcitura.com/soa-patterns"&gt;SOAPatterns.org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://patterns.arcitura.com/cloud-computing-patterns"&gt;CloudPatterns.org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://patterns.arcitura.com/big-data-patterns"&gt;BigDataPatterns.org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/"&gt;Cloud Design Patterns | Microsoft Docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://workflowpatterns.com/patterns/"&gt;Workflow Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://microservices.io/patterns/"&gt;Microservices Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.manning.com/books/microservice-patterns"&gt;Microservices Patterns (book)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://samnewman.io/patterns/"&gt;Microservices Patterns from Sam Newman&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://ddd.fed.wiki.org/"&gt;About DDD on the site of Ward Cunningham&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.databaserefactoring.com/"&gt;Refactoring Databases&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://xunitpatterns.com/"&gt;XUnit Test Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://databaserefactoring.com/"&gt;Refactoring Databases&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.agiledata.org/essays/databaseRefactoringCatalog.html"&gt;Catalog of Database Refactorings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.extremeprogramming.org/rules.html"&gt;Extreme Programming Rules&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://jepsen.io/consistency"&gt;Consistency Models - a clickable map&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.agilealliance.org/agile101/subway-map-to-agile-practices/"&gt;Subway Map to Agile Practices - a clickable map&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://patterns.arcitura.com/"&gt;The Arcitura Education Patterns, Mechanisms and Metrics Master Catalog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://microservice-api-patterns.org/"&gt;Microservice API Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.openapis.org/"&gt;OpenAPIs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.asyncapi.com/"&gt;AsyncAPI&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nocomplexity.com/documents/arplaybook/"&gt;Architecture Playbook&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/nocomplexity/ArchitecturePlaybook"&gt;source&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.viewpoints-and-perspectives.info/"&gt;Software Systems Architecture&lt;/a&gt; - This web site contains a selection of supporting material for the book ("Software Systems Architecture: Working With Stakeholders Using Viewpoints and Perspectives" 2nd edition by Nick Rozanski, Eóin Woods), including sample chapters, references and white papers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="code-smell-catalogs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id88"&gt;Code Smell catalogs&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Chapter 17: "Smells and Heuristics" of the book "Clean Code: A Handbook of Agile Software Craftsmanship" by Robert C. Martin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Chapter 3. "Bad Smells in Code" of the book "Refactoring: Improving the Design of Existing Code" by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://c2.com/cgi/wiki?CodeSmell"&gt;Code Smell&lt;/a&gt; catalog on the site of Ward Cunningham&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Refactoring To Patterns" by Joshua Kerievsky&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id36"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id89"&gt;Другие подборки литературы&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/sindresorhus/awesome"&gt;Awesome lists&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/heynickc/awesome-ddd"&gt;Awesome Domain-Driven Design&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/valignatev/ddd-dynamic"&gt;Domain Driven Design in Python, Ruby and other dynamic languages resources&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/mfornos/awesome-microservices"&gt;Awesome Microservices&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/unlight/solution-architecture"&gt;Solution Architecture links, articles, books, video lessons, etc.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/tayllan/awesome-algorithms"&gt;Awesome Algorithms&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/gaerae/awesome-algorithms-education"&gt;Awesome Algorithms Education&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/donnemartin/system-design-primer"&gt;The System Design Primer&lt;/a&gt; - Learn how to design large-scale systems. Prep for the system design interview.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/prakhar1989/awesome-courses"&gt;List of awesome university courses for learning Computer Science&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://e-maxx.ru/bookz/"&gt;MAXimal :: bookz - электронные версии различных книг по алгоритмам&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.kamilgrzybek.com/programming-and-design-resources/"&gt;Programming and design learning resources by Kamil Grzybek&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://sergeyteplyakov.blogspot.com/2013/08/blog-post.html"&gt;Список книг от Сергея Теплякова&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://handbookofsoftwarearchitecture.com/books/"&gt;Список книг от Grady Booch&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.luxoft-training.ru/about/experts/answers/302/30945/"&gt;Книги по направлению Архитектура и проектирование ПО от эксперта luxoft&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://architectelevator.com/architecture/architect-path/"&gt;The Architect's Path (Part 1 - Model)&lt;/a&gt; by Gregor Hohpe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://architectelevator.com/architecture/architect-bookshelf/"&gt;The Architect's Path (Part 2 - Implementation)&lt;/a&gt; by Gregor Hohpe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.developertoarchitect.com/books.html"&gt;Software Architecture Book References&lt;/a&gt; by Mark Richards&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://apolomodov.medium.com/software-design-books-743be52e4c71"&gt;Как прокачаться в проектировании программного обеспечения — список книг&lt;/a&gt; by Alexander Polomodov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ruxpert.ru/%D0%98%D1%81%D0%BA%D1%83%D1%81%D1%81%D1%82%D0%B2%D0%BE_%D1%81%D0%BF%D0%BE%D1%80%D0%B0_(%D0%BE%D0%B1%D1%83%D1%87%D0%B0%D1%8E%D1%89%D0%B8%D0%B5_%D0%BC%D0%B0%D1%82%D0%B5%D1%80%D0%B8%D0%B0%D0%BB%D1%8B)"&gt;Искусство спора (обучающие материалы)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://m.vk.com/wall-56611080_127534"&gt;Книги по риторике&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id37"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id90"&gt;Почтовые рассылки и сообщества&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://dddcommunity.org/"&gt;Domain Driven Design Community&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://dddweekly.com/"&gt;Domain Driven Design Weekly&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://microserviceweekly.com/"&gt;Microservice Weekly&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reference-applications-ru"&gt;
&lt;span id="id38"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id91"&gt;Эталонные демонстрационные приложения&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/dotnet-architecture/eShopOnContainers"&gt;eShopOnContainers&lt;/a&gt; (CQRS, DDD, Microservices)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/microsoftarchive/cqrs-journey"&gt;Microsoft patterns &amp;amp; pratices CQRS Journey sample application&lt;/a&gt; (CQRS, DDD, Event Sourcing, SAGA transactions)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"A perfect example of this [you can see] if you go look at the CQRS and Event Sourcing by Microsoft Patterns and Practices, which is heavily focused on doing this inside of Azure using their toolkits."&lt;/p&gt;
&lt;p&gt;- Greg Young, "&lt;a class="reference external" href="https://youtu.be/LDW0QWie21s?t=1092"&gt;A Decade of DDD, CQRS, Event Sourcing&lt;/a&gt;" at 18:15&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/kgrzybek/modular-monolith-with-ddd"&gt;Full Modular Monolith application with Domain-Driven Design approach&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/kgrzybek/sample-dotnet-core-cqrs-api"&gt;Sample .NET Core REST API CQRS implementation with raw SQL and DDD using Clean Architecture&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/kgrzybek/refactoring-from-anemic-to-rich-domain-model-example"&gt;Refactoring from anemic to rich Domain Model example&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/VaughnVernon/IDDD_Samples_NET"&gt;Sample Bounded Contexts for C#.NET from the book "Implementing Domain-Driven Design"&lt;/a&gt; by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/VaughnVernon/IDDD_Samples"&gt;Sample Bounded Contexts from the book "Implementing Domain-Driven Design"&lt;/a&gt; by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vlingo/xoom-examples"&gt;xoom-examples&lt;/a&gt; - the VLINGO XOOM examples demonstrating features and functionality available in the reactive components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implementation of samples from the book "Domain-Driven Design" by Eric Evans in &lt;a class="reference external" href="https://github.com/citerus/dddsample-core"&gt;Java&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/SzymonPobiega/DDDSample.Net"&gt;C#&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/paulrayner/ddd_sample_app_ruby"&gt;Ruby&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/marcusolsson/goddd"&gt;Golang&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/go-kit/kit/tree/master/examples/shipping"&gt;yet another Golang&lt;/a&gt;). See also &lt;a class="reference external" href="https://www.citerus.se/go-ddd"&gt;the article&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://goa.design/"&gt;Goa&lt;/a&gt; provides a holistic approach for developing remote APIs and microservices in Go.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/gregoryyoung/m-r"&gt;Simple CQRS example&lt;/a&gt; by Greg Young (приложение так же реализует Event Sourcing)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/thinkbeforecoding/m-r"&gt;Greg Young's Simple CQRS in F#&lt;/a&gt; by Jérémie Chassaing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example"&gt;Complete serverless application to show how to apply DDD, Clean Architecture, and CQRS by practical refactoring of a Go project&lt;/a&gt; (&lt;a class="reference external" href="https://threedots.tech/post/serverless-cloud-run-firebase-modern-go-application/"&gt;more info&lt;/a&gt;) by Robert Laszczak&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/ThreeDotsLabs/monolith-microservice-shop"&gt;Clean Monolith Shop&lt;/a&gt; by Robert Laszczak - Source code for &lt;a class="reference external" href="https://threedots.tech/post/microservices-or-monolith-its-detail/"&gt;Why using Microservices or Monolith can be just a detail?&lt;/a&gt; article&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonStoeckl/go-iddd"&gt;go-iddd - showcase project for implementing DDD in Go&lt;/a&gt; by Anton Stöckl (see more info &lt;a class="reference external" href="https://medium.com/@TonyBologni/implementing-domain-driven-design-and-hexagonal-architecture-with-go-1-292938c0a4d4"&gt;here&lt;/a&gt; and &lt;a class="reference external" href="https://medium.com/@TonyBologni/implementing-domain-driven-design-and-hexagonal-architecture-with-go-2-efd432505554"&gt;here&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/asynkron/realtimemap-go"&gt;Real-time Map&lt;/a&gt; displays real-time positions of public transport vehicles in Helsinki. It's a showcase for &lt;a class="reference external" href="https://proto.actor/"&gt;Proto.Actor&lt;/a&gt; - an ultra-fast distributed actors solution for Go, C#, and Java/Kotlin. See also &lt;a class="reference external" href="https://github.com/asynkron/realtimemap-dotnet"&gt;realtimemap-dotnet&lt;/a&gt; implementation in .NET.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/johnbywater/es-example-taxi-demo"&gt;Demo taxi system, using eventsourcing library&lt;/a&gt; by John Bywater&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/johnbywater/es-example-bank-accounts"&gt;Example "bank accounts" application using the Python eventsourcing library&lt;/a&gt; by John Bywater&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/johnbywater/es-example-cargo-shipping"&gt;Example "cargo shipping" application using the Python eventsourcing library&lt;/a&gt; by John Bywater&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/johnbywater/eventsourcing/tree/main/eventsourcing/examples"&gt;Examples of using eventsourcing library&lt;/a&gt; by John Bywater&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/microservices-patterns/ftgo-application"&gt;FTGO example application. Example code for the book Microservice patterns&lt;/a&gt; by Chris Richardson&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/eventuate-tram/eventuate-tram-examples-customers-and-orders/"&gt;Eventuate Tram Customers and Orders&lt;/a&gt; by Chris Richardson&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/eventuate-examples/eventuate-tram-core-dotnet-examples-customers-and-orders"&gt;Eventuate Tram Customers and Orders - .NET version&lt;/a&gt; by Chris Richardson&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/eventuate-examples"&gt;eventuate-examples&lt;/a&gt; by Chris Richardson&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/elbandit/PPPDDD"&gt;Sample code for the book Principles, Practices and Patterns of Domain-Driven Design&lt;/a&gt; by Scott Millett, Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/PacktPublishing/Hands-On-Domain-Driven-Design-with-.NET-Core"&gt;Hands-On Domain-Driven Design with .NET Core, published by Packt&lt;/a&gt; by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://github.com/Eventuous/dotnet-sample"&gt;dotnet-sample&lt;/a&gt;" - Sample application using Eventuous .NET by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/swlaschin/DomainModelingMadeFunctional"&gt;Extended code samples related to the book "Domain Modeling Made Functional"&lt;/a&gt; by Scott Wlaschin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/swlaschin/Railway-Oriented-Programming-Example"&gt;Railway-Oriented-Programming-Example&lt;/a&gt; by Scott Wlaschin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/andorp/order-taking"&gt;Order Taking Service&lt;/a&gt; - Idris version of Domain Modeling Made Functional Book.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/VaughnVernon/DDDwithActors"&gt;DDD with Actors&lt;/a&gt; by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/VaughnVernon/ReactiveMessagingPatterns_ActorModel"&gt;The examples for the book "Reactive Messaging Patterns with the Actor Model"&lt;/a&gt; by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/VaughnVernon/reactive-stock-trader"&gt;A Stock Trader system to demonstrate reactive systems development&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/RedElastic/reactive-stock-trader"&gt;source&lt;/a&gt; by RedElastic)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/jbogard/ContosoUniversityDotNetCore-Pages"&gt;ContosoUniversityDotNetCore-Pages&lt;/a&gt; by Jimmy Bogard&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/RedElastic/reactive-stock-trader"&gt;RedElastic: reactive-stock-trader&lt;/a&gt; - A reference architecture for stock trading to demonstrate the concepts of reactive systems development. Based on the original Stock Trader by IBM and implemented with Lagom by Lightbend. "&lt;a class="reference external" href="https://developer.ibm.com/series/reactive-in-practice/"&gt;Reactive in practice: A complete guide to event-driven systems development in Java.&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/IBMStockTrader"&gt;IBM Stock Trader&lt;/a&gt; - Org containing a repository per microservice in the IBM Stock Trader cloud-native sample application. "&lt;a class="reference external" href="https://developer.ibm.com/blogs/introducing-stocktrader/"&gt;Introduction to the IBM Stock Trader sample.&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/AnemicDomainModel"&gt;Refactoring from Anemic Domain Model Towards a Rich One&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/DddInAction"&gt;DDD in Practice&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/DddAndEFCore"&gt;DDD and EF Core&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/CqrsInPractice"&gt;CQRS in Practice&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/FuntionalPrinciplesCsharp"&gt;Applying Functional Principles in C#&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/SpecPattern"&gt;Specification Pattern in C#&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/SpecificationPattern"&gt;Specification pattern implementation in C#&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/ValidationInDDD"&gt;Validation in DDD course&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Варианты реализации OO/Functional Aggregates на примере Reference Applications by Chris Richardson:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/cer/event-sourcing-examples/tree/master/java-spring"&gt;Traditional OO mutable Domain Objects&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/cer/event-sourcing-using-scala-typeclasses"&gt;Functional Scala witn immutable Domain Objects&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/cer/event-sourcing-examples/tree/master/scala-spring"&gt;Hybrid OO/Functional Scala with immutable Domain Objects&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Others:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/heynickc/awesome-ddd#sample-projects"&gt;DDD Sample Projects&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Психологическое значение планирования</title><link>https://dckms.github.io/system-architecture/emacsway/soft-skills/planning-in-psychology.html</link><description>&lt;span class="target" id="index-0"/&gt;&lt;div class="section" id="emacsway-planning-in-psychology"&gt;
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;div class="contents topic" id="id2"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#emacsway-planning-in-psychology" id="id7"&gt;Психологическое значение планирования&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id8"&gt;Планирование в управлении&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id9"&gt;Планирование в обучении&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id5" id="id10"&gt;Влияние психологического напряжения на здоровье&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id6" id="id11"&gt;Выводы&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Планирование в управлении&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Есть одна интересная книга - "Planning Extreme Programming" by Kent Beck, Martin Fowler.
В ней Kent Beck рассказывает о том, какую огромную роль играет планирование для снятия психологического напряжения у менеджмента.
Все просто - без плана человек не может наблюдать превосходства ресурсов над Scope (объем работ) за оставшийся период времени.
Неопределенность вызывает беспокойство и напряжение.
Чтобы снять напряжение, нужно сконцентрировать ресурсы на каждом временном отрезке таким образом, чтобы они превосходили Scope.
Т.е. сделать перегруппировку сил.
Без хорошего планирования у менеджмента обычно всегда начинается спешка, а у разработчиков начинается проблема 90/90:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The first 90 percent of the code accounts for the first 90 percent of the development time.
The remaining 10 percent of the code accounts for the other 90 percent of the development time."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Планирование в обучении&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Один из наиболее важных навыков, который снимает панику и депрессию разработчика - это планирование самообучения.
Без планирования огромный наукоемкий горизонт требуемых знаний будет перегружать психику, обостряя "эффект самозванца".
И чем больше вы в индустрии, тем больше растет груз того, что &lt;a class="reference internal" href="../it/self-education/self-education-for-software-engineer.html"&gt;&lt;span class="doc"&gt;нужно знать&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Вы заметили, что в школе оценивают не уровень знаний, а успеваемость?
Не нужно знать все, нужно просто успевать выполнять свой собственный план самообучения.
Без плана вся тяжесть требуемых знаний фокусируется в текущий момент времени, и обладает превосходством над ресурсами мозга.
Это вызывает беспокойство.
Задача в том, чтобы спозиционировать осваиваемый объем знаний на таких отрезках времени, где уже ресурсы мозга будут обладать превосходством над ним.
Как говорил Дейл Карнеги - одна песчинка песочных часов - в единицу времени, иначе часы сломаются.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Влияние психологического напряжения на здоровье&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Напряжение морально-психологическое приводит к напряжению реальному, физическому, в виде спазма мышц.
Самыми незащищенными оказываются самые маленькие мышцы - хрусталика глаза.
Напряжение приводит к спазму аккомодации, который затем переходит в миопию.
Неслучайно большинство популярных методик восстановления зрения начинаются со снятия психологического напряжения.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Выводы&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Хотели "волшебную пилюлю" успеха? Вот она - из всего фронта выделяйте такой участок, на котором вы способны &lt;a class="reference internal" href="icebreaker-principle.html"&gt;&lt;span class="doc"&gt;сконцентрировать усилия и обеспечить превосходство&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Вот так все просто, есть план - будет спокойствие.
Лучшая форма планирования - это визуализация.
Можно рисовать таблички, можно timelines, можно использовать Kanban доску Trello или Notion, можно использовать &lt;a class="reference external" href="https://t.me/emacsway_log/644"&gt;org-mode&lt;/a&gt; и т.д.&lt;/p&gt;
&lt;p&gt;Когда план готов, то единственное, что остается нужным - это &lt;a class="reference external" href="https://t.me/emacsway_log/251"&gt;дисциплина&lt;/a&gt;, которая обеспечивает постоянство скорости обретения знаний.&lt;/p&gt;
&lt;p&gt;Суть в том, что в отличии от огромного объема недостающих знаний, на освоение которых требуются годы, овладеть дисциплиной вы можете прямо сейчас.
Осознание этого факта снижает психологическую зависимость от недостающих знаний.&lt;/p&gt;
&lt;p&gt;Кстати, тут Сергей, один из лучших теоретиков, которого я когда либо знал, паблик-спикер, автор книги и многочисленных статей, на днях запостил новое видео о роли &lt;a class="reference external" href="https://www.instagram.com/p/CUJuSrxgkZI/"&gt;дисциплины&lt;/a&gt;.
У человека или есть дисциплина, и тогда он успевает все, или её нет, и тогда он ничего не успевает.
Правда, сам Сергей говорит, что все дело, скорее, в правильных привычках, нежели в волевых усилиях.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "I'm not a great programmer; I'm just a good programmer with great habits."&lt;/p&gt;
&lt;p class="attribution"&gt;—Kent Beck at "Refactoring: Improving the Design of Existing Code" 1st edition by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Для того, чтобы стать сильным специалистом, достаточно осваивать всего 5 страниц в день:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "A little reading goes a long way toward professional advancement.
If you read even one good programming book every two months, roughly 35 pages a week, you'll soon have a firm grasp on the industry and distinguish yourself from nearly everyone around you."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "We become authorities and experts in the practical and scientific spheres by so many separate acts and hours of work.
If a person keeps faithfully busy each hour of the working day, he can count on waking up some morning to find himself one of the competent ones of his generation."&lt;/p&gt;
&lt;p class="attribution"&gt;—William James&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;См.также&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="icebreaker-principle.html"&gt;&lt;span class="doc"&gt;Принцип ледокола&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="learning.html#emacsway-learning-in-psychology"&gt;&lt;span class="std std-ref"&gt;Кристаллизация знаний. Как читать и не превратиться в коллекционера информации.&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../README.html"&gt;&lt;span class="doc"&gt;Как пользоваться&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../it/self-education/self-education-for-software-engineer.html"&gt;&lt;span class="doc"&gt;Список литературы для самообучения разработчика программного обеспечения&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Systems Development Life Cycle (SDLC) Reference</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/sdlc-reference.html</link><description>
&lt;span id="index-0"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Grady Booch выделяет два ключевых критерия, которые определяют успех или неудачу проекта:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Traits of Successful Projects&lt;/p&gt;
&lt;p&gt;A successful software project is one in which the deliverables satisfy and possibly exceed the customer's expectations, the development occurred in a timely and economical fashion, and the result is resilient to change and adaptation. By this measure, we have observed several traits that are common to virtually all of the successful object-oriented systems we have encountered and noticeably absent from the ones that we count as failures:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Existence of a strong architectural vision&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Application of a well-managed iterative and incremental development lifecycle"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="attribution"&gt;—"Object-Oriented Analysis and Design with Applications" 3rd edition by Grady Booch, Robert A. Maksimchuk, Michael W. Engle, Bobbi J. Young Ph.D., Jim Conallen, Kelli A. Houston&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Если с "architectural vision" все понятно, то с "well-managed development lifecycle" у многих могут возникать вопросы. Тем не менее, для успешности проекта процессы должны быть грамотно выбраны и качественно отлажены.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://book4cio.ru/#page-14"&gt;Учебник 4CIO&lt;/a&gt;" - глава 3.4. Управление разработкой ПО&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.sebokwiki.org/wiki/Life_Cycle_Models"&gt;SEBoK: Life Cycle Models&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.sebokwiki.org/wiki/System_Life_Cycle_Process_Models:_Iterative"&gt;SEBoK: System Life Cycle Process Models: Iterative&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Неплохой "&lt;a class="reference external" href="https://www.tutorialspoint.com/sdlc/index.htm"&gt;SDLC Tutorial&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.tutorialspoint.com/sdlc/sdlc_quick_guide.htm"&gt;SDLC - Quick Guide&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://itabok.iasaglobal.org/itabok3_0/architecture-methodologies-and-frameworks/"&gt;ITABoK: Architecture Methodologies and Frameworks&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://itabok.iasaglobal.org/itabok3_0/digital-outcome-model/agility/"&gt;ITABoK: What is Agility&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.incose.org/products-and-publications/se-handbook"&gt;Systems engineering handbook. A guide for System Life Cycle Processes and activities&lt;/a&gt;" by INCOSE&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.iso.org/standard/63712.html"&gt;ISO/IEC/IEEE 12207:2017 Systems and software engineering — Software life cycle processes&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.iso.org/standard/63711.html"&gt;ISO/IEC/IEEE 15288:2015 Systems and software engineering — System life cycle processes&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ISO/IEC/IEEE 29148:2011 Systems and software engineering — Life cycle processes — Requirements engineering"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ISO/IEC/IEEE 15289:2019 Systems and software engineering — Content of life-cycle information items (documentation)"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ISO/IEC/IEEE 24765:2017 Systems and software engineering — Vocabulary"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ISO 9000:2005 Quality management systems — Fundamentals and vocabulary"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ISO/IEC 33001:2015 Information technology — Process assessment — Concepts and terminology"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ГОСТ Р ИСО/МЭК 12207-2010 Информационная технология. Системная и программная инженерия. Процессы жизненного цикла программных средств."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ГОСТ Р 57193-2016 Системная и программная инженерия. Процессы жизненного цикла систем."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Object-Oriented Analysis and Design with Applications" 3rd edition by Grady Booch, Robert A. Maksimchuk, Michael W. Engle, Bobbi J. Young Ph.D., Jim Conallen, Kelli A. Houston - "Chapter 6. Process"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Software Architecture in Practice" 3d edition by Len Bass, Paul Clements, Rick Kazman - "Chapter 15. Architecture in agile projects"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Extreme Programming Explained" 1st edition by Kent Beck (именно первое издание) - кто этой книги не читал, тот ничего в Agile не понимает.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Три превосходные книги Dean Leffingwell:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Scaling Software Agility: Best Practices for Large Enterprises" by Dean Leffingwell - о проблемах масштабирования команд.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise" by Dean Leffingwell - о проблемах интегрирования аналитической и архитектурной работы в Agile.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"SAFe® 5.0: The World's Leading Framework for Business Agility" by Richard Knaster, Dean Leffingwell - наиболее удачная масштабируемая Agile-модель на сегодня.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Essential Scrum: A Practical Guide to the Most Popular Agile Process" by Kenneth Rubin - главы 3 и 8 просто необходимы для понимания области применения Scrum.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://t.me/emacsway_log/431"&gt;https://t.me/emacsway_log/431&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://t.me/emacsway_log/35"&gt;https://t.me/emacsway_log/35&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://t.me/emacsway_log/151"&gt;https://t.me/emacsway_log/151&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.craiglarman.com/wiki/downloads/misc/history-of-iterative-larman-and-basili-ieee-computer.pdf"&gt;Краткая история итеративной разработки&lt;/a&gt;" by Craig Larman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://less.works/less/framework/introduction"&gt;LeSS by Craig Larman&lt;/a&gt;" - куча полезной информации, которую можно использовать автономно. (&lt;a class="reference external" href="https://less.works/ru/less/framework/introduction"&gt;на русском&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Нужно заметить, что Software является подмножеством System.
Раньше и Software, и System описывались одним стандартом ISO/IEC 12207:2008.
Потом их разделили на ISO/IEC/IEEE 12207:2017 и ISO/IEC/IEEE 15288:2015.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "This document has a strong relationship with ISO/IEC/IEEE 15288:2015, Systems and Software Engineering System Life Cycle Processes, and is more applicable to software systems.
To account for situations in which both ISO/IEC/IEEE 15288:2015 and ISO/IEC/IEEE 12207:2017 are applied (e.g., a development of a system containing software, or the development of a software system containing hardware), their process structures are harmonized to be identical.
The processes of this document directly correspond to processes of ISO/IEC/IEEE 15288 with specialization for software products and services."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Что такое Agile Development</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/models/agile/agile.html</link><description>
&lt;span id="emacsway-agile-development"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#agile-development" id="id8"&gt;Что такое Agile Development&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id2" id="id9"&gt;Определение&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id10"&gt;История&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id11"&gt;Суть&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#emacsway-agile-development-difficulties" id="id12"&gt;О сложностях&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Определение&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Agile development - software development approach based on &lt;a class="reference internal" href="../iterative.html#emacsway-iterative-development"&gt;&lt;span class="std std-ref"&gt;iterative development&lt;/span&gt;&lt;/a&gt;, frequent inspection and adaptation, and incremental deliveries, in which requirements and solutions evolve through collaboration in cross‐functional teams and through continual stakeholder feedback."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 ""Agile" methods actually can be applied within a variety of models.
While Agile methods are common in executing an evolutionary lifecycle model, they can be used in other lifecycle models at various stages.
What the methods have in common is an emphasis on continuous inspection and collaboration in the rapid production of working software in an environment where changes, including changes to requirements, are expected."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "As discussed in 5.4.2, the life cycle models used in agile projects are often highly &lt;a class="reference internal" href="../incremental.html#emacsway-incremental-development"&gt;&lt;span class="std std-ref"&gt;incremental&lt;/span&gt;&lt;/a&gt; and &lt;a class="reference internal" href="../evolutionary.html#emacsway-evolutionary-development"&gt;&lt;span class="std std-ref"&gt;evolutionary&lt;/span&gt;&lt;/a&gt;."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;История&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Agile является естественным следствием эволюции итеративной разработки, краткий обзор которой можно посмотреть в превосходной статье Craig Larman "&lt;a class="reference external" href="https://www.craiglarman.com/wiki/downloads/misc/history-of-iterative-larman-and-basili-ieee-computer.pdf"&gt;Iterative and Incremental Development: A Brief History&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;Как уже говорилось ранее, итеративная модель разработки открывает широкие возможности для &lt;a class="reference internal" href="../../uncertainty-management/adaptation/adaptation.html#emacsway-adaptation"&gt;&lt;span class="std std-ref"&gt;удешевления обработки неопределенности&lt;/span&gt;&lt;/a&gt;.
Однако долгое время эти возможности оставались экономически нецелесообразными по причине быстрорастущего характера роста стоимости &lt;a class="reference internal" href="../../uncertainty-management/adaptation/adaptation.html#emacsway-adaptation"&gt;&lt;span class="std std-ref"&gt;Adaptation&lt;/span&gt;&lt;/a&gt;, приближющегося к экспоненциальному.
При таком характере роста возникает экономическая целесообразность принимать решения в момент наименьшей стоимости их реализации, вплоть до заблаговременного проектирования (BDUF).&lt;/p&gt;
&lt;div class="figure align-left" id="id6"&gt;
&lt;a class="reference internal image-reference" href="../../../../../_images/exponential-cost-of-change.png"&gt;&lt;img alt="Figure 1. The cost of change rising exponentially over time. The image source is &amp;quot;Extreme Programming Explained&amp;quot; 1st edition by Kent Beck, &amp;quot;Chapter 5. Cost of Change&amp;quot;." src="../../../../../_images/exponential-cost-of-change.png" style="width: 90%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Figure 1. The cost of change rising exponentially over time. The image source is "Extreme Programming Explained" 1st edition by Kent Beck, "Chapter 5. Cost of Change".&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Однако, в конце 1990-х - начале 2000-х, в архитектурном мире произошли существенные изменения - обрели массовую популярность высокоуровневые объектно-ориентированные языки, появились &lt;a class="reference internal" href="../../uncertainty-management/adaptation/software-design/patterns.html#emacsway-agile-patterns"&gt;&lt;span class="std std-ref"&gt;шаблоны&lt;/span&gt;&lt;/a&gt; и принципы проектирования, методики управления сложностью (ROM, POSA, GOF, OOAD, SOLID, Use Case Driven Approach, Object-Oriented Software Construction etc.), появились TDD, Refactoring и т.п.&lt;/p&gt;
&lt;p&gt;Унификация знаний в области архитектуры, переход ментального оперирования на элементы унифицированных шаблонных конструкций более высокого уровня абстракции, позволили сократить когнитивную и коммуникативную нагрузку на разработчика, уменьшить порог вхождения в новый проект, смягчить негативное воздействие Закона Брукса.&lt;/p&gt;
&lt;p&gt;Рост количественных изменений привел к изменениям качественным - ведущим умам архитектуры своего времени удалось снизить характер роста стоимости адаптации вплоть до пологого графика, максимально приближенного к горизонтальной асимптоте.
Это означало, что стоимость реализации решения больше не зависело от момента его принятия, что позволило отказаться от заблаговременного проектирования и откладывать принятие решения до момента наибольшей полноты информированности, даже после частичной реализации продукта.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "What would we do if all that investment paid off?
What if all that work on languages and databases and whatnot actually got somewhere?
What if the cost of change didn't rise exponentially overtime, but rose much more slowly, &lt;strong&gt;eventually reaching an asymptote&lt;/strong&gt;?
What if tomorrow's software engineering professor draws Figure 3 on the board?"&lt;/p&gt;
&lt;p class="attribution"&gt;—"Extreme Programming Explained" 1st edition by Kent Beck, "Chapter 5. Cost of Change"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="figure align-left" id="id7"&gt;
&lt;a class="reference internal image-reference" href="../../../../../_images/flatten-cost-of-change.png"&gt;&lt;img alt="Figure 3. The cost of change may not rise dramatically over time. The image source is &amp;quot;Extreme Programming Explained&amp;quot; 1st edition by Kent Beck, &amp;quot;Chapter 5. Cost of Change&amp;quot;." src="../../../../../_images/flatten-cost-of-change.png" style="width: 90%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Figure 3. The cost of change may not rise dramatically over time. The image source is "Extreme Programming Explained" 1st edition by Kent Beck, "Chapter 5. Cost of Change".&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Что такое асимтота, можно посмотреть в "§284 Асимтоты" Справочника по высшей математике / М.Я. Выгодский:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Прямая АВ называется асимптотой линии L, если расстояние МК (черт. 297) от точки М линии L до прямой АВ стремится к нулю при удалении точки М в бесконечность."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Справочник по высшей математике" / М.Я. Выгодский&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;В нашем случае, нас интересует Асимптоты, параллельная оси абсцисс (там же):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Для разыскания горизонтальных асимптот линии y = f(х) ищем пределы f(х) при х -&amp;gt; +∞ и при х -&amp;gt; -∞. Если lim х-&amp;gt;∞ f(x) = b, то прямая у = b - асимптота (при бесконечном удалении вправо; черт. 299)."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Справочник по высшей математике" / М.Я. Выгодский&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Суть&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Вся суть Agile (итеративной) модели разработки была лаконично и метко выражена Кент Беком всего одним предложением:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Сделайте изменение легким, а потом делай легко изменение.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make the change easy then make the easy change.&lt;/strong&gt;"&lt;/p&gt;
&lt;p class="attribution"&gt;—Kent Beck, dddeu 20&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Невероятный талант Kent Beck объяснять сложные вещи простым языком.
Именно об этом я говорил в статье "&lt;a class="reference internal" href="../../../../soft-skills/learning.html#emacsway-learning-in-psychology"&gt;&lt;span class="std std-ref"&gt;Кристаллизация знаний. Как читать и не превратиться в коллекционера информации.&lt;/span&gt;&lt;/a&gt;".
И это при необычайной эрудированности Kent Beck. Cписок использованной литературы в его книгах просто ошеломляет.&lt;/p&gt;
&lt;p&gt;Thanks to Vladik Khononov for &lt;a class="reference external" href="https://youtu.be/ybYtgII151g?t=9808"&gt;https://youtu.be/ybYtgII151g?t=9808&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Более развернутый вариант его фразы:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "At the core of understanding this argument is the software change curve.
The change curve says that as the project runs, it becomes exponentially more expensive to make changes.
The change curve is usually expressed in terms of phases "a change made in analysis for $1 would cost thousands to fix in production".
This is ironic as most projects still work in an ad-hoc process that doesn't have an analysis phase, but the exponentiation is still there.
&lt;strong&gt;The exponential change curve means that evolutionary design cannot possibly work.&lt;/strong&gt;
It also conveys why planned design must be done carefully because any mistakes in planned design face the same exponentiation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The fundamental assumption underlying XP is that it is possible to flatten the change curve enough to make evolutionary design work.&lt;/strong&gt;
This flattening is both enabled by XP and exploited by XP.
This is part of the coupling of the XP practices: specifically &lt;strong&gt;you can't do those parts of XP that exploit the flattened curve without doing those things that enable the flattening.&lt;/strong&gt;
This is a common source of the controversy over XP.
Many people criticize the exploitation without understanding the enabling.
Often the criticisms stem from critics' own experience where they didn't do the enabling practices that allow the exploiting practices to work.
As a result they got burned and when they see XP they remember the fire."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/designDead.html"&gt;Is Design Dead?&lt;/a&gt;" by M.Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "&lt;strong&gt;This is one of the premises of XP. It is the technical premise of XP.&lt;/strong&gt;
If the cost of change rose slowly over time, you would act completely differently from how you do under the assumption that costs rise exponentially.
You would make big decisions as late in the process as possible, to defer the cost of making the decisions and to have the greatest possible chance that they would be right.
You would only implement what you had to, in hopes that the needs you anticipate for tomorrow wouldn't come true.
You would introduce elements to the design only as they simplified existing code or made writing the next bit of code simpler.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If a flattened change cost curve makes XP possible, a steep change cost curve makes XP impossible.&lt;/strong&gt;
If change is ruinously expensive, you would be crazy to charge ahead without careful forethought.
But if change stays cheap, the additional value and reduced risk of early concrete feedback outweighs the additional cost of early change."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Extreme Programming Explained" 1st edition by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Поскольку это было произнесено еще до встречи 2001 года и принятия Agile Manifesto, то под XP следует понимать Agile (или даже любую итератиную модель разработки) в принципе, поскольку XP - это частный случай Agile.&lt;/p&gt;
&lt;p&gt;Иными словами, внутреннее качество программы является первичным условием в Agile и в любой другой итеративной разработке.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Engineers who don't understand exponential growth and the cost curve as economies of scale kick in come to wildly incorrect conclusions."&lt;/p&gt;
&lt;p class="attribution"&gt;—Kent Beck, &lt;a class="reference external" href="https://twitter.com/KentBeck/status/1402276528910704655?s=19"&gt;https://twitter.com/KentBeck/status/1402276528910704655?s=19&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The incremental and iterative nature of Agile development can facilitate &lt;strong&gt;efficient technical and management processes and practices to reduce the cost associated with change&lt;/strong&gt;.
In comparison, projects managed at the waterfall end of the continuum seek to reduce total rework cost by minimizing the number of changes, limiting the number of control points, and baselining detailed specifications which are reviewed and traced throughout the project."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;О том, почему я обратился к высказываю Kent Beck в этом вопросе, неплохо поясняет Martin Fowler:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Extreme Programming (XP) is a software development methodology developed primarily by Kent Beck.
XP was one of the first agile methods, indeed XP was the dominant agile method in the late 90s and early 00s before Scrum became dominant as the noughties passed.
Many people (including myself) consider XP to be the primary catalyst that got attention to agile methods, and superior to Scrum as a base for starting out in agile development."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/bliki/ExtremeProgramming.html"&gt;Extreme Programming&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="emacsway-agile-development-difficulties"&gt;
&lt;span id="id5"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;О сложностях&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Вернемся еще раз к выражению Kent Beck "&lt;em&gt;сделайте изменение легким, а потом делай легко изменение&lt;/em&gt;".
Оно состоит из двух частей, причем, первая из них предшествует второй.
Как раз именно первую часть нередко забывают сделать на современном рынке, а без первой части вторая часть работает не будет, как это нетрудно догадаться.
Так недалеко и до полного Уроборос.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Scrum is ok if you do it right."&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://youtu.be/0oGpWmS0aYQ?t=921"&gt;OOP 2015 Keynote - Robert C. Martin ("Uncle Bob"): Agility and Architecture at 15:21&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "One pattern I see time and time again on software teams is that they adopt Scrum, pay little attention to technical practices, and they're able to consistently increase their velocity for the first few years.
But after about three or four years the technical debt they've accumulated in their code is so great that their velocity starts to grind to a halt and they find it difficult to even get simple features implemented.
This is a place you do not want to get to, though I see it far too often in the software community—teams stuck there without a clue how to get out."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://www.agilealliance.org/how-to-increase-velocity/"&gt;How to Increase Velocity&lt;/a&gt;" by David Bernstein&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Происходит это во многом потому, что:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Я узнал от Jeff Sutherland, что первый Scrum на самом деле использовал все XP практики.
Но Ken Schwaber убедил его оставить инженерные практики за рамками Scrum, чтобы упростить модель и позволить командам брать на себя ответственность за выбор тех или иных практик.
Возможно, это ускорило распространение Scrum, но с другой стороны многие команды страдают из-за отсутствия технических практик, позволяющих поддерживать постоянный темп гибкой разработки.&lt;/p&gt;
&lt;p&gt;I learned from Jeff Sutherland that the first Scrum actually did all the XP practices.
But Ken Schwaber convinced him to leave the engineering practices out of Scrum, to keep the model simple and let the teams take responsibility for the tech practices themselves.
Perhaps this helped spread Scrum faster, but the downside is that a lot of teams suffer because they lack the technical practices that enable sustainable agile development."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Scrum and XP from the Trenches: How We Do Scrum" 2nd edition by Henrik Kniberg, перевод под редакцией Алексея Кривицкого&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Последнее предложение приведенной выше цитаты выражает то же самое, но другими словами.
А ведь еще в 2004 г., в книге "Agile Project Management with Scrum" by Ken Schwaber, Scrum назывался методологий.&lt;/p&gt;
&lt;p&gt;Позвольте еще раз повторить слова Kent Beck:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "If a flattened change cost curve makes XP possible, a steep change cost curve makes XP impossible."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Extreme Programming Explained" 1st edition by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Impossible. Точка.&lt;/p&gt;
&lt;p&gt;Если говорить более развернуто, то, конечно же, это не совсем "Impossible", просто это становится экономически нецелесообразным, поскольку при быстрорастущем графике изменения кода возникает экономическая целесообразность принимать решения в момент наименьшей стоимости их реализации, вплоть до заблаговременного проектирования.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "To make agile work, you need solid technical practices.
A lot of agile education under-emphasizes these, but if you skimp on this you won't gain the productivity and responsiveness benefits that agile development can give you (stranding you at level 1 of the agile fluency model.)
This is one of the reasons that I still think that Extreme Programming is the most valuable of the named agile methods as a core and starting point."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/agile.html"&gt;Agile Software Development&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Этому вопросу посвящена статья "&lt;a class="reference external" href="https://martinfowler.com/articles/designDead.html"&gt;Is Design Dead?&lt;/a&gt;" by Martin Fowler.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "In its common usage, evolutionary design is a disaster.
The design ends up being the aggregation of a bunch of ad-hoc tactical decisions, each of which makes the code harder to alter.
In many ways you might argue this is no design, certainly it usually leads to a poor design.
As Kent puts it, &lt;strong&gt;design is there to enable you to keep changing the software easily in the long term.&lt;/strong&gt;
&lt;strong&gt;As design deteriorates, so does your ability to make changes effectively.&lt;/strong&gt;
You have the state of software entropy, over time the design gets worse and worse.
Not only does this make the software harder to change, it also makes bugs both easier to breed and harder to find and safely kill.
This is the "code and fix" nightmare, where the bugs become exponentially more expensive to fix as the project goes on."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/designDead.html"&gt;Is Design Dead?&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "If you're a manager or customer how can you tell if the software is well designed?
It matters to you because poorly designed software will be more expensive to modify in the future."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/designDead.html"&gt;Is Design Dead?&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;И очень удачно по этому вопросу высказался Grady Booch:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Grady Booch has also provided a set of guidelines for an agile architecture (which in turn imply some duties for the agile architect).
Booch claims that all good software-intensive architectures are agile.
What does he mean by this? He means that a successful architecture is resilient and loosely coupled.
It is composed of a core set of well-reasoned design decisions but still contains some "wiggle room" that allows modifications to be made and refactorings to be done, without ruining the original structure.&lt;/p&gt;
&lt;p&gt;Booch also notes that an effective agile process will allow the architecture to grow incrementally as the system is developed and matures.
The key to success is to have decomposability, separation of concerns, and near-independence of the parts.
(Sound familiar? These are all modifiability tactics.)&lt;/p&gt;
&lt;p&gt;Finally, Booch notes that to be agile, the architecture should be visible and self-evident in the code; this means making the design patterns, cross-cutting concerns, and other important decisions obvious, well communicated, and defended.
This may, in turn, require documentation.
But whatever architectural decisions are made, the architect must make an effort to "socialize" the architecture."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Software Architecture in Practice" 3d edition by Len Bass, Paul Clements, Rick Kazman&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "After all software is supposed to be soft."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://www.martinfowler.com/articles/newMethodology.html"&gt;The New Methodology&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;См.также&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../uncertainty-management/adaptation/adaptation.html#emacsway-adaptation"&gt;&lt;span class="std std-ref"&gt;Что такое Adaptation&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../uncertainty-management/prediction/prediction.html#emacsway-prediction"&gt;&lt;span class="std std-ref"&gt;Что такое Prediction&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../uncertainty-management/balancing-prediction-adaptation.html#emacsway-balancing-prediction-adaptation"&gt;&lt;span class="std std-ref"&gt;Balancing Prediction/Adaptation&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../uncertainty-management/adaptation/software-design/software-design.html"&gt;&lt;span class="doc"&gt;Role of Software Design in Agile&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../uncertainty-management/adaptation/crash-course-in-software-development-economics.html"&gt;&lt;span class="doc"&gt;Краткий курс по экономике разработки программного обеспечения&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Документирование Agile Requirements</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/models/agile/analysis/requirements/documenting.html</link><description>
&lt;span id="emacsway-agile-requirements-documenting"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;В Scrum, PBI является основным, хотя и не исчерпывающим, способом документирования требований.
Способы документирования остаются на усмотрение самоорганизующихся команд.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Documentation does provide value, but only when it's written to match its intended purpose.
Agile business analysis practitioners produce documentation as they implement a change and use it to facilitate and support discussions with stakeholders.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Avoid producing documentation before it is needed, and when documentation is needed do just enough.&lt;/strong&gt;"&lt;/p&gt;
&lt;p class="attribution"&gt;—Agile Extension to the BABOK® Guide version 2 (actual)&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The close collaboration of customers with developers on agile projects generally means that &lt;strong&gt;requirements can be documented in less detail&lt;/strong&gt; than on traditional projects.
Instead, BAs or other people responsible for requirements will develop the necessary precision through &lt;strong&gt;conversations and documentation when it is needed&lt;/strong&gt; (IIBA 2013).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;People sometimes think that agile project teams are not supposed to write requirements.&lt;/strong&gt;
&lt;strong&gt;That is not accurate.&lt;/strong&gt;
&lt;strong&gt;Instead, agile methods encourage creating the minimum amount of ­documentation needed to accurately guide the developers and testers.&lt;/strong&gt;
Any documentation beyond what the development and test teams need (or that is required to satisfy regulations or standards) ­represents wasted effort.
Certain user stories might have little detail provided, with only the riskiest or highest-impact functionality being specified in more detail, typically in the form of acceptance tests."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Software Requirements (Developer Best Practices)" 3rd Edition by Karl Wiegers&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Views and Beyond and Agile agree emphatically on the following point: &lt;strong&gt;If information isn't needed, don't spend the resources to document it&lt;/strong&gt;.
All documentation should have an intended use and audience in mind, and be produced in a way that serves both.&lt;/p&gt;
&lt;p&gt;One of our fundamental principles of technical documentation is "Write for the reader." That means understanding who will read the documentation and how they will use it.
&lt;strong&gt;If there is no audience, there is no need to produce the documentation.&lt;/strong&gt;
This principle is so important in Agile methods that it has been given its own name: YAGNI.
YAGNI means "you ain't gonna need it," and it refers to the idea that you should only implement or document something when you actually have the need for it.
Do not spend time attempting to anticipate all possible needs."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Software Architecture in Practice" 3d edition by Len Bass, Paul Clements, Rick Kazman&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Create Minimal but Sufficient Documentation.
Document-based approaches to managing solution intent and context do not scale.
Indeed, they quickly become obsolete and inconsistent with one another.
The alternative is a set of related digital models that define, design, analyze, and document the system under development.
Some models specify system requirements and design, while others are domain-specific (e.g., electrical, mechanical, or some systems property).&lt;/p&gt;
&lt;p class="attribution"&gt;—"SAFe® 5.0: The World's Leading Framework for Business Agility" by Richard Knaster, Dean Leffingwell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The preparation of &lt;strong&gt;specifications, design artifacts, and information items or documentation&lt;/strong&gt; during agile projects is often &lt;strong&gt;limited&lt;/strong&gt;, while software developers apply their time and skills to transform a scenario or narrative of a function ("&lt;strong&gt;user story&lt;/strong&gt;") into a working, testable software element.
Rather than preparing elaborate review packages for briefing at infrequent major milestone reviews, the team meets with stakeholders frequently to present informal evidence of completing a set of functions and to agree on the content of the next iteration.
Documented information items focus on what will be needed for transition, operation and maintenance, such as operator and end‐user documentation and baselines of tested and released versions of software with test plans and test cases.
Projects reuse organizational procedures for configuration and release management, verification, and incident and problem management.
Where possible, &lt;strong&gt;bidirectional traceability is enabled and enforced by integrated automated systems and procedures for requirements management, architecture and design&lt;/strong&gt;, configuration management, measurement, and information management."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Agile nonfunctional Requirements</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/models/agile/analysis/requirements/nonfunctional-requirements.html</link><description>
&lt;span id="emacsway-agile-nonfunctional-requirements"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Если вы знакомы с ATAM, ADD, QAW, то вы знакомы со сценариями атрибутов качеств ("Software Architecture in Practice" 3d edition by Len Bass, Paul Clements, Rick Kazman, глава 16), и легко поймете, о чем пишет K.Wigers - один из топовых авторов по требованиям и аналитике:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "&lt;strong&gt;Nonfunctional requirements need to have priority alongside user stories; you can't defer their implementation until a later iteration.&lt;/strong&gt;
It's possible to specify quality attributes in the form of stories: "As a help desk technician, I want the knowledge base to respond to queries &lt;strong&gt;within five seconds&lt;/strong&gt; so the customer doesn't get frustrated and hang up."&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;Developers need to keep nonfunctional requirements in mind as they consider the implications of implementing individual user stories.
As more functionality is added through a series of iterations, the system's efficiency and hence performance can deteriorate.
Specify performance goals and begin performance testing &lt;strong&gt;with early iterations&lt;/strong&gt;, so you can become aware of concerns early enough to take corrective actions.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;As with user stories, it's possible to write acceptance tests for quality attributes.
This is a way to quantify the quality attributes.
If a performance goal is stated simply as "The knowledge base must return search results quickly," you can't write tests to define what constitutes "quickly." A better acceptance test would be: "Keyword search of the knowledge base &lt;strong&gt;takes less than 5 seconds&lt;/strong&gt;, and preferably &lt;strong&gt;less than 3 seconds&lt;/strong&gt;, to return a result.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;Part of &lt;strong&gt;accepting an iteration as being complete&lt;/strong&gt; is to assess whether the pertinent nonfunctional requirements are satisfied.
Often there is a range of acceptable performance, with some outcomes more desirable than others.
As it does for any other software development approach, satisfying quality requirements can distinguish delight from disappointment on agile projects."&lt;/p&gt;
&lt;p class="attribution"&gt;—Глава 14, подраздел "Handling quality attributes on agile projects", книги "Software Requirements" 3rd Edition, Wiegers K., Beatty J.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Приоритезация и реализация нефункциональных требований совместно (alongside) с функциональными выбивает почву для появления технических задач, оторванных от бизнес-целей.
А поскольку один из топовых авторов по Scrum, K.Rubin, утверждает, что нефункциональными требованиями должен заниматься Product Owner, то это автоматически устраняет необходимость в лоббировании технических задач техническими специалистами.&lt;/p&gt;
&lt;p&gt;Нужно заметить, что в SAFe нефункциональными требованиями занимается уже не Product Owner, а System Architect.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;System Architect/Engineering is an individual or team that defines the overall architecture of the system. They work at a level of abstraction above the teams and components and define Non-Functional Requirements (NFRs), major system elements, subsystems, and interfaces.&lt;/p&gt;
&lt;p class="attribution"&gt;—"SAFe® 5.0: The World's Leading Framework for Business Agility" by Richard Knaster, Dean Leffingwell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Вообще говоря, в Scrum этим не обязательно должен заниматься Product Owner.
По офф.гайду команда должна сотрудничать со стейкхолдерами, а Product Owner может делегировать свои полномочия команде, например, аналитику или архитектору.
Тут важно не кто, а как.&lt;/p&gt;
&lt;p&gt;Был упомянут K.Rubin, посмотрим, что именно он говорит:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The &lt;strong&gt;product owner is responsible&lt;/strong&gt; for defining the acceptance criteria for each product backlog item.
These are the conditions under which the product owner would be satisfied that the functional and &lt;strong&gt;nonfunctional requirements&lt;/strong&gt; have been met.
The product owner may also write acceptance tests corresponding to the acceptance criteria, or he could enlist the assistance of subject matter experts (SMEs) or development team members.
In either case, the product owner should ensure that these acceptance criteria (and frequently specific acceptance tests) are created before an item is considered at a sprint-planning meeting.
Without them, the team would have an incomplete understanding of the item and would not be ready to include it in a sprint.
For this reason, many Scrum teams include the existence of clear acceptance criteria as an item on their definition-of-ready checklist (see Chapter 6).&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;The team must also decide when to test all of the browsers.
Each nonfunctional requirement is a prime target for inclusion in the team's definition of done.
If the team includes the "Web Browser Support" nonfunctional requirement in the definition of done, the team will have to test any new features added in the sprint with all of the listed browsers.
If it doesn't work with all of them, the story isn't done.&lt;/p&gt;
&lt;p&gt;I recommend that teams try to include as many of the nonfunctional requirements in their definitions of done as they possibly can.
Waiting to test nonfunctional requirements until late in the development effort defers getting fast feedback on critical system performance characteristics.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;nonfunctional requirement.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;A requirement that does not relate to functionality but to attributes such as reliability, efficiency, usability, maintainability, and portability, which product backlog items must possess in order to be fully accepted by the stakeholders.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Each nonfunctional requirement is a candidate for inclusion in the definition of done&lt;/strong&gt;. See also definition of done."&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class="attribution"&gt;—"Essential Scrum : a practical guide to the most popular agile process" by Kenneth S. Rubin.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Топовые авторы по аналитике (K.Wigers) и Scrum (K.Rubin) сошлись в одном мнении. Один дает описание с точки зрения работы с требованиями, а другой - с точки зрения гибких процессов разработки.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "So, in the information model, we have modeled NFRs as backlog constraints, as illustrated in Figure 17–1.&lt;/p&gt;
&lt;p&gt;From the diagram, we see that a backlog item may be constrained by (zero, one, or more) nonfunctional requirements.
An example from the case study appears in Figure 17–2.&lt;/p&gt;
&lt;p&gt;Also, nonfunctional requirements apply to zero or more backlog items.
For example, a nonfunctional requirement such as support 100 concurrent users might apply to zero, one, or many backlog items.&lt;/p&gt;
&lt;p&gt;Once identified, relevant nonfunctional requirements must be captured and communicated to all teams who may be affected by the constraints.
In agile, with its focus on the backlog, there is no obvious place to model them, so in the Big Picture, we just call them backlog constraints and represent them as shown in Figure 17–3."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise" by Dean Leffingwell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Persisting nonfunctional requirements&lt;/p&gt;
&lt;p&gt;Another difference between user stories and nonfunctional requirements is that they typically need to persist differently in the development life cycle. We've described how user stories are lightweight and generally don't have to be maintained, which is one of the key benefits. We've also shown that the details of a user story are captured in the acceptance test, which persist inside the team's automated or manual regression test environment. That is why we can throw the user story away after implementation—because we have memorialized the important details in our test cases.&lt;/p&gt;
&lt;p&gt;That can work for some NFRs, too, but it gets a bit riskier. For example, if a system must support 1000 concurrent users, we could develop an automated test that simulated that load and build it in the regression test suite. That would be an excellent practice because we could refactor the code at will, and if we accidentally created a performance bottleneck, it would be quickly discovered. In that case, we could forget about the NFR once we have seen it the fi rst time, because the automated test remembers it for us.&lt;/p&gt;
&lt;p&gt;There are other types of NFRs, however, that must be treated quite differently. Here are some examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Maintain PCI compliance (credit card industry user security standards) in all applications&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Localize the application in all then-current, supported languages prior to release in any language&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No open source without a CFO license review&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We surely can't forget these, and we can't write automated test cases for them, either.
So, the teams must have an organized way to save them, find them, and review them when necessary. In practice, we've seen agile teams take a number of approaches to persisting NFRs.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Create a separate backlog in the agile project management tool. Most enterprises will adopt agile project management tooling as a central repository for stories and tasks, as well as iteration and release objects that support scheduling, burndown, and feature status reporting. Teams can create a special project/product backlog to hold and maintain the NFRs within the tool. Access privileges must be granted to all team members who are working on the program.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store and manage them in a wiki. This method works well because it provides continuous visibility; is available to all team members; is persistent; fosters communication, comments, and interaction; and doesn't require any special tooling.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maintain a supplementary specification. This label/document was originally developed as an auxiliary document to RUP's use case models and use case specifications and served exactly this role (organizing nonfunctional requirements). Remember, as agilists, we "favor working software over comprehensive documentation," but that doesn't mean we can't create the documentation we need. Even more importantly, we like to do the simplest thing that can possibly work, and when we know something is important, it makes sense to write it down. Table 17–3 later in this chapter provides an example template for a supplemental specif i cation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build the NFRs into the definition of done, and point to the special backlog, wiki, or supplemental specification that contains the details. In this approach, a team can't be done until the NFRs are satisfied as well. Different definitions of done, requiring different amounts of regression testing, inspection, and so on, can be established for various iteration, potentially shippable increment, and release milestones.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No matter the approach, it is mandatory that the teams do something to maintain and manage these specif i cations, because they could make the difference between success and failure.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise" by Dean Leffingwell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;См. также:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.scaledagileframework.com/nonfunctional-requirements/"&gt;Nonfunctional Requirements&lt;/a&gt;" at SAFe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://scalingsoftwareagility.wordpress.com/2010/03/05/an-agile-architectural-epic-kanban-system-part-2-%E2%80%93-the-model/"&gt;An Agile Architectural Epic Kanban System: Part 2 – The Model&lt;/a&gt;" by Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://scalingsoftwareagility.files.wordpress.com/2007/03/a-lean-and-scalable-requirements-information-model-for-agile-enterprises-pdf.pdf"&gt;A Lean and Scalable Requirements Information Model for the Agile Enterprise&lt;/a&gt; by Dean Leffingwell with Juha‐Markus Aalto&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Agile Requirements</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/models/agile/analysis/requirements/requirements.html</link><description>
&lt;span id="emacsway-agile-requirements"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#agile-requirements" id="id4"&gt;Agile Requirements&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id2" id="id5"&gt;Что такое требование&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#product-backlog-item-requirements" id="id6"&gt;Product Backlog Item и Requirements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#user-story-requirements" id="id7"&gt;Почему User Story, а не Requirements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#emacsway-agile-requirements-literature" id="id8"&gt;Литература про Agile-requirements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Что такое требование&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Следует различать значения терминов &lt;strong&gt;needs&lt;/strong&gt;, &lt;strong&gt;requirements&lt;/strong&gt; и &lt;strong&gt;specification&lt;/strong&gt;.
Вопросы возникают, как правило, там, где их не различают, и под требованиями зачастую понимают System Requirements Specification (SyRS), на который распространяется стандарт "ISO/IEC/IEEE 29148:2011 Systems and software engineering - Life cycle processes - Requirements engineering".&lt;/p&gt;
&lt;p&gt;Однако, на сами требования распространяются стандарты SDLC:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"ISO/IEC/IEEE 15288:2015 Systems and software engineering - System life cycle processes"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Итак, что такое требование:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "&lt;strong&gt;requirement&lt;/strong&gt; - statement that translates or expresses a need and its associated constraints and conditions.
[SOURCE: ISO/IEC/IEEE 29148:2011, modified, NOTE has been removed.]"&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Это все. Ни больше, ни меньше.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="product-backlog-item-requirements"&gt;
&lt;span id="emacsway-product-backlog-item"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Product Backlog Item и Requirements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Какая связь между Product Backlog Item и Requirements?&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "In the Scrum framework a &lt;strong&gt;product backlog&lt;/strong&gt; lists all of the &lt;strong&gt;requirements&lt;/strong&gt; for a solution, including both &lt;strong&gt;customer and technical requirements&lt;/strong&gt;."&lt;/p&gt;
&lt;p class="attribution"&gt;—Agile Extension to the BABOK® Guide version 1 (obsolete, на момент написания статьи)&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "&lt;strong&gt;Backlog Item&lt;/strong&gt; - An item on the backlog which represents one or more &lt;strong&gt;requirements&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User Stories&lt;/strong&gt; are used to convey a customer &lt;strong&gt;requirement&lt;/strong&gt; for the delivery team."&lt;/p&gt;
&lt;p class="attribution"&gt;—Agile Extension to the BABOK® Guide version 2 (actual, на момент написания статьи)&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Актуальная версия Agile-расширения BABoK (на момент написания статьи) - вторая, хотя актуальная версия самого BABoK - третья.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The &lt;strong&gt;Product Backlog&lt;/strong&gt; is a list of &lt;strong&gt;functional and nonfunctional requirements&lt;/strong&gt; that, when turned into functionality, will deliver this vision."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Agile Project Management with Scrum" by Ken Schwaber&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Agile projects generally maintain &lt;strong&gt;requirements&lt;/strong&gt; in the form of user stories in a &lt;strong&gt;product backlog&lt;/strong&gt;."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Software Requirements (Developer Best Practices)" 3rd Edition by Karl Wiegers&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Instead of compiling a large inventory of detailed &lt;strong&gt;requirements&lt;/strong&gt; up front, we create placeholders for the &lt;strong&gt;requirements&lt;/strong&gt;, called &lt;strong&gt;product backlog items (PBIs)&lt;/strong&gt;"&lt;/p&gt;
&lt;p class="attribution"&gt;—"Essential Scrum: A Practical Guide to the Most Popular Agile Process" by Kenneth Rubin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "XP- originated "&lt;strong&gt;user story&lt;/strong&gt;" as the primary currency for expressing application &lt;strong&gt;requirements&lt;/strong&gt;."&lt;/p&gt;
&lt;p&gt;📝 "&lt;strong&gt;User stories&lt;/strong&gt; are the agile replacement for most of what has been traditionally expressed as software &lt;strong&gt;requirements&lt;/strong&gt; statements (or use cases in RUP and UML), and they are the workhorses of agile development."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise" by Dean Leffingwell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;И есть у него еще такой &lt;a class="reference external" href="https://scalingsoftwareagility.files.wordpress.com/2007/03/a-lean-and-scalable-requirements-information-model-for-agile-enterprises-pdf.pdf"&gt;документ&lt;/a&gt;, который прекрасно раскрывает связь между требованиями и PBI.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "&lt;strong&gt;User Story&lt;/strong&gt;: agile software development practice from Extreme Programming to express &lt;strong&gt;requirements&lt;/strong&gt; from an end user perspective, emphasizing verbal communication.
In Scrum, it is often used to express functional items on the Product Backlog."&lt;/p&gt;
&lt;p class="attribution"&gt;—Официальный сайт Ken Schwaber, &lt;a class="reference external" href="https://www.scrum.org/resources/professional-scrum-developer-glossary"&gt;glossary&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The agile approach to &lt;strong&gt;requirements&lt;/strong&gt; is based on &lt;strong&gt;user stories&lt;/strong&gt;: units of functionality corresponding to interactions of users with the system."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Agile! The Good, the Hype and the Ugly" by Bertrand Meyer&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;У Mike Cohn есть прекрасная статья на тему, чем отличается User Story от других способов документирования требований, и начинается она со слов:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Extreme programming (XP) introduced the practice of expressing &lt;strong&gt;requirements&lt;/strong&gt; in the form of &lt;strong&gt;user stories&lt;/strong&gt;"&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://www.mountaingoatsoftware.com/articles/advantages-of-user-stories-for-requirements"&gt;Advantages of User Stories for Requirements&lt;/a&gt;" by Mike Cohn&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="user-story-requirements"&gt;
&lt;span id="emacsway-user-story"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Почему User Story, а не Requirements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Kent Beck разъясняет, почему он использовал термин Story вместо Requirements.
Ключевым аргументом здесь выступает семантическое различие - требования переменны, а не константны.
А так же то, что полнота требований недостижима.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Software development has been steered wrong by the word "requirement", defined in the dictionary as "something mandatory or obligatory."
The word carries a connotation of absolutism and permanence, inhibitors to embracing change.
And the word "requirement" is just plain wrong.
Out of one thousand pages of "requirements", if you deploy a system with the right 20% or 10% or even 5%, you will likely realize all of the business benefit envisioned for the whole system.
So what were the other 80%? Not "requirements"; they weren't really mandatory or obligatory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Early estimation is a key difference between stories and other requirements practices.&lt;/strong&gt;
Estimation gives the business and technical perspectives a chance to interact, which creates value early, when an idea has the most potential.
When the team knows the cost of features it can split, combine, or extend scope based on what it knows about the features' value."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Extreme Programming Explained" 2nd edition by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Bertrand Meyer о том, в чем отличия между User Story и Requirements.
Обратите внимание, Bertrand Meyer, как и Kent Beck, так же делает акцент на недостижимость полноты требований, и указывает на семантическое отличие термина Requirements по своему смыслу, хотя по стандарту итеративная разработка освобождается от полноты требований (и даже предназначается для её разрешения).&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Agile development accepts change.
In software projects, full requirements cannot be determined at the beginning; needs emerge as the project develops, and evolve as customers and others try intermediate releases.
Such change is considered a normal part of the development process.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;The last principle gives us the second part of the replacement for requirements: use scenarios to define functionality.
A scenario is a description of a particular interaction of a user with the system, for example (if we are building mobile phone software) a phone conversation from the time the caller dials the number to the time the two parties get disconnected.
"Scenario" is not a common agile term, but covers variants such as use cases and user stories which differ by their level of granularity (a use case is a complete interaction, a user story an application of a smaller unit of functionality).
Scenarios are obtained from customers and indicate the fundamental properties of the system's functionality as seen from the user perspective.
Collecting scenarios, usually in the form of user stories, is the principal agile technique for requirements; it differs from traditional requirements elicitation in two fundamental ways:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;A scenario is just one example; unlike requirements, it cannot lay claim to completeness. A set of scenarios, however large, cannot come even close to achieving this goal, in the same way that no number of tests of a program can replace a specification.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In agile development, requirements are not collected at the beginning of the project but throughout, as development progresses. Note, however, that this difference is not as absolute as the agile literature suggests when it blasts "waterfall approaches": while the traditional software engineering view presents requirements as a specific lifecycle step, coming early in the process, it does not rule out — except in the imagination of agile authors — a scheme in which the requirements are constantly updated in the rest of the lifecycle.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;The agile approach to requirements is based on user stories: units of functionality corresponding to interactions of users with the system.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;We note once again the confusion inherent in such agile criticism as Beck's comment that "Requirements gathering isn't a phase that produces a static document", as if having a requirements phase implied that the resulting requirements document will be static.
The two matters are separate."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Agile! The Good, the Hype and the Ugly" by Bertrand Meyer&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Подведем итог: требование в условиях недостаточной полноты требований, которое может быть изменено по мере снижения уровня неопределенности, традиционно называется User Story или PBI.
В таком случае требования уточняются по мере снижения уровня неопределенности, что является базовым принципом &lt;a class="reference internal" href="../../../iterative.html#emacsway-iterative-development"&gt;&lt;span class="std std-ref"&gt;итеративной модели&lt;/span&gt;&lt;/a&gt; разработки.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="emacsway-agile-requirements-literature"&gt;
&lt;span id="id3"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Литература про Agile-requirements&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.ireb.org/content/downloads/22-cpre-advanced-level-re-agile-handbook/handbook_cpre_al_re%40agile_en_v1.0.2.pdf"&gt;Handbook of RE@Agile According to the IREB Standard Education and Training for IREB Certified Professional for Requirements Engineering Advanced Level RE@Agile&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.pmi.org/pmbok-guide-standards/practice-guides/agile"&gt;Agile Practice Guide&lt;/a&gt;" by Project Management Institute, 2017&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Agile Extension to the BABOK® Guide" version 2 (actual, на момент написания статьи)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.amazon.com/Agile-Software-Requirements-Enterprise-Development/dp/0321635841"&gt;Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise&lt;/a&gt;" by Dean Leffingwell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Software Requirements (Developer Best Practices)" 3rd Edition by Karl Wiegers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"` An Agile Architectural Epic Kanban System: Part 2 – The Model &amp;lt;&lt;a class="reference external" href="https://scalingsoftwareagility.wordpress.com/2010/03/05/an-agile-architectural-epic-kanban-system-part-2-%E2%80%93-the-model/"&gt;https://scalingsoftwareagility.wordpress.com/2010/03/05/an-agile-architectural-epic-kanban-system-part-2-%E2%80%93-the-model/&lt;/a&gt;&amp;gt;`__" by Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://scalingsoftwareagility.files.wordpress.com/2007/03/a-lean-and-scalable-requirements-information-model-for-agile-enterprises-pdf.pdf"&gt;A Lean and Scalable Requirements Information Model for the Agile Enterprise&lt;/a&gt; by Dean Leffingwell with Juha‐Markus Aalto&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;См. также:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://agilemodeling.com/artifacts/#Requirements"&gt;Agile Modeling :: Requirements-Analysis Models&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.scaledagileframework.com/safe-requirements-model/"&gt;SAFe Requirements Model&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.ireb.org/en/downloads/tag:handbook"&gt;Library of IREB artifacts&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://t.me/emacsway_log/531"&gt;https://t.me/emacsway_log/531&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://t.me/emacsway_log/157"&gt;https://t.me/emacsway_log/157&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://t.me/emacsway_log/158"&gt;https://t.me/emacsway_log/158&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;См.также&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../../../uncertainty-management/adaptation/adaptation.html#emacsway-adaptation"&gt;&lt;span class="std std-ref"&gt;Что такое Adaptation&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Evolutionary Development</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/models/evolutionary.html</link><description>
&lt;span id="emacsway-evolutionary-development"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The "evolutionary model" is intended to deal with incomplete knowledge of requirements.
It provides for initial planning and initial architecture definition, but allocates requirements analysis, design, construction, verification, validation and delivery to a series of stages.
Delivered capabilities that do not meet user needs can be reworked in subsequent stages of the evolution."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Incremental Development</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/models/incremental.html</link><description>
&lt;span id="emacsway-incremental-development"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The "incremental development" model includes initial planning, initial requirements analysis, initial architectural definition, and initial validation, but allocates design, implementation, verification (and sometimes delivery) activities to a series of stages, each of which provides a portion of the intended functionality.
The approach provides for some flexibility to respond to inaccurate cost or schedule estimates by moving functionality to later increments."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="figure align-left" id="id1"&gt;
&lt;a class="reference internal image-reference" href="../../../../_images/incrementing.jpg"&gt;&lt;img alt="Incremental Development. The image source is &amp;quot;Don't Know What I Want, But I Know How to Get It&amp;quot; by Jeff Patton &amp;amp; Associates https://www.jpattonassociates.com/dont_know_what_i_want/" src="../../../../_images/incrementing.jpg" style="width: 90%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Incremental Development. The image source is "&lt;a class="reference external" href="https://www.jpattonassociates.com/dont_know_what_i_want/"&gt;Don't Know What I Want, But I Know How to Get It&lt;/a&gt;" by Jeff Patton &amp;amp; Associates&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Iterative Development</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/models/iterative.html</link><description>
&lt;span id="emacsway-iterative-development"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The "iterative development" model performs initial planning and then consists of a cyclic process of prototyping, testing, analyzing and refining the requirements and the solution.
"Iterative" models repeatedly perform the life cycle processes to deliver prioritized system functions sooner, with refined or more complex elements of the system coming in later iterations."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="figure align-left" id="id1"&gt;
&lt;a class="reference internal image-reference" href="../../../../_images/iterating.jpg"&gt;&lt;img alt="Iterative Development. The image source is &amp;quot;Don't Know What I Want, But I Know How to Get It&amp;quot; by Jeff Patton &amp;amp; Associates https://www.jpattonassociates.com/dont_know_what_i_want/" src="../../../../_images/iterating.jpg" style="width: 90%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Iterative Development. The image source is "&lt;a class="reference external" href="https://www.jpattonassociates.com/dont_know_what_i_want/"&gt;Don't Know What I Want, But I Know How to Get It&lt;/a&gt;" by Jeff Patton &amp;amp; Associates&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 ""Iteration" here means applying a function to itself."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Concrete Mathematics: A Foundation for Computer Science" 2nd edition by Ronald L. Graham, Donald E. Knuth, Oren Patashnik&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Ключевым элементом итеративной разработки является &lt;a class="reference internal" href="../uncertainty-management/adaptation/adaptation.html#emacsway-adaptation"&gt;&lt;span class="std std-ref"&gt;Adaptation&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;См.также&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../uncertainty-management/adaptation/adaptation.html#emacsway-adaptation"&gt;&lt;span class="std std-ref"&gt;Что такое Adaptation&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="agile/agile.html#emacsway-agile-development"&gt;&lt;span class="std std-ref"&gt;Что такое Agile Development&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Spiral Development</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/models/spiral.html</link><description>
&lt;span id="emacsway-spiral-development"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The "spiral" variation on &lt;a class="reference internal" href="incremental.html#emacsway-incremental-development"&gt;&lt;span class="std std-ref"&gt;incremental developmental&lt;/span&gt;&lt;/a&gt; proposes ordering the development of functionality based on risk, with the riskiest problems considered in the early increments.
This provides some protection against cost surprises occurring late in the development cycle."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Что такое Adaptation</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/uncertainty-management/adaptation/adaptation.html</link><description>
&lt;span id="emacsway-adaptation"/&gt; 
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#adaptation" id="id6"&gt;Что такое Adaptation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id2" id="id7"&gt;Суть Адаптации&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id8"&gt;Назначение Адаптации&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Суть Адаптации&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Суть Adaptation (Адаптации) заключается в том, что мы не пытаемся разрешить неопределенность заблаговременно путем логического вывода, а, в противовес &lt;a class="reference internal" href="../prediction/prediction.html#emacsway-prediction"&gt;&lt;span class="std std-ref"&gt;Prediction&lt;/span&gt;&lt;/a&gt;, разрешаем неопределенность опытным, экспериментальным путем.
Выдвигаем гипотезу, вносим её в план, реализуем Системный Инкремент, инспектируем результат на практике, и адаптируем план на следующую итерацию.
Этот цикл образует &lt;a class="reference internal" href="../../models/iterative.html#emacsway-iterative-development"&gt;&lt;span class="std std-ref"&gt;итерацию&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Полученные практическим способом знания, снижающие неопределенность, являются входными аргументами для следующей &lt;a class="reference internal" href="../../models/iterative.html#emacsway-iterative-development"&gt;&lt;span class="std std-ref"&gt;итерации&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 ""Iteration" here means applying a function to itself."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Concrete Mathematics: A Foundation for Computer Science" 2nd edition by Ronald L. Graham, Donald E. Knuth, Oren Patashnik&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Назначение Адаптации&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Рость неопределенности приводит к росту стоимости Prediction по мере роста его точности.
Предел экономической целесообразности Prediction определяется пересечением графика роста стоимости Prediction (в зависимости от его точности) с графиком роста бизнес-выгод от точности Прогнозирования.&lt;/p&gt;
&lt;p&gt;Там, где сумма произведений количества Адаптаций Системного Инкремента на стоимость Адаптации системного инкремена для каждой итерации пересечет сумму экономически целесообразной стоимости Prediction на горизонте планирования, возникает предел экономической целесообразности эмпирического способа обработки неопределенности Проекта при допущении, что остаточная стоимость самой реализации (которая не имеет отношения к разрешению неопределенности) остается неизменной в обоих случаях.
Обратите внимание, в данном случае речь идет о стоимости Адаптации Системного Инкремента, а не Плана.
Т.е. речь идет о стоимости экспериментального разрешения неопределенности (цикл ошибка - исправление).&lt;/p&gt;
&lt;p&gt;Prediction при этом не исчезает полностью, а понижает свою точность и дополняется Адаптацией.
Для наилучшего совокупного экономического эффекта важно правильно находить &lt;a class="reference internal" href="../balancing-prediction-adaptation.html#emacsway-balancing-prediction-adaptation"&gt;&lt;span class="std std-ref"&gt;баланс между Prediction и Adaptation&lt;/span&gt;&lt;/a&gt;, а также обеспечивать &lt;a class="reference internal" href="../../models/agile/agile.html#emacsway-agile-development"&gt;&lt;span class="std std-ref"&gt;характер роста стоимости Adaptation максимально приближенный к горизонтальной асимптоте&lt;/span&gt;&lt;/a&gt;, поскольку, чем больше Адаптаций Системного Инкремента возникает на горизонте планирования, тем дороже становится экспериментальный способ разрешения неопределенности по сравнению с логическим.&lt;/p&gt;
&lt;p&gt;При этом нужно учитывать, что стоимость Prediction также не константна по отношению к жизненному циклу системы, а имеет тенденцию к понижению.
Т.е. чем большая часть системы уже реализована, тем больше баланс экономической целесообразности смещается от Adaptation к Prediction.&lt;/p&gt;
&lt;div class="figure align-left" id="id4"&gt;
&lt;a class="reference internal image-reference" href="../../../../../_images/cost-of-decision-over-time.png"&gt;&lt;img alt="FIGURE 3.6 Make decisions at the last responsible moment. The image source is &amp;quot;Essential Scrum: A Practical Guide to the Most Popular Agile Process&amp;quot; by Kenneth Rubin, &amp;quot;Chapter 3 Agile Principles :: Prediction and Adaptation&amp;quot;." src="../../../../../_images/cost-of-decision-over-time.png" style="width: 70%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;FIGURE 3.6 Make decisions at the last responsible moment. The image source is "Essential Scrum: A Practical Guide to the Most Popular Agile Process" by Kenneth Rubin, "Chapter 3 Agile Principles :: Prediction and Adaptation".&lt;/span&gt;&lt;/p&gt;
&lt;div class="legend"&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Most of us would prefer to wait until we have more information so that we can make a more informed decision.
When dealing with important or irreversible decisions, if we decide too early and are wrong, we will be on the exponential part of the cost-of-deciding curve in Figure 3.6.
As we acquire a better understanding regarding the decision, the cost of deciding declines (the likelihood of making a bad
decision declines because of increasing market or technical certainty).
That's why we should wait until we have better information before committing to a decision."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Essential Scrum: A Practical Guide to the Most Popular Agile Process" by Kenneth Rubin, "Chapter 3 Agile Principles :: Prediction and Adaptation"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Это и есть та самая причина, по которой выбор SDLC-модели является неотъемлемой частью процесса проектирования, и изучается архитектурой.
Ведь различные SDLC-модели (итеративные, инкрементальные, спиральные, гибридные, каскадные), реализованные в виде Scrum, RUP, SAFe, BDUF etc., обладают различным соотношением Prediction vs. Adaptation, имеют разные подходы к масштабированию команд и различные ограничения.
Выбор SDLC-модели сильно зависит от ситуативного контекста проектирования.
Повторюсь, основная цель итеративной разработки - удешевить стоимость проектирования в условиях неопределенности.&lt;/p&gt;
&lt;p&gt;Об этом Брукс писал в Мифическом человеко-месяце еще до появления Agile Manifesto:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Therefore the most important function that software builders do for their clients is the &lt;a class="reference internal" href="../../models/iterative.html#emacsway-iterative-development"&gt;&lt;span class="std std-ref"&gt;iterative&lt;/span&gt;&lt;/a&gt; &lt;strong&gt;extraction and refinement of the product requirements&lt;/strong&gt;...&lt;/p&gt;
&lt;p&gt;I would go a step further and assert that it is really impossible for clients, even those working with software engineers, to specify completely, precisely, and correctly the exact requirements of a modern software product before having built and tried some versions of the product they are specifying.&lt;/p&gt;
&lt;p&gt;Therefore one of the most promising of the current technological efforts, and one which attacks the essence, not the accidents, of the software problem, is the development of approaches and tools for rapid prototyping of systems as part of the &lt;a class="reference internal" href="../../models/iterative.html#emacsway-iterative-development"&gt;&lt;span class="std std-ref"&gt;iterative&lt;/span&gt;&lt;/a&gt; &lt;strong&gt;specification of requirements&lt;/strong&gt;."&lt;/p&gt;
&lt;p class="attribution"&gt;—"The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Конечно, сугубо семантически, термин "&lt;a class="reference internal" href="../../models/agile/analysis/requirements/requirements.html#emacsway-agile-requirements"&gt;&lt;span class="std std-ref"&gt;requirements&lt;/span&gt;&lt;/a&gt;" немного вводит в заблуждение в Agile, ведь заранее требования к продукту неизвестны полностью, и они изменяются по мере реализации продукта.
А в таком случае, как они могут что-то требовать?
Вы, наверное, встречали картинку с треугольником "&lt;a class="reference external" href="https://www.atlassian.com/agile/agile-at-scale/agile-iron-triangle"&gt;Iron Triangle&lt;/a&gt;" (Requirements/Scope, Cost, Time), где в waterfall он обращен вершиной Requirements вниз (константная область), а в Agile - вверх (переменная область). The iron triangle of planning:&lt;/p&gt;
&lt;div class="figure align-left" id="id5"&gt;
&lt;a class="reference internal image-reference" href="../../../../../_images/iron-triangle.png"&gt;&lt;img alt="Iron Triangle. Agile fixes the date and resources and varies the scope. The image source is &amp;quot;Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise&amp;quot; by Dean Leffingwell" src="../../../../../_images/iron-triangle.png" style="width: 90%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Iron Triangle. Agile fixes the date and resources and varies the scope. The image source is "Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise" by Dean Leffingwell&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Итеративная разработка востребована, когда невозможно достигнуть полноты (Complete) требований (set of &lt;a class="reference internal" href="../../models/agile/analysis/requirements/requirements.html#emacsway-agile-requirements"&gt;&lt;span class="std std-ref"&gt;requirements&lt;/span&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Complete. The set of requirements needs no further amplification because it contains everything pertinent to the definition of the system or system element being specified. In addition, the set contains no To Be Defined (TBD), To Be Specified (TBS), or To Be Resolved (TBR) clauses. Resolution of the TBx designations may be iterative and there is an acceptable timeframe for TBx items, determined by risks and dependencies."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 29148:2018 Systems and software engineering - Life cycle processes - Requirements engineering"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Но это и не требуется стандартом по SDLC:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "To deal with the &lt;strong&gt;issues of incompletely known requirements&lt;/strong&gt; and inaccurate estimates, a number of other types of models have been proposed: &lt;a class="reference internal" href="../../models/incremental.html#emacsway-incremental-development"&gt;&lt;span class="std std-ref"&gt;incremental&lt;/span&gt;&lt;/a&gt;, &lt;a class="reference internal" href="../../models/spiral.html#emacsway-spiral-development"&gt;&lt;span class="std std-ref"&gt;spiral&lt;/span&gt;&lt;/a&gt;, &lt;a class="reference internal" href="../../models/iterative.html#emacsway-iterative-development"&gt;&lt;span class="std std-ref"&gt;iterative&lt;/span&gt;&lt;/a&gt;, and &lt;a class="reference internal" href="../../models/evolutionary.html#emacsway-evolutionary-development"&gt;&lt;span class="std std-ref"&gt;evolutionary (adaptive)&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;The "&lt;a class="reference internal" href="../../models/evolutionary.html#emacsway-evolutionary-development"&gt;&lt;span class="std std-ref"&gt;evolutionary model&lt;/span&gt;&lt;/a&gt;" is intended to deal with &lt;strong&gt;incomplete knowledge of requirements&lt;/strong&gt;."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Как можно заметить, неполнота требований здесь первична, и именно для её разрешения и применяются такие SDLC-модели, как &lt;a class="reference internal" href="../../models/incremental.html#emacsway-incremental-development"&gt;&lt;span class="std std-ref"&gt;incremental&lt;/span&gt;&lt;/a&gt;, &lt;a class="reference internal" href="../../models/spiral.html#emacsway-spiral-development"&gt;&lt;span class="std std-ref"&gt;spiral&lt;/span&gt;&lt;/a&gt;, &lt;a class="reference internal" href="../../models/iterative.html#emacsway-iterative-development"&gt;&lt;span class="std std-ref"&gt;iterative&lt;/span&gt;&lt;/a&gt;, and &lt;a class="reference internal" href="../../models/evolutionary.html#emacsway-evolutionary-development"&gt;&lt;span class="std std-ref"&gt;evolutionary (adaptive)&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Интересно, что, во времена появления термина User Story, полнота требований так же не требовалась старым стандартом:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The SRS may need to evolve as the development of the software product progresses. It may be impossible to specify some details at the time the project is initiated.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;Requirements should be specified as completely and thoroughly as is known at the time, even if evolutionary revisions can be foreseen as inevitable. The fact that they are incomplete should be noted."&lt;/p&gt;
&lt;p class="attribution"&gt;—"IEEE Std 830-1998, IEEE Std 830-1993 IEEE Recommended Practice for Software Requirements Specifications"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Таким образом, использование термина &lt;a class="reference internal" href="../../models/agile/analysis/requirements/requirements.html#emacsway-agile-requirements"&gt;&lt;span class="std std-ref"&gt;requirements&lt;/span&gt;&lt;/a&gt;, несмотря на то, что вызывает вопросы относительно семантики, никоим образом не противоречит использованию его в Agile SDLC-моделе, которая, кстати, описана тем же стандартом - ISO/IEC/IEEE 12207:2017, в разделах "5.4.2. Life cycle model for the software system" и "Annex H".&lt;/p&gt;
&lt;p&gt;См. также:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.martinfowler.com/articles/newMethodology.html#PredictiveVersusAdaptive"&gt;The New Methodology :: Predictive versus Adaptive&lt;/a&gt;" by Martin Fowler&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;См.также&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../models/iterative.html#emacsway-iterative-development"&gt;&lt;span class="std std-ref"&gt;Iterative Development&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../models/agile/agile.html#emacsway-agile-development"&gt;&lt;span class="std std-ref"&gt;Что такое Agile Development&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../models/agile/index.html"&gt;&lt;span class="doc"&gt;Agile&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../models/agile/analysis/requirements/requirements.html#emacsway-agile-requirements"&gt;&lt;span class="std std-ref"&gt;Agile Requirements&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Краткий курс по экономике разработки программного обеспечения</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/uncertainty-management/adaptation/crash-course-in-software-development-economics.html</link><description>&lt;span class="target" id="index-0"/&gt;&lt;div class="section" id="emacsway-software-development-economics-literature"&gt;
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Краткий курс по экономике разработки программного обеспечения:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;"Extreme Programming Explained" 1st edition by Kent Beck&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"Chapter 3. Economics of Software Development"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Chapter 17. Design Strategy"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Chapter 24. What Makes XP Hard"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;"Essential Scrum: A Practical Guide to the Most Popular Agile Process" by Kenneth Rubin&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"Chapter 3. Agile Principles"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Chapter 8. Technical Debt"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;"Software Engineering: A Practitioner's Approach" 9th edition by Roger S. Pressman, Bruce Maxim&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"3.2 Agility and the cost of change"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;"Software Architecture in Practice" 3d edition by Len Bass, Paul Clements, Rick Kazman&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"Chapter 7. Modifiability"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Chapter 23. Economic analysis of architectures"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;"Refactoring: Improving the Design of Existing Code" 1st (and 2nd) edition by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"Chapter 2. Principles in Refactoring"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;"Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"Chapter 1. What Is Design and Architecture?"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Working Effectively with Legacy Code" by Michael C. Feathers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/bliki/Yagni.html"&gt;Yagni&lt;/a&gt;" (хорошо разъясняет виды экономических ущербов: "cost of build", "cost of delay", "cost of carry", "cost of repair", "cost of removing")&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/bliki/TechnicalDebt.html"&gt;Technical Debt&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/bliki/TechnicalDebtQuadrant.html"&gt;Technical Debt Quadrant&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://architectelevator.com/architecture/architecture-options/"&gt;Architecture: Selling Options&lt;/a&gt;" by Gregor Hohpe. How do you explain the value of architecture to business stakeholders? Deferring to the Nobel-prize winning economists Black and Scholes can work surprisingly well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/bliki/DesignPayoffLine.html"&gt;Design Payoff Line&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/bliki/DesignStaminaHypothesis.html"&gt;Design Stamina Hypothesis&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/articles/is-quality-worth-cost.html"&gt;Is High Quality Software Worth the Cost?&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/articles/designDead.html"&gt;Is Design Dead?&lt;/a&gt;" by Martin Fowler.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://sergeyteplyakov.blogspot.com/2016/08/yagni.html"&gt;Принцип YAGNI&lt;/a&gt;" / Сегей Тепляков&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://sergeyteplyakov.blogspot.com/2012/04/blog-post_19.html"&gt;О повторном использовании кода&lt;/a&gt;" / Сегей Тепляков&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://less.works/less/principles/systems-thinking.html"&gt;Systems thinking&lt;/a&gt;" (&lt;a class="reference external" href="https://less.works/ru/less/principles/systems-thinking.html"&gt;на русском&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=8299"&gt;Modifiability&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://youtu.be/DngAZyWMGR0"&gt;Making Architecture Matter - Martin Fowler Keynote&lt;/a&gt;" - превосходное 14-ти минутное видео.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;См. также: &lt;a class="reference external" href="https://t.me/emacsway_log/125"&gt;https://t.me/emacsway_log/125&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Balancing Prediction/Adaptation</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/uncertainty-management/balancing-prediction-adaptation.html</link><description>
&lt;span id="emacsway-balancing-prediction-adaptation"/&gt; 
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#balancing-prediction-adaptation" id="id3"&gt;Balancing Prediction/Adaptation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#open-agile-architecture-standard-by-the-open-group" id="id4"&gt;Open Agile Architecture™ Standard by The Open Group&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#prediction-adaptation" id="id5"&gt;Эволюционный маятник баланса Prediction/Adaptation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#prediction-adaptation-adaptation" id="id6"&gt;Занос маятника Prediction/Adaptation в сторону Adaptation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#prediction-adaptation-prediction" id="id7"&gt;Отскок маятника Prediction/Adaptation назад к Prediction&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#alberto-brandolini-about-prediction-adaptation" id="id8"&gt;Alberto Brandolini about Prediction/Adaptation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Scrum projects do not have an up-front analysis or design phase; all work occurs within the repeated cycle of sprints.
This does not mean, however, that design on a Scrum project is not intentional.
An intentional design process is one in which the design is guided through deliberate, conscious decision making.
The difference on a Scrum project is not that intentional design is thrown out, but that it is done (like everything else on a Scrum project) incrementally.
Scrum teams acknowledge that as nice as it might be to make all design decisions up front, doing so is impossible.
This means that on a Scrum project, design is both intentional and emergent.&lt;/p&gt;
&lt;p&gt;A big part of an organization's becoming agile is finding the appropriate balance between anticipation and adaptation (Highsmith 2002).
Figure 9.2 shows this balance along with activities and artifacts that influence the balance.
When doing up-front analysis or design, we are attempting to anticipate users' needs.
Because we cannot perfectly anticipate these, we will make some mistakes; some work will need to be redone.
When we forgo analysis and design and jump immediately into coding and testing with no forethought at all, we are trying to adapt to users' needs.
All projects of interest will be positioned somewhere between anticipation and adaptation based on their own unique characteristics; no application will be all the way to either extreme.
A life-critical, medical safety application may be far to the anticipation side.
A three-person startup company building a website of information on kayak racing may be far toward the side of adaptation.&lt;/p&gt;
&lt;p&gt;Foretelling the agile preference for simplicity, in 1990, was speaker and author Do-While Jones.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;I'm not against planning for the future.
Some thought should be given to future expansion of capability.
But when the entire design process gets bogged down in an attempt to satisfy future requirements that may never materialize, then it is time to stop and see if there isn't a simpler way to solve the immediate problem.&lt;/p&gt;
&lt;p class="attribution"&gt;—Jones' 1990 article, "The Breakfast Food Cooker," remains a classic parable of what can go wrong when software developers over-design a solution. I highly recommended reading it at &lt;a class="reference external" href="http://www.ridgecrest.ca.us/~do_while/toaster.htm"&gt;http://www.ridgecrest.ca.us/~do_while/toaster.htm&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Scrum teams avoid this "bogging down" by realizing that not all future needs are worth worrying about today. Many future needs may be best handled by planning to adapt as they arise."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Succeeding with Agile: Software Development Using Scrum" by Mike Cohn&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="figure align-left" id="id2"&gt;
&lt;a class="reference internal image-reference" href="../../../../_images/fig-9.2-balancing-anticipation-adaptation.png"&gt;&lt;img alt="FIGURE 9.2 Achieving a balance between anticipation and adaptation involves balancing the inﬂuence of the activities and artifacts on each side. The image source is &amp;quot;Succeeding with Agile: Software Development Using Scrum&amp;quot; by Mike Cohn" src="../../../../_images/fig-9.2-balancing-anticipation-adaptation.png" style="width: 90%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;FIGURE 9.2 Achieving a balance between anticipation and adaptation involves balancing the inﬂuence of the activities and artifacts on each side. The image source is "Succeeding with Agile: Software Development Using Scrum" by Mike Cohn&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 McConnell writes, "In ten years the pendulum has swung from 'design everything' to 'design nothing.'
But the alternative to BDUF [Big Design Up Front] isn't no design up front, it's a Little Design Up Front (LDUF) or Enough Design Up Front (ENUF)."
This is a strawman argument.
The alternative to designing before implementing is designing after implementing.
Some design up-front is necessary, but just enough to get the initial implementation.
Further design takes place once the implementation is in place and the real constraints on the design are obvious.
Far from "design nothing," the XP strategy is "design always."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Extreme Programming Explained" 2nd edition by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "From the very earliest days of agile methods, people have asked what role there is for architectural or design thinking.
A common misconception is that since agile methods drop the notion of a detailed up-front design artifact, that there is no room for architecture in an agile project.
In my keynote at the first-ever agile conference, I pointed out that design was every bit as important for agile projects, but it manifests itself differently, becoming an evolutionary approach."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/agile.html"&gt;Agile Software Development&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The incremental and iterative nature of Agile development can facilitate efficient technical and management processes and practices to reduce the cost associated with change.
In comparison, projects managed at the waterfall end of the continuum seek to reduce total rework cost by minimizing the number of changes, limiting the number of control points, and baselining detailed specifications which are reviewed and traced throughout the project."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Agile" methods actually can be applied within a variety of models.
While Agile methods are common in executing an evolutionary lifecycle model, they can be used in other lifecycle models at various stages.
What the methods have in common is an emphasis on continuous inspection and collaboration in the rapid production of working software in an environment where changes, including changes to requirements, are expected.&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="section" id="open-agile-architecture-standard-by-the-open-group"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Open Agile Architecture™ Standard by The Open Group&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Глава "&lt;a class="reference external" href="https://pubs.opengroup.org/architecture/o-aa-standard/architecture-development.html#_architecture_development_styles"&gt;4.5. Architecture Development Styles&lt;/a&gt;" стандарта посвящена поиску баланса между "&lt;a class="reference external" href="https://pubs.opengroup.org/architecture/o-aa-standard/architecture-development.html#_intentional_architecture_2"&gt;4.5.2. Intentional Architecture&lt;/a&gt;" и "&lt;a class="reference external" href="https://pubs.opengroup.org/architecture/o-aa-standard/architecture-development.html#emergence"&gt;4.5.1. Emergence Architecture&lt;/a&gt;".&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prediction-adaptation"&gt;
&lt;span id="emacsway-balancing-prediction-adaptation-pendulum-swinging"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Эволюционный маятник баланса Prediction/Adaptation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В 2021 году большую популярность обрела статья, освещавшая назревшие в индустрии вопросы относительно поиска баланса Prediction/Adaptation:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://threedots.tech/post/software-dark-ages/"&gt;Software Dark Ages&lt;/a&gt;" by Robert Laszczak&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://habr.com/ru/company/cian/blog/569940/"&gt;Темные века разработки программного обеспечения&lt;/a&gt;" by Robert Laszczak, перевод Евгения Пешкова&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simon Brown тоже обратил внимание на тот факт, что на современном рынке маятник Prediction/Adaptation качнулся в сторону Prediction (анализ и проектирование) от Adaptation (преобладающий принцип Single-Team Agile):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Even just a few years ago, "software architecture" was not a topic that people were interested in ... "because agile". Times are changing?"&lt;/p&gt;
&lt;p class="attribution"&gt;—2021-12-23, &lt;a class="reference external" href="https://t.co/ipu5HpS1C4"&gt;https://t.co/ipu5HpS1C4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;В 2000-м Tom DeMarco и Camden, Maine писали:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "In On War, Carl von Clausewitz tells us that military history is a pendulum swinging back and forth between the relative advantages of armor and of mobility.
The knights in shining armor were able to dominate any knight without, but they were no match for the quick, nearly naked pony warriors that swept across the plains with Genghis Kahn and his Mongols.
Light cavalry itself was doomed as soon as there were tanks, and tanks were no match for fleet-footed Palestinian teenagers with Sagger missiles.
With the Maginot Line, the French were gambling that the pendulum had swung again toward armor, but it hadn't, and the Germans simply went around it.&lt;/p&gt;
&lt;p&gt;In the field of IT, we are just emerging from a time in which armor (process) has been king.
And now we are moving into a time when only mobility matters.
Building a product the right way still sounds like a laudable goal, but—let's face it—what really matters today is building it fast.
Because we are process-obsessed in our field, we have tended to react to this new imperative as we reacted to the imperatives thrust upon us in the 1980s and 1990s.
We have asked, "What shall we add to our process to deal with this new situation?"&lt;/p&gt;
&lt;p class="attribution"&gt;—Foreword of "Planning Extreme Programming" by Kent Beck, Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="section" id="prediction-adaptation-adaptation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Занос маятника Prediction/Adaptation в сторону Adaptation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Можно заметить, что на рубеже 2000 года, &lt;a class="reference internal" href="../models/agile/agile.html#emacsway-agile-development"&gt;&lt;span class="std std-ref"&gt;маятник Prediction/Adaptation максимально отклонился в сторону Adaptation&lt;/span&gt;&lt;/a&gt;, зачастую минимизируя долю Prediction до минималистичного набора практик - PBR, Spike, Planning.
Этому способствовало радикальное снижение стоимости Adaptation в те годы, благодаря росту популярности OOP, &lt;a class="reference internal" href="adaptation/software-design/patterns.html#emacsway-agile-patterns"&gt;&lt;span class="std std-ref"&gt;шаблонов&lt;/span&gt;&lt;/a&gt; проектирования и принципов проектирования, методик управления сложностью (ROM, POSA, GOF, OOAD, SOLID, Use Case Driven Approach, Object-Oriented Software Construction etc.), TDD, Refactoring и т.д.&lt;/p&gt;
&lt;p&gt;В конце 90-х — в начале 2000-х, когда ведущим умам архитектуры своего времени удалось достигнуть &lt;a class="reference internal" href="../models/agile/agile.html#emacsway-agile-development"&gt;&lt;span class="std std-ref"&gt;пологого графика роста стоимости изменения (адаптации) кода, максимально приближенного к горизонтальной асимтоте&lt;/span&gt;&lt;/a&gt;, что открыло широкие возможности по удешевлению разработки путем &lt;a class="reference internal" href="adaptation/adaptation.html#emacsway-adaptation"&gt;&lt;span class="std std-ref"&gt;эмпирического (т.е. опытным путем) разрешения неопределенности&lt;/span&gt;&lt;/a&gt; (т.е. итеративно).
Это означало, что стоимость реализации решения больше не зависело от момента его принятия, что позволило отказаться от заблаговременного проектирования и откладывать принятие решения до момента наибольшей полноты информированности, даже после частичной реализации продукта.&lt;/p&gt;
&lt;p&gt;Маятник отклонился от Prediction к Adaptation с большим заносом.
Хотя в то время уже были модели разработки того, что мы сегодня называем моделями масштабируемого Agile (RUP, MSF, RAD, FDD, Crystal Clear etc.), но они не занимали значительной части рынка.&lt;/p&gt;
&lt;p&gt;Так же, как во времена роста популярности OOP, "Switch-Case Statement" считался Code Smell, дабы стимулировать продвижение OOP в массы (об этом признается M.Fowler во втором издании книги Refactoring), в начале 2000-х значение заблаговременного анализа и проектирования (Prediction) нередко принебрегалось, дабы подчеркнуть превосходство эмпирического способа разрешения неопределенности (Adaptation) и стимулировать продвижение этой идеи в массы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prediction-adaptation-prediction"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Отскок маятника Prediction/Adaptation назад к Prediction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Однако, в статье мы наблюдаем, что маятник пошел в обратном направлении:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "пять дней кодинга может сэкономить день планирования&lt;/p&gt;
&lt;p&gt;With 5 days of coding, you can save 1 day of planning"&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://threedots.tech/post/software-dark-ages/"&gt;Software Dark Ages&lt;/a&gt;" by Robert Laszczak, перевод Евгения Пешкова&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;При этом, в статье очень вяло и вскользь говорится о снижении стоимости Adaptation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Если вам нужно реализовать что-то "на будущее", потому что позже будет сложнее добавить это, – это очень плохой знак.
Вам следует подумать о том, как упростить позднее добавление.&lt;/p&gt;
&lt;p&gt;If you need to implement something "for the future" because it will be harder to add it later – that's a very bad sign.
You should think about how to make it easy to add it later."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://threedots.tech/post/software-dark-ages/"&gt;Software Dark Ages&lt;/a&gt;" by Robert Laszczak, перевод Евгения Пешкова&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Что это? Бунт против Agile? Против заветов Eric Evans?&lt;/p&gt;
&lt;p&gt;Причин здесь две.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Проекты стали сложнее, а команды стали больше, нежели они были 20 лет назад.
Cредний проект стал слишком большим для Single-Team Agile, а стоимость Adaptation нарастает со значительным опережением роста численности коллектива.&lt;/p&gt;
&lt;p&gt;Это вынуждает &lt;a class="reference internal" href="../../team-topologies/harlan-mills%27-proposal.html#emacsway-harlan-mills-proposal"&gt;&lt;span class="std std-ref"&gt;сместить баланс Prediction/Adaptation назад, в сторону Prediction&lt;/span&gt;&lt;/a&gt;.
Интерес к Prediction-методам обработки неопределенности начал возвращаться.
На первое место вышли вопросы достижения автономности команд и интеграции производимых ими системных инкрементов.
Архитектура стала обретать социальное значение.&lt;/p&gt;
&lt;p&gt;И здесь мы наблюдаем воскрешение старых принципов, которые были хорошо известны в RUP, MSF, RAD, FDD, Crystal Clear etc.
На базе старых моделей масштабируемой итеративной разработки появились новые (SAFe, DAD, LESS etc.).
Дело в том, что в старые времена Scaled Agile хоть и был не таким частым явлением, как сегодня, да и не назывался вовсе Agile, но он все-таки существовал в немногочисленных крупных корпорациях, т.к. они уже тогда столкнулись с теми проблемами, которые обрели массовость примерно к 2010 году.
Например, многие идеи популярной книги "Team Topologies", которые сегодня создают "вау-эффект", были описаны, еще в RAD.&lt;/p&gt;
&lt;p&gt;Обратите внимание на тот факт, что это совпало хронологически со взрывным ростом интереса к микросервисной архитектурой и DDD, поскольку они также отвечали на главный вызов своего времени - стремительной рост размера среднего проекта и среднего коллектива.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Начали появляться новые, более легковесные и экономичные методики анализа и проектирования (Event Storming/Modeling, Domain Storytelling, Impact Mapping, Example Mapping, Design Thinking etc.).
Prediction стал дешевле, что позволило увеличить его долю, оставаясь в прежних пределах его экономической целесообразности.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Изменился контекст разработки, и сегодня в индустрии принципы Single-Team Agile зачастую стали не ускорять, а замедлять разработку.
Это качнуло маятник назад, в сторону Prediction.&lt;/p&gt;
&lt;p&gt;Многие старые идеи Scaled Agile реинкарнировали в современные итеративные модели разработки, такие как DAD и SAFe.&lt;/p&gt;
&lt;p&gt;Начали появляться способы интеграции &lt;a class="reference internal" href="../../team-topologies/harlan-mills%27-proposal.html#emacsway-team-topologies-at-scale-program-management"&gt;&lt;span class="std std-ref"&gt;Program Management&lt;/span&gt;&lt;/a&gt; (т.е. организации процессов Prediction) в даже самые легковесные Scaled Agile Frameworks, такие как Nexus by Ken Schwaber.&lt;/p&gt;
&lt;p&gt;А в основе лежит все та же идея "&lt;a class="reference internal" href="../../team-topologies/harlan-mills%27-proposal.html#emacsway-harlan-mills-proposal"&gt;&lt;span class="std std-ref"&gt;Метода Хирурга&lt;/span&gt;&lt;/a&gt;" Харлана Миллза, который младше Закона Конвея всего на три года.&lt;/p&gt;
&lt;p&gt;Разные модели предлагают разное соотношение Prediction/Adaptation, например, в SAFe доля Prediction больше, чем в Nexus, а в RUP - еще больше. Важно уметь грамотно выбирать модель под потребности конкретного проекта.
Grady Booch даже назвал &lt;a class="reference internal" href="../sdlc-reference.html"&gt;&lt;span class="doc"&gt;качество управления моделью жизненного цикла разработки критическим условием успешности проекта&lt;/span&gt;&lt;/a&gt;.
А поскольку модель SDLC призвана решать проблему управления неопределенностью требований, то &lt;a class="reference external" href="https://itabok.iasaglobal.org/itabok3_0/architecture-methodologies-and-frameworks/"&gt;выбор модели становится архитектурной задачей&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;О том, как интегрировать активности по анализу и проектированию в Agile-модель разработки, см. также в разделе &lt;a class="reference internal" href="../../team-topologies/harlan-mills%27-proposal.html#emacsway-team-topologies-at-scale-program-management"&gt;&lt;span class="std std-ref"&gt;Program Management&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="alberto-brandolini-about-prediction-adaptation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Alberto Brandolini about Prediction/Adaptation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Автор раздела: Андрей Ганичев&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Андрей Ганичев, contributor of "&lt;a class="reference external" href="https://github.com/kgrzybek/modular-monolith-with-ddd"&gt;Full Modular Monolith application with Domain-Driven Design approach&lt;/a&gt;", на тему поиска баланса Prediction/Adaptation:&lt;/p&gt;
&lt;p&gt;Когда читал книгу Брандолини про "&lt;a class="reference external" href="https://leanpub.com/introducing_eventstorming"&gt;Introducing EventStorming: An act of Deliberate Collective Learning&lt;/a&gt;" by Alberto Brandolini (та которая недописанная), обратил внимание что и он вскользь проходит по этой теме.&lt;/p&gt;
&lt;p&gt;Глава Pretending to solve the problem writing software, раздел Embrace Change:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "...iterative development is expensive. It is the best approach for developing software in very complex, and lean-demanding domains. However, the initial starting point matters, a lot. A big refactoring will cost a lot more than iterative fine tuning (think splitting a database, vs renaming a variable). So I'll do everything possible to start iterating from the most reasonable starting point."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://leanpub.com/introducing_eventstorming"&gt;Introducing EventStorming: An act of Deliberate Collective Learning&lt;/a&gt;" by Alberto Brandolini&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Upfront is a terrible word in the agile jargon. It recalls memories the old times analysis phase in the worst corporate waterfall. Given this infamous legacy, the word has been banned from agile environments like blasphemy. But unfortunately ...there's always something upfront. Even the worst developer thinks before typing the firs line of code."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://leanpub.com/introducing_eventstorming"&gt;Introducing EventStorming: An act of Deliberate Collective Learning&lt;/a&gt;" by Alberto Brandolini&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Cм. также:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Essential Scrum: A Practical Guide to the Most Popular Agile Process" by Kenneth Rubin, "Chapter 3 Agile Principles :: Prediction and Adaptation"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Essential Scrum: A Practical Guide to the Most Popular Agile Process" by Kenneth Rubin, "Chapter 3 Agile Principles :: Balance Predictive Up-Front Work with Adaptive Just-in-Time Work"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Succeeding with Agile: Software Development Using Scrum" by Mike Cohn, "Chapter 9 Technical Practices :: Design: intentional yet Emergent"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Кристаллизация знаний. Как читать и не превратиться в коллекционера информации.</title><link>https://dckms.github.io/system-architecture/emacsway/soft-skills/learning.html</link><description>&lt;span class="target" id="index-0"/&gt;&lt;div class="section" id="emacsway-learning-in-psychology"&gt;
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Иногда у меня спрашивают, как мне удается запоминать так много информации.
Истина в том, что я не собираю информацию, а, наоборот, дистиллирую её.
Процесс кристаллизации знаний заключается в том, чтобы сократить количество возможных вариантов.&lt;/p&gt;
&lt;p&gt;Кто работал с TDD, тот знаком с методом проектирования ПО путем обобщения в результате триангуляции.
Если кто не знаком, то обязательно почитайте "Test-Driven Development By Example" by Kent Beck - это на вес золота.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Here is another general pattern of refactoring: &lt;strong&gt;take code that works in one instance and generalize it to work in many&lt;/strong&gt; by replacing constants with variables.
Here the constant was hardwired code, not a data value, but the principle is the same.
&lt;strong&gt;TDD makes this work well by giving you running concrete examples from which to generalize&lt;/strong&gt;, instead of having to generalize purely with reasoning."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Именно процесс триангуляции и обобщения происходит в моей памяти под воздействием новых точек зрения, которые дает литература.
Таким образом, чем больше литературы я освоил, тем с более узким подмножеством вариантов я остался.
Как говорил Robert C. Martin, архитектура - это наука о том, как не надо делать.&lt;/p&gt;
&lt;p&gt;Отсечение - основной метод работы скульптора, благодаря которому из бесформенной глыбы высвобождается образ.
Обратите внимание, слово "образование" (в контексте обучения) происходит от слова "образ".&lt;/p&gt;
&lt;p&gt;Чем меньшим количеством вариантов я обладаю, тем легче мне ориентироваться среди них.
Именно эта легкость и создает у стороннего наблюдателя ошибочную иллюзию изобилия информации.&lt;/p&gt;
&lt;p&gt;Самое главное - это выявлять и понимать причинно-следственные связи, тогда не нужно запоминать все разнообразие возможных вариантов.
Наглядный пример хорошо демонстрируется в этой статье Kent Beck о поисках границ микросервисов:&lt;/p&gt;
&lt;p&gt;— "&lt;a class="reference external" href="https://medium.com/@kentbeck_7670/monolith-services-theory-practice-617e4546a879"&gt;Monolith -&amp;gt; Services: Theory &amp;amp; Practice&lt;/a&gt;" by Kent Beck&lt;/p&gt;
&lt;p&gt;В детстве на меня произвели впечатления слова одного боевого офицера спецслужб, сослуживца моего отца, мастера спорта по рукопашному бою.
Он говорил, что знать много приемов вредно - можно запутаться в критической ситуации.&lt;/p&gt;
&lt;p&gt;По этому поводу мне нравится позиция Никлаус Вирт:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Богатство функциональных возможностей во многих современных языках - это действительно проблема сама по себе, а не решение других проблем.
Избыток возможностей - это еще одно следствие веры многих программистов в то, что ценность языка пропорциональна количеству этих возможностей (как я это называю- это вера в "колокольчики и свистки").
Однако, мы знаем, что будет лучше, если каждое базисное понятие представляется единственной, специально для этого предназначенной конструкцией.
Это не только сокращает усилия по изучению языка, но и сокращает размер его описания, что, в свою очередь, помогает избежать несогласованности и неправильного понимания.
Поддержание языка максимально простым и регулярным всегда было приоритетом в моей работе: описание Pascal занимало около 50 страниц, Modula - около 40, а Oberon - и вовсе 16.
И я рассматриваю эту тенденцию как прогрессивную.
Истинная ценность языков программирования зависит от качества и практичности их абстракций.
Пример - абстракция, называемая "число" или абстракция "логическая величина", замещающая конкретную строку битов.&lt;/p&gt;
&lt;p&gt;Ценность такого рода абстракции основывается на ее целостности.
В случае чисел должны быть применяемы только арифметические операции, независимо от того факта, что логические операции, в принципе, также могут быть применимы к битовым строкам, представляющим числа."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="http://hosting.vspu.ac.ru/~chul/wirth/culture/culture.htm"&gt;О культуре разработки ПО&lt;/a&gt;" / Никлаус Вирт&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;P.S.: Бесподобная книга о том, как читать и не превратиться в коллекционера информации - "Как читать книги" / Поварнин С.И.
Читается за один вечер.
Книга номер один.&lt;/p&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;См.также&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="planning-in-psychology.html#emacsway-planning-in-psychology"&gt;&lt;span class="std std-ref"&gt;Психологическое значение планирования&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="icebreaker-principle.html"&gt;&lt;span class="doc"&gt;Принцип ледокола&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../README.html"&gt;&lt;span class="doc"&gt;Как пользоваться&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../it/self-education/self-education-for-software-engineer.html"&gt;&lt;span class="doc"&gt;Список литературы для самообучения разработчика программного обеспечения&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Разрешение конфликтов на почве недостатка знаний</title><link>https://dckms.github.io/system-architecture/emacsway/soft-skills/knowledge-vs-opinion.html</link><description>&lt;span class="target" id="index-0"/&gt;&lt;div class="section" id="emacsway-knowledge-vs-opinion-in-psychology"&gt;
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Нередко наблюдаю на практике возникновение конфликтов в коллективе практически на пустом месте, по причине принуждения коллектива к принятию решения в условиях недостаточной информированности.&lt;/p&gt;
&lt;p&gt;Основное отличие &lt;strong&gt;знания&lt;/strong&gt; от &lt;strong&gt;мнения&lt;/strong&gt; заключается в широте охвата опыта, которым оно было произведено.
Грубо говоря, &lt;strong&gt;теория - это обобщенная практика&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"&lt;strong&gt;Теория&lt;/strong&gt; — (1) система научных идей и принципов, &lt;strong&gt;обобщающих практический опыт&lt;/strong&gt;, отражающих объективные природные закономерности и положения, которые образуют науку (см.) или раздел какой-либо науки, а также совокупность правил в области какого-либо знания млн. мастерства (Т. вождения или полётов);"&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://polytechnic_dictionary.academic.ru/2647/%D0%A2%D0%95%D0%9E%D0%A0%D0%98%D0%AF"&gt;Большая политехническая энциклопедия.&lt;/a&gt;" - М.: Мир и образование. Рязанцев В. Д.. 2011.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Обратимся к энциклопедии:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"Там, где заканчивается &lt;strong&gt;знание&lt;/strong&gt;, начинается &lt;strong&gt;мнение&lt;/strong&gt;".&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://dic.academic.ru/dic.nsf/enc_philosophy/737/%D0%9C%D0%9D%D0%95%D0%9D%D0%98%D0%95"&gt;Философия: Энциклопедический словарь.&lt;/a&gt;" — М.: Гардарики. Под редакцией А.А. Ивина. 2004.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"Со времен элеатов, атомистов и Платона &lt;strong&gt;знание&lt;/strong&gt; характеризуется через противоположность &lt;strong&gt;мнению&lt;/strong&gt;."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://dic.academic.ru/dic.nsf/enc_philosophy/399"&gt;Новая философская энциклопедия: В 4 тт.&lt;/a&gt;" М.: Мысль. Под редакцией В. С. Стёпина. 2001.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"К отличительным особенностям научного знания в настоящее время относят: непротиворечивость, &lt;strong&gt;эмпирическую проверяемость&lt;/strong&gt;, логическую или &lt;strong&gt;эмпирическую обоснованность&lt;/strong&gt;."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://dic.academic.ru/dic.nsf/enc_philosophy/399"&gt;Философия: Энциклопедический словарь.&lt;/a&gt;" — М.: Гардарики. Под редакцией А.А. Ивина. 2004.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"Знание есть такой результат познавательной деятельности, который обладает непреходящей истинностью, может быть логически или фактически обоснован и допускает &lt;strong&gt;эмпирическую или практическую проверку&lt;/strong&gt;."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://dic.academic.ru/dic.nsf/enc_philosophy/399"&gt;Философия: Энциклопедический словарь.&lt;/a&gt;" — М.: Гардарики. Под редакцией А.А. Ивина. 2004.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"3нание, являясь &lt;strong&gt;обобщением&lt;/strong&gt; достоверных &lt;strong&gt;фактов&lt;/strong&gt;, за случайным находит необходимое и закономерное, за единичным и частным — общее."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://dic.academic.ru/dic.nsf/enc_philosophy/399"&gt;Философский энциклопедический словарь.&lt;/a&gt;" — М.: Советская энциклопедия. Гл. редакция: Л. Ф. Ильичёв, П. Н. Федосеев, С. М. Ковалёв, В. Г. Панов. 1983.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"Знание есть не только &lt;strong&gt;преобразование опыта&lt;/strong&gt; в сознание путем структуризации, обозначения его элементов, не только фиксация опыта в социальной памяти.
Оно является способом трансформации знаковых систем, сознания, деятельности и общения, придания им новой формы, т. е. нового смысла и значения.
Знание возникает как осмысление человеком контекстов своего &lt;strong&gt;опыта&lt;/strong&gt;."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://dic.academic.ru/dic.nsf/enc_philosophy/399"&gt;Новая философская энциклопедия: В 4 тт.&lt;/a&gt;" М.: Мысль. Под редакцией В. С. Стёпина. 2001.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"В совр. методологии науки принято выделять след. осн. компоненты теории:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;исходную эмпирич. основу, которая включает множество зафиксированных в данной области знания фактов, достигнутых в ходе экспериментов и требующих теоретич. объяснения;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;исходную теоретич. основу — множество первичных допущений, постулатов, аксиом, общих законов Т., в совокупности описывающих идеализированный объект Т.;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;логику Т.— множество допустимых в рамках Т. правил ло-гич. вывода и доказательства;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;совокупность выведенных в Т. утверждений с их доказательствами, составляющую осн. массив теоретич. знания."&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://dic.academic.ru/dic.nsf/enc_philosophy/1215/%D0%A2%D0%95%D0%9E%D0%A0%D0%98%D0%AF"&gt;Философский энциклопедический словарь.&lt;/a&gt;" — М.: Советская энциклопедия. Гл. редакция: Л. Ф. Ильичёв, П. Н. Федосеев, С. М. Ковалёв, В. Г. Панов. 1983.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Когда в коллективе недостаточно знаний, столкновения мнений и конфликты всегда неизбежны.
Потому что &lt;strong&gt;мнение&lt;/strong&gt; выражает индивидуальный опыт человека.
А это значит, что любое несогласие с его мнением воспринимается как недооценка его опыта и ущемление компетентности, что может усиливаться рядом &lt;a class="reference internal" href="cognitive-biases.html#emacsway-cognitive-biases"&gt;&lt;span class="std std-ref"&gt;когнитивых искажений&lt;/span&gt;&lt;/a&gt;.
Этим объясняется повышенная токсичность online IT-сообществ.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Знания&lt;/strong&gt; же человек не отождествляет с персональной компетентностью, поскольку знания производятся гораздо более широким охватом опыта.
Соответственно, он уже не воспринимает несогласие с его позицией как ущемление достоинства.&lt;/p&gt;
&lt;p&gt;Мне известны два способа решения такого рода конфликтов:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Восполнить информационный вакуум путем обращения к расширенному обобщенному опыту, т.е. к теории, дабы восполнить недостающие точки зрения, возникшие в силу заведомой ограниченности индивидуального опыта.
Причем, этот метод требует деликатности, ибо знания могут быть отторгнуты коллективом в силу эффекта "&lt;a class="reference external" href="https://ru.m.wikipedia.org/wiki/%D0%97%D0%B0%D1%89%D0%B8%D1%82%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%B7%D0%BC"&gt;Психологической Защиты&lt;/a&gt;", так как выводят коллектив из зоны комфорта, и могут спровоцировать чувство ущербности на фоне осведомленности спикера.
Лучшая форма донесения новых знаний - это постановка перед коллективом таких вопросов, которые способны пролить свет на недостающие точки зрения.
Не говорить, а спрашивать.
Об этом писали Kent Beck, Neal Ford, Gregor Hohpe и др.
Это раздвигает границы опыта человека, на котором он основывает свое мнение, и вынуждает переосмыслить его.&lt;/p&gt;
&lt;p&gt;Дело может существенно облегчиться, если у коллектива имеются общепризнанные им авторитетные авторы, освещающие решаемый вопрос.
Зачастую помогают стандарты и материалы для сертификации уровня знаний.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Не настаивать на принятии решения в условиях недостаточной информированности. Дейл Карнеги в свое время дал такой совет для борьбы со стрессом - не пытайтесь принять решение в условиях недостаточной информированности.
Просто собирайте информацию, и решение придет само.&lt;/p&gt;
&lt;p&gt;Если продолжать настаивать ("Вы должны сегодня определиться!..."), то возможны два сценария развития ситуации:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Силы консолидации коллектива возобладают над силой внешнего принуждения коллектива. Принуждение будет отторгнуто ("А нам это не нужно...").&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Сила внешнего принуждения возобладает над силами консолидации коллектива. Участники коллектива поймут, что защищать свое мнение в виде собственного достоинства легче сообща, и начнут объединяться по признаку отождествления общих угроз, что приведет к расколу коллектива по группам. Исправить такой раскол может оказаться сложно и долго.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Роль архитектуры в масштабировании команд, DDD и микросервисах</title><link>https://dckms.github.io/system-architecture/emacsway/it/team-topologies/harlan-mills'-proposal.html</link><description>
&lt;span id="emacsway-team-topologies-at-scale"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ddd" id="id14"&gt;Роль архитектуры в масштабировании команд, DDD и микросервисах&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id2" id="id15"&gt;Закон Брукса и роль автономности команд&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id16"&gt;Закон Брукса&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id17"&gt;Противоречие между эффективностью и производительностью&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#emacsway-harlan-mills-proposal" id="id18"&gt;Предложение Харлана Миллза&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#program-management" id="id19"&gt;Program Management&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#spotify" id="id20"&gt;Spotify&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#agile-software-requirements-lean-requirements-practices-for-teams-programs-and-the-enterprise" id="id21"&gt;Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#scaled-agile-framework-safe" id="id22"&gt;Scaled Agile Framework (SAFe)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#agile-practice-guide-by-pmi" id="id23"&gt;"Agile Practice Guide" by PMI&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#disciplined-agile-delivery-dad" id="id24"&gt;Disciplined agile delivery (DAD)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#iso-iec-ieee-12207-2017" id="id25"&gt;ISO/IEC/IEEE 12207:2017&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nexus" id="id26"&gt;Nexus&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#scrum-of-scrums" id="id27"&gt;Scrum of Scrums&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id6" id="id28"&gt;Другие&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id7" id="id29"&gt;Социальная роль архитектуры&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#emacsway-team-topologies-at-scale-literature" id="id30"&gt;Литература&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id9" id="id31"&gt;Ссылки по теме&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Закон Брукса и роль автономности команд&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;Закон Брукса&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Сегодня, наверное, каждый знает Закон Брукса:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Если проект не укладывается в сроки, то добавление рабочей силы задержит его ещё больше.&lt;/p&gt;
&lt;p&gt;Adding manpower to a late software project makes it later."&lt;/p&gt;
&lt;p class="attribution"&gt;—The Brooks's Law&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Brooks' law is based on the idea that communications overhead is a significant factor on software projects, and that work on a software project is not easily partitioned into isolated, independent tasks. Ten people can pick cotton ten times as fast as one person because the work is almost perfectly partitionable, requiring little communication or coordination. But nine women can't have a baby any faster than one woman can because the work is not partitionable. Brooks argues that work on a software project is more like having a baby than picking cotton. When new staff are brought into a late project, they aren't immediately productive, and they must be trained. The staff who must train them are already productive, but they lose productivity while they're training new staff. Brooks argues that, on balance, more effort is lost to training and additional coordination and communications overhead than is gained when the new staff eventually becomes productive."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://stevemcconnell.com/articles/brooks-law-repealed/"&gt;Brooks' Law Repealed?&lt;/a&gt;" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Число занятых [специалистов] и число месяцев [в термине человеко-месяц] являются взаимозаменяемыми величинами лишь тогда, когда задачу можно распределить среди ряда работников, которые не имеют между собой взаимосвязи (рис. 2.1).&lt;/p&gt;
&lt;p&gt;Men and months [in term man-month] are interchangeable commodities only when a task can be partitioned among many workers with no communication among them (Fig. 2.1)."&lt;/p&gt;
&lt;p class="attribution"&gt;—"The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr., перевод С. Маккавеева&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Сравните это с&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Microservices' main benefit, in my view, is enabling parallel development by establishing a hard-to-cross boundary between different parts of your system."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/dont-start-monolith.html"&gt;Don't start with a monolith&lt;/a&gt;" by Stefan Tilkov, a co-founder and principal consultant at innoQ&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;Противоречие между эффективностью и производительностью&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Frederick Brooks формулирует противоречие. С одной стороны:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Выше я доказал, что само число разработчиков, действия которых нужно согласовывать, оказывает влияние на стоимость проекта, поскольку значительная часть издержек вызвана необходимостью общения и устранения отрицательных последствий разобщенности (системная отладка). Это также наводит на мысль, что &lt;strong&gt;желательно разрабатывать системы возможно меньшим числом людей&lt;/strong&gt;. Действительно, опыт разработки больших программных систем, как правило, показывает, что подход с позиций грубой силы влечет удорожание, замедленность, неэффективность, а создаваемые в результате системы не являются концептуально целостными. Список, иллюстрирующий это, бесконечен: OS/360, Exec 8, Scop 6600, Multics, TSS, SAGE и другие.&lt;/p&gt;
&lt;p&gt;I have earlier argued that the sheer number of minds to be coordinated affects the cost of the effort, for a major part of the cost is communication and correcting the ill effects of miscommunication (system debugging). This, too, suggests that one wants the system to be built by &lt;strong&gt;as few minds as possible&lt;/strong&gt;. Indeed, most experience with large programming systems shows that the brute-force approach is costly, slow, inefficient, and produces systems that are not conceptually integrated. OS/360, Exec 8, Scope 6600, Multics, TSS, SAGE, etc.—the list goes on and on."&lt;/p&gt;
&lt;p class="attribution"&gt;—"The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr., перевод С. Маккавеева&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Таким же наблюдением делится и Sam Newman:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "... небольшие команды, работающие с небольшим объемом исходного кода, как правило, показывают более высокую продуктивность.&lt;/p&gt;
&lt;p&gt;... smaller teams working on smaller codebases tend to be more productive!"&lt;/p&gt;
&lt;p class="attribution"&gt;—"Building Microservices. Designing Fine-Grained Systems" by Sam Newman, перевод ООО Издательство "Питер"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Но, с другой стороны:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "В этом и состоит &lt;strong&gt;изъян идеи маленькой активной команды: для создания по-настоящему крупных систем ей потребуется слишком много времени&lt;/strong&gt;. Посмотрим, как разработка OS/360 осуществлялась бы маленькой активной командой, допустим, из 10 человек. Положим, что они в семь раз более продуктивны средних программистов (что далеко от истины). Допустим, что уменьшение объема общения благодаря малочисленности команды позволило еще в семь раз повысить производительность. Допустим, что на протяжении всего проекта работает одна и та же команда. Таким образом, 5000/(10*7*7)=10, т.е. работу в 5000 человеко-лет они выполнят за 10 лет. Будет ли продукт представлять интерес через 10 лет после начала разработки или устареет благодаря стремительному развитию программных технологий?&lt;/p&gt;
&lt;p&gt;This then is &lt;strong&gt;the problem with the small, sharp team concept: it is too slow for really big systems. Consider the OS/360 job as it might be tackled with a small, sharp team&lt;/strong&gt;. Postulate a 10-man team. As a bound, let them be seven times as productive as mediocre programmers in both programming and documentation, because they are sharp. Assume OS/360 was built only by mediocre programmers (which is far from the truth). As a bound, assume that another productivity improvement factor of seven comes from reduced communication on the part of the smaller team. Assume the same team stays on the entire job. Well, 5000/(10 X 7 X 7 ) = 10; they can do the 5000 man-year job in 10 years. Will the product be interesting 10 years after its initial design? Or will it have been made obsolete by the rapidly developing software technology?"&lt;/p&gt;
&lt;p class="attribution"&gt;—"The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr., перевод С. Маккавеева&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Возникает противоречие:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Дилемма представляется жестокой. Для эффективности и концептуальной целостности предпочтительнее, чтобы проектирование и создание системы осуществили &lt;strong&gt;несколько светлых голов&lt;/strong&gt;. Однако для больших систем желательно поставить под ружье &lt;strong&gt;значительный контингент&lt;/strong&gt;, чтобы продукт мог увидеть свет вовремя. &lt;strong&gt;Как можно примирить эти два желания?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The dilemma is a cruel one. For efficiency and conceptual integrity, one prefers &lt;strong&gt;a few good minds&lt;/strong&gt; doing design and construction. Yet for large systems one wants a way to bring &lt;strong&gt;considerable manpower to bear&lt;/strong&gt;, so that the product can make a timely appearance. &lt;strong&gt;How can these two needs be reconciled?&lt;/strong&gt;"&lt;/p&gt;
&lt;p class="attribution"&gt;—"The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr., перевод С. Маккавеева&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Добавим немного контекста:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Вторая ошибка рассуждений заключена в самой единице измерения, используемой при оценивании и планировании: человеко-месяц. Стоимость действительно измеряется как произведения числа занятых на количество затраченных месяцев. Но не достигнутый результат. Поэтому использование человеко-месяца как единицы измерения объема работы является опасным заблуждением.&lt;/p&gt;
&lt;p&gt;Число занятых и число месяцев являются взаимозаменяемыми величинами лишь тогда, когда задачу можно распределить среди ряда работников, которые не имеют между собой взаимосвязи (рис. 2.1). Это верно, когда жнут пшеницу или собирают хлопок, но в системном программировании это далеко не так.&lt;/p&gt;
&lt;div class="figure align-left" id="id10"&gt;
&lt;a class="reference internal image-reference" href="../../../_images/fig-2.1-perfectly-partitionable-task.png"&gt;&lt;img alt="Рис. 2.1 Зависимость времени от числа занятых — полностью разделимая задача. Fig. 2.1 Time versus number of workers—perfectly partitionable task. The image source is &amp;quot;The Mythical Man-Month Essays on Software Engineering Anniversary Edition&amp;quot; by Frederick P. Brooks, Jr., &amp;quot;Chapter 2 The Mythical Man-Month&amp;quot;, перевод С. Маккавеева." src="../../../_images/fig-2.1-perfectly-partitionable-task.png" style="width: 70%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Рис. 2.1 Зависимость времени от числа занятых — полностью разделимая задача. Fig. 2.1 Time versus number of workers—perfectly partitionable task. The image source is "The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr., "Chapter 2 The Mythical Man-Month", перевод С. Маккавеева.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Если задачу нельзя разбить на части, поскольку существуют ограничения на последовательность выполнения этапов, то увеличение затрат не оказывает влияния на график (рис. 2.2). Чтобы родить ребенка требуется девять месяцев независимо от того, сколько женщин привлечено к решению данной задачи. Многие задачи программирования относятся к этому типу, поскольку отладка по своей сути носит последовательный характер.&lt;/p&gt;
&lt;div class="figure align-left" id="id11"&gt;
&lt;a class="reference internal image-reference" href="../../../_images/fig-2.2-unpartitionable-task.png"&gt;&lt;img alt="Рис. 2.2 Зависимость времени от числа занятых — неразделимая задача. Fig. 2.2 Time versus number of workers—unpartitionable task. The image source is &amp;quot;The Mythical Man-Month Essays on Software Engineering Anniversary Edition&amp;quot; by Frederick P. Brooks, Jr., &amp;quot;Chapter 2 The Mythical Man-Month&amp;quot;, перевод С. Маккавеева." src="../../../_images/fig-2.2-unpartitionable-task.png" style="width: 70%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Рис. 2.2 Зависимость времени от числа занятых — неразделимая задача. Fig. 2.2 Time versus number of workers—unpartitionable task. The image source is "The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr., "Chapter 2 The Mythical Man-Month", перевод С. Маккавеева.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Для задач, которые могут быть разбиты на части, но требуют обмена данными между подзадачами, затраты на обмен данными должны быть добавлены к общему объему необходимых работ. Поэтому достижимый наилучший результат оказывается несколько хуже, чем простое соответствие числа занятых и количества месяцев (рис. 2.3).&lt;/p&gt;
&lt;div class="figure align-left" id="id12"&gt;
&lt;a class="reference internal image-reference" href="../../../_images/fig-2.3-partitionable-task-requiring-communication.png"&gt;&lt;img alt="Рис. 2.3 Зависимость времени от числа занятых — разделимая задача, требующая обмена данными. Fig. 2.3 Time versus number of workers—partitionable task requiring communication. The image source is &amp;quot;The Mythical Man-Month Essays on Software Engineering Anniversary Edition&amp;quot; by Frederick P. Brooks, Jr., &amp;quot;Chapter 2 The Mythical Man-Month&amp;quot;, перевод С. Маккавеева." src="../../../_images/fig-2.3-partitionable-task-requiring-communication.png" style="width: 70%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Рис. 2.3 Зависимость времени от числа занятых — разделимая задача, требующая обмена данными. Fig. 2.3 Time versus number of workers—partitionable task requiring communication. The image source is "The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr., "Chapter 2 The Mythical Man-Month", перевод С. Маккавеева.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Дополнительная нагрузка состоит из двух частей — обучения и обмена данными. Каждого работника нужно обучить технологии, целям проекта, общей стратегии и плану работы. Это обучение нельзя разбить на части, поэтому данная часть затрат изменяется линейно в зависимости от числа занятых.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;С обменом данными дело обстоит хуже. Если все части задания должны быть отдельно скоординированы между собой, то затраты возрастают как n(n-2)/2. Для трех работников требуется втрое больше попарного общения, чем для двух, для четырех — вшестеро. Если помимо этого возникает необходимость в совещаниях трех, четырех и т.д. работников для совместного решения вопросов, положение становится еще хуже. Дополнительные затраты на обмен данными могут полностью обесценить результат дробления исходной задачи и привести к положению, описываемому рисунком 2.4.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="figure align-left" id="id13"&gt;
&lt;a class="reference internal image-reference" href="../../../_images/fig-2.4-task-with-complex-interrelationships.png"&gt;&lt;img alt="Рис. 2.4 Зависимость времени от числа занятых — задача со сложными взаимосвязями. Fig. 2.4 Time versus number of workers—task with complex interrelationships. The image source is &amp;quot;The Mythical Man-Month Essays on Software Engineering Anniversary Edition&amp;quot; by Frederick P. Brooks, Jr., &amp;quot;Chapter 2 The Mythical Man-Month&amp;quot;, перевод С. Маккавеева." src="../../../_images/fig-2.4-task-with-complex-interrelationships.png" style="width: 70%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Рис. 2.4 Зависимость времени от числа занятых — задача со сложными взаимосвязями. Fig. 2.4 Time versus number of workers—task with complex interrelationships. The image source is "The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr., "Chapter 2 The Mythical Man-Month", перевод С. Маккавеева.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Поскольку создание программного продукта является по сути системным проектом — практикой сложных взаимосвязей, затраты на обмен данными велики и быстро начинают преобладать над сокращением сроков, достигаемым в результате разбиения задачи на более мелкие подзадачи. В этом случае привлечение дополнительных работников не сокращает, а удлиняет график работ.&lt;/p&gt;
&lt;p&gt;The second fallacious thought mode is expressed in the very unit of effort used in estimating and scheduling: the man-month. Cost does indeed vary as the product of the number of men and the number of months. Progress does not. Hence the man-month as a unit for measuring the size of a job is a dangerous and deceptive myth. It implies that men and months are interchangeable.&lt;/p&gt;
&lt;p&gt;Men and months are interchangeable commodities only when a task can be partitioned among many workers with no communication among them (Fig. 2.1). This is true of reaping wheat or picking cotton; it is not even approximately true of systems programming.&lt;/p&gt;
&lt;p&gt;When a task cannot be partitioned because of sequential constraints, the application of more effort has no effect on the schedule (Fig. 2.2). The bearing of a child takes nine months, no matter how many women are assigned. Many software tasks have this characteristic because of the sequential nature of debugging.&lt;/p&gt;
&lt;p&gt;In tasks that can be partitioned but which require communication among the subtasks, the effort of communication must be added to the amount of work to be done. Therefore the best that can be done is somewhat poorer than an even trade of men for months (Fig. 2.3).&lt;/p&gt;
&lt;p&gt;The added burden of communication is made up of two parts, training and intercommunication. Each worker must be trained in the technology, the goals of the effort, the overall strategy, and the plan of work. This training cannot be partitioned, so this part of the added effort varies linearly with the number of workers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intercommunication is worse. If each part of the task must be separately coordinated with each other part/ the effort increases as n(n-I)/2. Three workers require three times as much pairwise intercommunication as two; four require six times as much as two. If, moreover, there need to be conferences among three, four, etc., workers to resolve things jointly, matters get worse yet. The added effort of communicating may fully counteract the division of the original task and bring us to the situation of Fig. 2.4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since software construction is inherently a systems effort—an exercise in complex interrelationships—communication effort is great, and it quickly dominates the decrease in individual task time brought about by partitioning. Adding more men then lengthens, not shortens, the schedule."&lt;/p&gt;
&lt;p class="attribution"&gt;—"The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr., перевод С. Маккавеева&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Мы остановились на дилемме: с одной стороны, чем меньше численность людей, принимающих проектные решения, тем выше их продуктивность.
С другой стороны, чем больше людей задействовано в разработке, тем скорее продукт сможет выйти на рынок.
Проанализируем о том, как эту дилемму можно решить.&lt;/p&gt;
&lt;p&gt;Решение этой дилеммы становится возможным с качественным отделением архитектуры от реализации (с чем отлично справляются сетевые границы Bounded Contexts):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "&lt;strong&gt;Архитектура и разработка должны быть тщательно разделены.&lt;/strong&gt; Как сказал Блау (Blaauw), "архитектура говорит, что должно произойти, а разработка - как сделать, чтобы это произошло". В качестве простого примера он приводит часы, архитектура которых состоит из циферблата, стрелок и заводной головки. Ребенок, освоивший это архитектуру, с одинаковой легкостью может узнать время и по ручным часам, и по часам на колокольне. Исполнение же и его реализация описывают, что происходит внутри: передача усилий и управление точностью каждым из многих механизмов.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Architecture must be carefully distinguished from implementation.&lt;/strong&gt; As Blaauw has said, "Where architecture tells what happens, implementation tells how it is made to happen." He gives as a simple example a clock, whose architecture consists of the face, the hands, and the winding knob. When a child has learned this architecture, he can tell time as easily from a wristwatch as from a church tower. The implementation, however, and its realization, describe what goes on inside the case—powering by any of many mechanisms and accuracy control by any of many."&lt;/p&gt;
&lt;p class="attribution"&gt;—"The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr., перевод С. Маккавеева&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="emacsway-harlan-mills-proposal"&gt;
&lt;span id="id5"/&gt;&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;Предложение Харлана Миллза&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Harlan Mills' Proposal (Предложение Харлана Миллза) было опубликовано в:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Mills, H., "Chief programmer teams, principles, and procedures," IBM Federal Systems Division Report FSC 71-5108, Gaithersburg, Md., 1971.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Baker, F. T., "Chief programmer team management of production programming," IBM Sys. J., 11, 1 (1972).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Предложение Харлана Миллза дает свежее и творческое решение. Миллз предложил, чтобы на каждом участке работы была &lt;strong&gt;команда разработчиков, организованная наподобие бригады хирургов, а не мясников&lt;/strong&gt;. Имеется в виду, что не каждый участник группы будет врезаться в задачу, но резать будет один, а остальные оказывать ему всевозможную поддержку, повышая его производительность и плодотворность.&lt;/p&gt;
&lt;p&gt;При некотором размышлении ясно, что &lt;strong&gt;эта идея приведет к желаемому, если ее удастся осуществить&lt;/strong&gt;. Лишь несколько голов занято проектированием и разработкой, и в то же время много работников находится на подхвате. Будет ли такая организация работать? Кто играет роль анестезиологов и операционных сестер в группе программистов, а как осуществляется разделение труда? Чтобы нарисовать картину работы такой команды с включением всех мыслимых видов поддержки, я позволю себе вольное обращение к метафорам.&lt;/p&gt;
&lt;p&gt;A proposal by Harlan Mills offers a fresh and creative solution. Mills proposes that each segment of a large job be tackled by a team, but that &lt;strong&gt;the team be organized like a surgical team rather than a hog-butchering team&lt;/strong&gt;. That is, instead of each member cutting away on the problem, one does the cutting and the others give him every support that will enhance his effectiveness and productivity.&lt;/p&gt;
&lt;p&gt;A little thought shows that &lt;strong&gt;this concept meets the desiderata, if it can be made to work&lt;/strong&gt;. Few minds are involved in design and construction, yet many hands are brought to bear. Can it work? Who are the anesthesiologists and nurses on a programming team, and how is the work divided? Let me freely mix metaphors to suggest how such a team might work if enlarged to include all conceivable support."&lt;/p&gt;
&lt;p class="attribution"&gt;—"The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr., перевод С. Маккавеева&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Обратите внимание на слова "эта идея приведет к желаемому, если ее удастся осуществить".
Именно эту задачу успешно решают Bounded Contexts, позволяя совместить большой размер команды и продуктивность, т.е., осуществить масштабирование команды без ущерба производительности.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "... мы стремимся к тому, чтобы сервисы создавались в результате разбиения системы на такие части, при которых &lt;strong&gt;темпы развития внутри сервисов были намного выше темпов развития между сервисами&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;... we aim to ensure our services are decomposed such that the &lt;strong&gt;pace of change inside a service is much higher than the pace of change between services&lt;/strong&gt;."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Building Microservices. Designing Fine-Grained Systems" by Sam Newman, перевод ООО Издательство "Питер"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "One case study was particularly interesting. The team had made the wrong choice, using microservices on a system that wasn't complex enough to cover the Microservice Premium. The project got in trouble and needed to be rescued, so lots more people were thrown onto the project. At this point the microservice architecture became helpful, because &lt;strong&gt;the system was able to absorb the rapid influx of developers and the team was able to leverage the larger team numbers much more easily than is typical with a monolith&lt;/strong&gt;. As a result the project accelerated to a productivity greater than would have been expected with a monolith, enabling the team to catch up. The result was still a net negative, in that the software cost more staff-hours than it would have done if they had gone with a monolith, but the &lt;strong&gt;microservices architecture did support ramp up&lt;/strong&gt;."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/microservice-trade-offs.html"&gt;Microservice Trade-Offs&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Netflix и Amazon&lt;/p&gt;
&lt;p&gt;Наверное, идея обязательной согласованности организации и архитектуры может быть неплохо проиллюстрирована на примере Amazon и Netflix. В Amazon довольно рано начали понимать преимущества владения командами полным жизненным циклом управляемых ими систем. Там решили, что команды должны всецело распоряжаться теми системами, за которые они отвечают, управляя всем жизненным циклом этих систем. Но в Amazon также знали, что &lt;strong&gt;небольшие команды могут работать быстрее больших&lt;/strong&gt;. Это привело к созданию команд, которые можно было бы накормить двумя пиццами. Это стремление к созданию небольших команд, владеющих полным жизненным циклом своих сервисов, и стало основной причиной того, что в Amazon была разработана платформа Amazon Web Services. Для обеспечения самодостаточности своих команд компании понадобилось создать соответствующий инструментарий. Этот пример был взят на вооружение компанией Netflix и с самого начала определил формирование ее структуры вокруг небольших независимых команд, образуемых с прицелом на то, что создаваемые ими сервисы также будут независимы друг от друга. Тем самым обеспечивалась оптимизация скорости изменения архитектуры систем. Фактически в Netflix разработали организационную структуру для желаемой архитектуры создаваемых систем.&lt;/p&gt;
&lt;p&gt;Netflix and Amazon&lt;/p&gt;
&lt;p&gt;Probably the two poster children for the idea that organizations and architecture should be aligned are Amazon and Netflix. Early on, Amazon started to understand the benefits of teams owning the whole lifecycle of the systems they managed. It wanted teams to own and operate the systems they looked after, managing the entire lifecycle. But Amazon also knew that &lt;strong&gt;small teams can work faster than large teams&lt;/strong&gt;. This led famously to its two-pizza teams, where no team should be so big that it could not be fed with two pizzas. This driver for small teams owning the whole lifecycle of their services is a major reason why Amazon developed Amazon Web Services. It needed to create the tooling to allow its teams to be self-sufficient. Netflix learned from this example, and ensured that from the beginning it structured itself around small, independent teams, so that the services they created would also be independent from each other. This ensured that the architecture of the system was optimized for speed of change. Effectively, Netflix designed the organizational structure for the system architecture it wanted."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Building Microservices. Designing Fine-Grained Systems" by Sam Newman, перевод ООО Издательство "Питер"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;я хотел бы добавить еще одно высказывание от разработчиков популярного микросервисного фреймворка go-kit:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Почему микросервисы? Практически вся современная разработка программного обеспечения ориентирована на единственную цель - улучшить время выхода на рынок. Микросервисы представляют собой эволюцию модели сервис-ориентированной архитектуры, которая элегантно устраняет организационные противоречия, &lt;strong&gt;предоставляя вашим инженерам и командам автономию&lt;/strong&gt;, необходимую им для непрерывной доставки, итерации и улучшения.&lt;/p&gt;
&lt;p&gt;Why microservices? Almost all of contemporary software engineering is focused on the singular goal of improving time-to-market. Microservices are an evolution of the service-oriented architecture pattern that elegantly eliminate organizational friction, &lt;strong&gt;giving your engineers and teams the autonomy&lt;/strong&gt; they need to continuously ship, iterate, and improve."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://gokit.io/"&gt;Go kit. A toolkit for microservices.&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;На самом деле, если у вас армейская дисциплина среди разработчиков, то нет необходимости укреплять сетевыми границами пределы автономности команд, поскольку границами автономности команды является Bounded Context, который не обязательно должен быть выражен микорсервисом(-ами).&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "In theory, you don't need microservices for this if you simply have the discipline to follow clear rules and establish clear boundaries within your monolithic application; in practice, I've found this to be the case only very rarely.)"&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/dont-start-monolith.html"&gt;Don't start with a monolith&lt;/a&gt;" by Stefan Tilkov&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Сетевые границы решают проблему, известную как creeping coupling или abstraction leak. А это позволяет снизить квалификационные требования к разработчикам, тем более, что Microservices First обычно имеет экономическую целесообразность только при задействовании большого количества разработчиков.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Обмен данными между самими сервисами ведется через сетевые вызовы, чтобы &lt;strong&gt;упрочить обособленность сервисов&lt;/strong&gt; и избежать рисков, сопряженных с тесными связями.&lt;/p&gt;
&lt;p&gt;All communication between the services themselves are via network calls, &lt;strong&gt;to enforce separation between the services&lt;/strong&gt; and avoid the perils of tight coupling."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Building Microservices. Designing Fine-Grained Systems" by Sam Newman, перевод ООО Издательство "Питер"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="program-management"&gt;
&lt;span id="emacsway-team-topologies-at-scale-program-management"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Program Management&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Знаете, почему не бывает больших червяков?
Любое беспозвоночное животное не может быть бесконечно большим, поскольку на определенном пороге сила его тяжести превысит его прочность.
Рост силы тяжести опережает рост прочности.
По мере роста массы организма в нем появляется скелет, который выполняет опорные функции.&lt;/p&gt;
&lt;p&gt;По этой же причине бумажный кораблик хорошо держит форму, но если его пропорционально увеличить в несколько раз, то он рухнет под собственной тяжестью без фермы жесткости.&lt;/p&gt;
&lt;p&gt;Попытка фрактально увеличивать численность Scrum/Nexus-команд равносильна попытке создать беспозвоночное животное с массой динозавра.
Основная тяжесть, под которой рушится прочность коллектива, формируется коммуникативной нагрузкой (з-н Брукса: n(n-1)/2).&lt;/p&gt;
&lt;p&gt;Если предыдущий пример показался вам неубедительным, то давайте попробуем представить себе управление воздушным движением без диспетчеров.
Ну, такие... самоорганизующиеся экипажи.
Чтобы пилоты во время полета сами между собой договаривались о том, как они будут расходиться, какие эшелоны они будут занимать, в какой очередности они будут производить посадку и взлет...
Причем, гипотетически это еще было бы возможно где-то в районе малозагруженных аэропортов.
Но насколько при этом возрастет когнитивная нагрузка на пилота?
Ни один из пилотов, в условиях управления воздушным судном, не обладает ресурсами внимания, необходимыми для достижения целостного понимания картины воздушного движения.
Эту когнитивную нагрузку с него снимает диспетчер управления воздушным движением.
А теперь попробуйте представьте себе что-то подобное в Шереметьево.
А если какое-то одно воздушное судно терпит бедствие и нуждается в аварийной посадке?&lt;/p&gt;
&lt;div class="section" id="spotify"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;Spotify&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Даже в Spotify существует такой "опорный скелет":&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "At Spotify there is a separate operations team, but their job is not to make releases for the squads -­ their job is to give the squads the support they need to release code themselves; support in the form of infrastructure, scripts, and routines. They are, in a sense, "building the road to production".&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;We also have a chief architect role, a person who coordinates work on high-­level architectural issues that cut across multiple systems. He reviews development of new systems to make sure they avoid common mistakes, and that they are aligned with our architectural vision. The feedback is always just suggestions and input -­ the decision for the final design of the system still lies with the squad building it."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://www.scrumatscale.com/wp-content/uploads/2020/09/S@S_Spotify_Scaling.pdf"&gt;Scaling Agile @ Spotify with Tribes, Squads, Chapters &amp;amp; Guilds&lt;/a&gt;" by Henrik Kniberg &amp;amp; Anders Ivarsson, Oct 2012&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Но более отчетливо этот скелет сформирован в виде Program Management в &lt;a class="reference external" href="https://www.scaledagileframework.com/"&gt;Scaled Agile Framework (SAFe)&lt;/a&gt; и в &lt;a class="reference external" href="https://www.pmi.org/disciplined-agile/process/introduction-to-dad"&gt;Disciplined agile delivery (DAD)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;SAFe создан известным автором по аналитике Dean Leffingwell, и, наверное, поэтому SAFe хорошо регламентирует процессы, предшествующие этапу реализации ПО в условиях масштабируемой Agile-разработки.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="agile-software-requirements-lean-requirements-practices-for-teams-programs-and-the-enterprise"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В книге "Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise" by Dean Leffingwell, которая вышла в печать в том же году, в котором он выпустил первый релиз SAFe, Dean Leffingwell убедительно обосновывает, что аналитики и архитекторы должны быть частью системной команды.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Architects: Many agile teams do not contain people with titles containing the word architect [The best architectures, requirements, and designs emerge from self-organizing teams.], and yet architecture does matter to agile teams.
In these cases, the local architecture (that of the component, service, or feature that the team is accountable for) is most often determined by the local teams in a collaborative model.
In this way, it can be said that "architecture emerges" from the activities of those teams.&lt;/p&gt;
&lt;p&gt;At the system level, however, &lt;strong&gt;architecture is often coordinated among system architects and business analysts who are responsible for determining the overall structure (components and services) of the system&lt;/strong&gt;, as well as the system-level use cases and performance criteria that are to be imposed on the system as a whole. For this reason, it is likely that the &lt;strong&gt;agile team has a key interface to one or more architects who may live outside the team&lt;/strong&gt;.
(We'll discuss this in depth in Chapter 20.)&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;Some of these QA personnel will live outside the team, while others (primarily testers) will have likely been dispatched to live with the product team.
There, they work daily with developers to test new code and thereby help assure new code quality on a real-time basis.&lt;/p&gt;
&lt;p&gt;In addition, as we'll see later, QA personnel are involved with the development of the system-level testing required to assure overall system quality and conformance to nonfunctional, as well as functional, requirements.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;Other specialists and supporting personnel: Other supporting roles may include user-experience designers, documentation specialists, database designers and administrators, configuration management, build and deployment specialists, and whomever else is necessary to develop and deploy a whole product solution.&lt;/p&gt;
&lt;p class="attribution"&gt;—Agile Software Requirements Lean Requirements Practices for Teams, Programs, and the Enterprise (Agile Software Development Series) by Dean Leffingwell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Для такого решения есть несколько причин:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;В спринте возникают две цели (текущая и посторонняя):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Реализация текущего системного инкремента.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Анализ и проектирование (т.е. &lt;a class="reference internal" href="../sdlc/uncertainty-management/prediction/prediction.html#emacsway-prediction"&gt;&lt;span class="std std-ref"&gt;Prediction-активности&lt;/span&gt;&lt;/a&gt; в виде PBR, Spike и Planning) будущего системного инкремента.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Источником работы аналитиков являются стейкхолдеры, а результатом работы - требования (под руководством Product Owner, разумеется), т.е. &lt;a class="reference internal" href="../sdlc/models/agile/analysis/requirements/requirements.html#emacsway-product-backlog-item"&gt;&lt;span class="std std-ref"&gt;PBI&lt;/span&gt;&lt;/a&gt;.
В то время как для команды разработки источником работы являются PBI (в состоянии DOR), а результатом работы - Системный Инкремент.&lt;/p&gt;
&lt;p&gt;Получается, что две команды работают несинхронно, над разными целями, и производят разные артефакты.
Аналитики работают вне цикла реализации Системного Инкремента, опережая его в среднем на пару спринтов.&lt;/p&gt;
&lt;p&gt;PBI, не производящий Системного Инкремента, но производящий артефакты, необходимые для доведения другого PBI до состояния DOR, традиционно называется Spike.
Spike нацелен на достижение цели будущих спринтов, поэтому его присутствие в текущем спринте отвлекает от цели текущего спринта, повышает когнитивную нагрузку и затрудняет управление Team Backlog.
Для малочисленного коллектива (тем более, для Single Team Agile) эта нагрузка не превышает накладные расходы на содержание отдельного Program Backlog.
Но, по мере роста численности коллектива, накладные расходы на содержание отдельного Program Backlog начинают уже окупаться.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;По мере роста численности коллектива растет коммуникативная нагрузка, и требуется &lt;a class="reference internal" href="#emacsway-harlan-mills-proposal"&gt;&lt;span class="std std-ref"&gt;повышение уровня автономности команд&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Системные инкременты, производимы командами, нуждаются в интеграции. Было бы неэффективно каждой команде погружаться в подробности целостной картины потребностей интеграции, при этом дублируя друг друга.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Стоимость &lt;a class="reference internal" href="../sdlc/uncertainty-management/adaptation/adaptation.html#emacsway-adaptation"&gt;&lt;span class="std std-ref"&gt;адаптации&lt;/span&gt;&lt;/a&gt; Продукта возрастает стремительней роста численность коллектива, что создает экономическую целесообразность для смещения &lt;a class="reference internal" href="../sdlc/uncertainty-management/balancing-prediction-adaptation.html#emacsway-balancing-prediction-adaptation"&gt;&lt;span class="std std-ref"&gt;баланса Pridiction/Adaptation&lt;/span&gt;&lt;/a&gt; в сторону &lt;a class="reference internal" href="../sdlc/uncertainty-management/prediction/prediction.html#emacsway-prediction"&gt;&lt;span class="std std-ref"&gt;Prediction&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Поэтому, аналитику, архитектуру и UX/UI Design, в таком случае, выводят в отдельный цикл производства, известный сегодня как Program Management (который следует отличать от Program Management в PMBoK).
Получается два каскадных цикла, при этом, первый цикл (Program Backlog) создает артефакты, необходимые для достижения DOR для второго цикла (Team Backlogs), который, в свою очередь, уже производит системный инкремент.&lt;/p&gt;
&lt;p&gt;Говоря о проблемах масштабирования Agile-команд, мне очень интересной показалась ещё одна его книга, которая вышла 4-мя годами ранее:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Scaling Software Agility: Best Practices for Large Enterprises" by Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="scaled-agile-framework-safe"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;Scaled Agile Framework (SAFe)&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.amazon.com/dp/B08F5HC37Z"&gt;SAFe® 5.0 Distilled: Achieving Business Agility with the Scaled Agile Framework®&lt;/a&gt;" by Richard Knaster, Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.scaledagileframework.com/program-and-solution-backlogs/"&gt;Program and Solution Backlogs&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.scaledagileframework.com/system-architect-engineering/"&gt;System Architect/Engineering&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.scaledagileframework.com/agile-teams/"&gt;Agile Teams&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.scaledagileframework.com/organizing-agile-teams-and-arts-team-topologies-at-scale/"&gt;Organizing Agile Teams and ARTs: Team Topologies at Scale&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.scaledagileframework.com/shared-services/"&gt;Shared Services&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.scaledagileframework.com/architectural-runway/"&gt;Architectural Runway&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.scaledagileframework.com/agile-architecture/"&gt;Agile Architecture in SAFe&lt;/a&gt;"&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The second dimension of the team and technical agility competency is teams of Agile teams. Even with good, local execution, building enterprise-class solutions typically requires more scope and breadth of skills than a single Agile team can provide. Therefore, Agile teams operate in the context of an ART, which is a long-lived team of Agile teams. The ART incrementally develops, delivers, and (where applicable) operates one or more solutions (Figure 6-5)."&lt;/p&gt;
&lt;p&gt;📝 "System Architect/Engineering is an individual or team that defines the overall architecture of the system. They work at a level of abstraction above the teams and components and define Non-Functional Requirements (NFRs), major system elements, subsystems, and interfaces."&lt;/p&gt;
&lt;p&gt;📝 "System Teams typically assist in building and supporting DevOps infrastructure for development, continuous integration, automated testing, and deployment into the staging environment. In larger systems they may do end-to-end testing, which cannot be readily accomplished by individual Agile teams."&lt;/p&gt;
&lt;p&gt;📝 "Shared Services are specialists—for example, data security, information architects, Database Administrators (DBAs)—who are necessary for the success of an ART but cannot be dedicated to a specific train."&lt;/p&gt;
&lt;p&gt;📝 "With the right architecture, elements of the system may be released independently. Figure 8-8 illustrates an autonomous delivery system that was architected to enable system elements to be released independently."&lt;/p&gt;
&lt;p&gt;📝 "Figure 8-8. Architecture impacts the ability to release system elements independently"&lt;/p&gt;
&lt;p class="attribution"&gt;—"SAFe® 5.0: The World's Leading Framework for Business Agility" by Richard Knaster, Dean Leffingwell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="agile-practice-guide-by-pmi"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;"Agile Practice Guide" by PMI&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Отдельно стоит выделить книгу "&lt;a class="reference external" href="https://www.pmi.org/pmbok-guide-standards/practice-guides/agile"&gt;Agile Practice Guide&lt;/a&gt;" by Project Management Institute, 2017, поскольку эта книга является мощным оружием в руках аналитиков и архитекторов в вопросах организации качественных процессов.
Автором книги является Project Management Institute (PMI), обладающий неоспоримым авторитетом в глазах менеджмента.
Книга достаточно грамотная, и затрагивает острые вопросы интеграции аналитической и архитектурной активности в Agile-разработку.
В общем, если вы где-то услышите фразу "Architecture vs. Agile", то самое время вспомнить об этой книге.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://scalingsoftwareagility.files.wordpress.com/2007/03/a-lean-and-scalable-requirements-information-model-for-agile-enterprises-pdf.pdf"&gt;A Lean and Scalable Requirements Information Model for the Agile Enterprise&lt;/a&gt;" by Dean Leffingwell with Juha‐Markus Aalto&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="disciplined-agile-delivery-dad"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;Disciplined agile delivery (DAD)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;И еще один официальный способ о том, как интегрировать работу аналитиков и архитекторов в Scrum:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.pmi.org/disciplined-agile/lifecycle/program"&gt;DAD Life Cycle – Program (Team of Teams)&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.pmi.org/disciplined-agile/process/program-management"&gt;Program Management&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.pmi.org/disciplined-agile/agility-at-scale/tactical-agility-at-scale/large-agile-teams"&gt;Large Agile Teams&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.pmi.org/disciplined-agile/agility-at-scale/tactical-agility-at-scale/large-agile-teams/organizing-agile-teams#Large"&gt;Organizing Agile Teams : Large Teams/Programs&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.pmi.org/pmbok-guide-standards/foundational/program-management"&gt;The Standard for Program Management – Fourth Edition&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Учитывая, что Disciplined agile delivery (DAD) сопровождается и развивается by Project Management Institute (PMI), интеграция его практик вызвает, как правило, меньше всего возражений со стороны менеджмента.&lt;/p&gt;
&lt;p&gt;См. также:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://agilemodeling.com/essays/agileArchitecture.htm"&gt;Agile Architecture: Strategies for Scaling Agile Development&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="iso-iec-ieee-12207-2017"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;ISO/IEC/IEEE 12207:2017&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Agile projects for complex systems attempt to manage cost by prioritizing the most important capabilities for early realization.
If an organization manages the development and maintenance of its entire portfolio of software systems as a single system, managed by spend rate rather than total spending, then the organization can, in principle, manage that portfolio of systems as a continuing agile development, analogous to managing a highly iterative "Kanban" maintenance effort."&lt;/p&gt;
&lt;p class="attribution"&gt;—"ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="nexus"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;Nexus&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;На scrum.org есть интересная статья, сравнивающая Nexus и SAFe:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.scrum.org/resources/blog/comparing-nexus-and-safe-similarities-differences-potential-synergies"&gt;Comparing Nexus and SAFe - Similarities, Differences, potential synergies&lt;/a&gt;" by Yuval Yeret&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Интересна она, прежде всего, тем, что открыто говорит о проблемах Nexus, которые можно решить путем заимствования практик у SAFe.&lt;/p&gt;
&lt;p&gt;Одним из наиболее узких мест Nexus является отсутствие масштабирования архитектурной работы в problem space (сбор требований, аналитика...):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "it's hard for one Product Owner to deal with too many teams...
In real life, these Product Owners are typically accountable for the value delivered by these multiple teams and rely upon a lot of assistance from the Development Teams in order to deal with the challenge of scale."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://www.scrum.org/resources/blog/comparing-nexus-and-safe-similarities-differences-potential-synergies"&gt;Comparing Nexus and SAFe - Similarities, Differences, potential synergies&lt;/a&gt;" by Yuval Yeret&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Статья подчеркивает ограниченность Nexus и предлагает к рассмотрению SAFe-практики:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "As Nexus is designed to be a lightweight framework, with a more limited scope than SAFe, its not surprising that there are a lot more elements in SAFe that Nexus doesn't say anything about.
Some of these can be useful in your context, some not necessarily.
Think Architectural Runway, Innovation and Planning iteration, Team-level Kanbans, DevOps, Continuous Delivery pipeline, System Architect, Business Owner, Features/Enablers, Epics."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://www.scrum.org/resources/blog/comparing-nexus-and-safe-similarities-differences-potential-synergies"&gt;Comparing Nexus and SAFe - Similarities, Differences, potential synergies&lt;/a&gt;" by Yuval Yeret&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;В числе прочего, упоминается и выделенная роль системного архитектора, поскольку в масштабируемом Agile возникают вопросы одновременного достижения как интеграции инкремента продукта, так и автономности команд.&lt;/p&gt;
&lt;p&gt;В статье много лестных отзывов о Program Kanban:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Program Kanban. SAFe includes one of the most powerful techniques to help improve flow and collaboration across a team of teams - a Kanban Board that takes a cross-team perspective. I started using this technique back in 2009 and it's one I "don't leave home without". Nexus doesn't include a Nexus-level Kanban board but it's a very nice complementary practice to consider. &lt;a class="reference external" href="https://www.scrum.org/resources/blog/scaling-scrum-nexus-and-kanban"&gt;Read more here&lt;/a&gt;"&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://www.scrum.org/resources/blog/comparing-nexus-and-safe-similarities-differences-potential-synergies"&gt;Comparing Nexus and SAFe - Similarities, Differences, potential synergies&lt;/a&gt;" by Yuval Yeret&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Здесь автор ссылается на другую свою статью "&lt;a class="reference external" href="https://www.scrum.org/resources/blog/scaling-scrum-nexus-and-kanban"&gt;Scaling Scrum with Nexus and Kanban&lt;/a&gt;" by Yuval Yeret, где предлагает интегрировать Program Management в самую легковесную scaled Scrum модель разработки Nexus, подобно тому, как это сделано в SAFe.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "This will include all stages of work in the Nexus - ranging from Value discovery..."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://www.scrum.org/resources/blog/scaling-scrum-nexus-and-kanban"&gt;Scaling Scrum with Nexus and Kanban&lt;/a&gt;" by Yuval Yeret&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Хотя в Scrum и можно выстроить хорошо отлаженные процессы, но это требует настолько деликатной работы, что я бы предпочел рассматривать сразу SAFe даже для маленьких команд (минимальную его конфигурацию - Essential Safe):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.scaledagileframework.com/guidance-six-safe-practices-for-s-sized-teams/"&gt;Six SAFe Practices for S-Sized Teams&lt;/a&gt;" by Juha-Markus Aalto, Director Product Development, Qentinel Group&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.scaledagileframework.com/essential-safe/"&gt;Essential SAFe&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="scrum-of-scrums"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;Scrum of Scrums&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Each team had an architecture representative on &lt;strong&gt;a Scrum of Scrum architecture team led by the Business Unit Lead Architect&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;enterprise architecture team had Business Unit Lead Architects led by the CTO&lt;/strong&gt; who had senior management commitment to 10% of all points in every sprint dedicated to architectural improvement (technical debt remediation, integration, branding, etc.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://www.scruminc.com/wp-content/uploads/2014/06/agile-architecture.pdf"&gt;Agile Architecture Fast, Cheap, Out of Control&lt;/a&gt;" Jeff Sutherland&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;См. также структуру "Scrum of Scrum Team (SoS) a Core Team" на странице 5 "&lt;a class="reference external" href="https://www.scrumatscale.com/wp-content/uploads/2020/09/Scrum_At_Scale_Case_Study_Air_Transport_Amogh.pdf"&gt;The Scrum Software Factory&lt;/a&gt;" by Amogh Joshi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id28"&gt;Другие&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;MSF и в FDD Program Management тоже присутствует.
В RAD тоже аналитика является "upstream development activities".
RUP реализует &lt;a class="reference internal" href="../sdlc/models/spiral.html#emacsway-spiral-development"&gt;&lt;span class="std std-ref"&gt;спиральную&lt;/span&gt;&lt;/a&gt; модель.&lt;/p&gt;
&lt;p&gt;В книге "Software Architecture in Practice" 4th edition by Len Bass, Paul Clements, Rick Kazman особый интерес представляют собою главы:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;20.6 More on ADD Step 7: Perform Analysis of the Current Design and Review the Iteration Goal and Achievement of the Design Purpose&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use of an Architectural Backlog&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use of a Design Kanban Board&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Интерес они вызыват прежде всего потому, что:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "In ADD, architecture design is performed in rounds, each of which may consist of a series of design iterations.
A round comprises the &lt;strong&gt;architecture design activities performed within a development cycle&lt;/strong&gt;.
Through one or more iterations, you produce an architecture that suits the established design purpose for this round."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Software Architecture in Practice" 4th edition by Len Bass, Paul Clements, Rick Kazman&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Т.е. речь идет опять же, об отдельном Backlog для активностей, предшествующих фазе реализации Системного Инкремента.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id29"&gt;Социальная роль архитектуры&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;📝 "By keeping things team sized, we help to achieve what MacCormack and colleagues call "an '&lt;strong&gt;architecture for participation&lt;/strong&gt;' that promotes ease of understanding by limiting module size, and ease of contribution by minimizing the propagation of design changes."[MacCormack et al., "Exploring the Structure of Complex Software Designs."] In other words, we need &lt;strong&gt;a team-first software architecture that maximizes people's ability to work with it&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;More than ever I believe that someone who claims to be an &lt;strong&gt;Architect needs both technical and social skills, they need to understand people and work within the social framework&lt;/strong&gt;. They also need a remit that is broader than pure technology—they need to have a say in &lt;strong&gt;organizational structures and personnel issues, i.e. they need to be a manager too&lt;/strong&gt;.[Kelly, "Return to Conway's Law."]"&lt;/p&gt;
&lt;p&gt;— "Team Topologies: Organizing Business and Technology Teams for Fast Flow" by Matthew Skelton&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="emacsway-team-topologies-at-scale-literature"&gt;
&lt;span id="id8"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id30"&gt;Литература&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"The Mythical Man-Month Essays on Software Engineering Anniversary Edition" by Frederick P. Brooks, Jr.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Team Topologies: Organizing Business and Technology Teams for Fast Flow" by Matthew Skelton&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise" by Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Scaling Software Agility: Best Practices for Large Enterprises" by Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"SAFe® 5.0: The World's Leading Framework for Business Agility" by Richard Knaster, Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.pmi.org/pmbok-guide-standards/practice-guides/agile"&gt;Agile Practice Guide&lt;/a&gt;" by Project Management Institute, 2017&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://leanpub.com/arch-modernization-ddd"&gt;Architecture Modernization with Strategic Domain-Driven Design. A Guide for Technology Leaders.&lt;/a&gt;" by Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://pubs.opengroup.org/architecture/o-aa-standard/"&gt;Open Agile Architecture. A Standard of The Open Group&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id31"&gt;Ссылки по теме&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://medium.com/nick-tune-tech-strategy-blog/team-responsibility-ownership-patterns-part-1-a-business-architecture-model-63597c4e60e1"&gt;Architecture Ownership Patterns For Team Topologies. Part 1: A Business Architecture Model&lt;/a&gt;" by Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://medium.com/nick-tune-tech-strategy-blog/architecture-ownership-patterns-for-team-topologies-part-2-single-team-patterns-943d31854285"&gt;Architecture Ownership Patterns for Team Topologies. Part 2: Single Team Patterns&lt;/a&gt;" by Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://medium.com/nick-tune-tech-strategy-blog/architecture-ownership-patterns-for-team-topologies-part-3-multi-team-patterns-eecc146ddb28"&gt;Architecture Ownership Patterns for Team Topologies. Part 3: Multi-Team Patterns&lt;/a&gt;" by Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://blog.avanscoperta.it/2021/04/22/about-team-topologies-and-context-mapping/"&gt;About Team Topologies and Context Mapping&lt;/a&gt;" by Alberto Brandolini&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/articles/strong-weak-arch.html"&gt;The strong and weak forces of architecture&lt;/a&gt;" by Evan Bottcher&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/articles/devops-compliance.html"&gt;Compliance in a DevOps Culture. Integrating Compliance Controls and Audit into CI/CD Processes&lt;/a&gt; by Carl Nygard&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://event-driven.io/en/how_using_events_help_in_teams_autonomy/"&gt;How using events helps in a teams' autonomy&lt;/a&gt;" by Oskar Dudycz&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Role of Software Design in Agile</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/uncertainty-management/adaptation/software-design/software-design.html</link><description>
&lt;span id="emacsway-agile-software-design"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;div class="figure align-center" id="id5"&gt;
&lt;a class="reference internal image-reference" href="../../../../../../_images/ouroboros.jpg"&gt;&lt;img alt="Уроборос. Иллюстрация из открытых источников неизвестного автора." src="../../../../../../_images/ouroboros.jpg" style="width: 40%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Уроборос. Иллюстрация из открытых источников неизвестного автора.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#role-of-software-design-in-agile" id="id10"&gt;Role of Software Design in Agile&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id2" id="id11"&gt;Кто читает код?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#primary-technical-imperative" id="id12"&gt;Primary Technical Imperative&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id13"&gt;Оправдано ли качество?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#martin-fowler" id="id14"&gt;Martin Fowler&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#kent-beck" id="id15"&gt;Kent Beck&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#robert-martin" id="id16"&gt;Robert Martin&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ralph-johnson" id="id17"&gt;Ralph Johnson&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#steve-mcconnell" id="id18"&gt;Steve McConnell&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#randy-shoup" id="id19"&gt;Randy Shoup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Кто читает код?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Среди малоопытных разработчиков иногда можно услышать, что им некогда писать качественный код, так как у них мало времени, а этот код все равно читать никто не будет.&lt;/p&gt;
&lt;p&gt;Истина в том, что в процессе конструирования кода, 91% времени занимает именно чтение кода и борьба со сложностью, и только 9% времени времени занимает ввод символов с клавиатуры.
И это соотношение дано еще для качественного кода.&lt;/p&gt;
&lt;p&gt;Причем, разработчик пишет код в одиночку и лишь единожды.
Зато читают код все разработчики команды и по много раз.&lt;/p&gt;
&lt;p&gt;Таким образом, плохо написанный код более чем на 91% (т.е. более чем на порядок!) влияет на снижение темпов разработки всей команды.&lt;/p&gt;
&lt;p&gt;Кстати, этот момент хорошо объясняет то, почему при TDD разработка осуществляется быстрее, хотя объема кода пишется больше.
TDD является эффективным &lt;a class="reference internal" href="../../../../tdd/tdd.html#emacsway-tdd"&gt;&lt;span class="std std-ref"&gt;средством управления сложностью и снижения когнитивной нагрузки&lt;/span&gt;&lt;/a&gt;.
А поскольку борьба со сложностью занимает более 91% времени конструирования кода, то время на написание тестов полностью перекрывается повышением темпов разработки, т.е. разработка с тестами получается даже быстрей.
Пальцы работают больше, а голова меньше.
Происходит перераспределение составляющих разработки.
К тому же, время на написание тестов можно прогнозировать, в отличии от отладки.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "You might ask: How much is code really read? Doesn't most of the effort go into
writing it?&lt;/p&gt;
&lt;p&gt;Have you ever played back an edit session? In the 80s and 90s we had editors like Emacs that kept track of every keystroke.
You could work for an hour and then play back your whole edit session like a high-speed movie.
When I did this, the results were fascinating.&lt;/p&gt;
&lt;p&gt;The vast majority of the playback was scrolling and navigating to other modules!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Bob enters the module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;He scrolls down to the function needing change.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;He pauses, considering his options.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Oh, he's scrolling up to the top of the module to check the initialization of a variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now he scrolls back down and begins to type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ooops, he's erasing what he typed!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;He types it again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;He erases it again!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;He types half of something else but then erases that!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;He scrolls down to another function that calls the function he's changing to see how it is called.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;He scrolls back up and types the same code he just erased.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;He pauses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;He erases that code again!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;He pops up another window and looks at a subclass. Is that function overridden?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;You get the drift. Indeed, the ratio of time spent reading vs. writing is well over 10:1.
We are constantly reading old code as part of the effort to write new code.&lt;/p&gt;
&lt;p&gt;Because this ratio is so high, we want the reading of code to be easy, even if it makes the writing harder.
Of course there's no way to write code without reading it, so making it easy to read actually makes it easier to write.&lt;/p&gt;
&lt;p&gt;There is no escape from this logic.
You cannot write code if you cannot read the surrounding code.
The code you are trying to write today will be hard or easy to write depending on how hard or easy the surrounding code is to read.
So if you want to go fast, if you want to get done quickly, if you want your code to be easy to write, make it easy to read."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Code: A Handbook of Agile Software Craftsmanship" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="primary-technical-imperative"&gt;
&lt;span id="emacsway-primary-technical-imperative"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Primary Technical Imperative&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "There are two ways of constructing a software design: one way is to make it so simple that there are obviously no deficiencies, and the other is to make it so complicated that there are no obvious deficiencies."&lt;/p&gt;
&lt;p class="attribution"&gt;—C. A. R. Hoare&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Managing complexity is the most important technical topic in software development.
In my view, it's so important that Software's Primary Technical Imperative has to be managing complexity."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Dijkstra pointed out that no one's skull is really big enough to contain a modern
computer program (Dijkstra 1972), which means that we as software developers
shouldn't try to cram whole programs into our skulls at once; we should try to organize
our programs in such a way that we can safely focus on one part of it at a time.
The goal is to minimize the amount of a program you have to think about at any one time.
You might think of this as mental juggling—the more mental balls the program requires you
to keep in the air at once, the more likely you'll drop one of the balls, leading to a design
or coding error.&lt;/p&gt;
&lt;p&gt;At the software-architecture level, the complexity of a problem is reduced by dividing the system into subsystems.
Humans have an easier time comprehending several simple pieces of information than one complicated piece.
The goal of all software-design techniques is to break a complicated problem into simple pieces.
The more independent the subsystems are, the more you make it safe to focus on one bit of complexity at a time.
Carefully defined objects separate concerns so that you can focus on one thing at a time.
Packages provide the same benefit at a higher level of aggregation.&lt;/p&gt;
&lt;p&gt;Keeping routines short helps reduce your mental workload.
Writing programs in terms of the problem domain, rather than in terms of low-level implementation details, and
working at the highest level of abstraction reduce the load on your brain.&lt;/p&gt;
&lt;p&gt;The bottom line is that programmers who compensate for inherent human limitations
write code that's easier for themselves and others to understand and that has fewer errors."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "&lt;strong&gt;Software's Primary Technical Imperative is managing complexity.&lt;/strong&gt;
This is greatly aided by a design focus on simplicity.
Simplicity is achieved in two general ways: minimizing the amount of essential
complexity that anyone's brain has to deal with at any one time, and keeping
accidental complexity from proliferating needlessly."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"The number "7±2" has been found to be a number of discrete items a person can remember while performing other tasks (Miller 1956).
If a class contains more than about seven data members, consider whether the class should be decomposed into multiple smaller classes (Riel 1996)."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;По поводу последнего изречения - лучше один раз увидеть:&lt;/p&gt;
&lt;div class="figure align-left" id="id6"&gt;
&lt;a class="reference internal image-reference" href="../../../../../../_images/12-points.jpg"&gt;&lt;img alt="Просто ваши глаза не могут увидеть все 12 точек одновременно. Ninio's extinction illusion. Twelve black dots cannot be seen at once. Ninio, J. and Stevens, K. A. (2000) Variations on the Hermann grid: an extinction illusion. Perception, 29, 1209-1217. The image source is a post by Akiyoshi Kitaoka https://www.facebook.com/akiyoshi.kitaoka/posts/10207806663219295" src="../../../../../../_images/12-points.jpg" style="width: 90%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Просто ваши глаза не могут увидеть все 12 точек одновременно.
Ninio's extinction illusion. Twelve black dots cannot be seen at once.
Ninio, J. and Stevens, K. A. (2000) Variations on the Hermann grid: an extinction illusion. Perception, 29, 1209-1217.
The image source is "&lt;a class="reference external" href="https://www.facebook.com/akiyoshi.kitaoka/posts/10207806663219295"&gt;a post&lt;/a&gt;" by Akiyoshi Kitaoka.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;См. также "&lt;a class="reference internal" href="../../../../../soft-skills/icebreaker-principle.html#emacsway-icebreaker-principle"&gt;&lt;span class="std std-ref"&gt;Принцип ледокола&lt;/span&gt;&lt;/a&gt;".&lt;/p&gt;
&lt;blockquote id="emacsway-kent-beck-constantine-s-law"&gt;
&lt;div&gt;&lt;p&gt;📝 "These were elucidated in the mid-70s by Yourdon &amp;amp; Constantine in &lt;a class="reference external" href="https://amzn.to/2GsuXvQ"&gt;Structured Design&lt;/a&gt; and haven't changed.
Their argument goes like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;We design software to reduce its cost.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The cost of software is ≈ the cost of changing the software.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The cost of changing the software is ≈ the cost of the expensive changes (power laws and all that).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The cost of the expensive changes is generated by cascading changes — if I change this then I have to change that and that, and if I change that then…&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Coupling between elements of a design is this propensity for a change to propagate.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So, design ≈ cost ≈ change ≈ big change ≈ coupling. Transitively, software design ≈ managing coupling.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(This skips loads of interesting stuff, but I'm just trying to set up the argument for why rapid decomposition of a monolith into micro-services is counter-productive.)"&lt;/p&gt;
&lt;p&gt;Managing Coupling&lt;/p&gt;
&lt;p&gt;Note I don't say, "Eliminating coupling."
Decoupling comes with its own costs, both the cost of the decoupling itself and the future costs of unanticipated changes.
The more perfectly a design is adapted to one set of changes, the more likely it is to be blind-sided by novel changes. And so we have the classic tradeoff curve:&lt;/p&gt;
&lt;div class="figure align-left" id="id7"&gt;
&lt;a class="reference internal image-reference" href="../../../../../../_images/balancing-coupling-decoupling.jpeg"&gt;&lt;img alt="Classic tradeoff curve of balancing cost of Coupling vs. cost of Decoupling. The image source is article &amp;quot;Monolith -&amp;gt; Services: Theory &amp;amp; Practice&amp;quot; by Kent Beck https://medium.com/@kentbeck_7670/monolith-services-theory-practice-617e4546a879" src="../../../../../../_images/balancing-coupling-decoupling.jpeg" style="width: 90%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Classic tradeoff curve of balancing cost of Coupling vs. cost of Decoupling. The image source is article "&lt;a class="reference external" href="https://medium.com/@kentbeck_7670/monolith-services-theory-practice-617e4546a879"&gt;Monolith -&amp;gt; Services: Theory &amp;amp; Practice&lt;/a&gt;" by Kent Beck.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You manage coupling one of two ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Eliminate coupling. A client and server with hard-coded read() and write() functions are coupled with respect to protocol changes. Change a write() and you'll have to change the read(). Introduce an interface definition language, though, and you can add to the protocol in one place and have the change propagate automatically to read() and write().&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduce coupling's scope. If changing one element implies changing ten others, then it's better if those elements are together than if they are scattered all over the system —less to navigate, less to examine, less to test. The number of elements to change is the same, but the cost per change is smaller. (This is also known as the "manure in one pile" principle, or less-aromatically "cohesion".)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://medium.com/@kentbeck_7670/monolith-services-theory-practice-617e4546a879"&gt;Monolith -&amp;gt; Services: Theory &amp;amp; Practice&lt;/a&gt;" by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Оправдано ли качество?&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="martin-fowler"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Martin Fowler&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "In most contexts higher quality ⇒ expensive. But high internal quality of software allows us to develop features faster and cheaper."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/bliki/TradableQualityHypothesis.html"&gt;Tradable Quality Hypothesis&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="figure align-left" id="id8"&gt;
&lt;span id="emacsway-design-stamina-graph"/&gt;&lt;a class="reference internal image-reference" href="../../../../../../_images/design-stamina-graph.png"&gt;&lt;img alt="The pseudo-graph plots delivered functionality (cumulative) versus time for two imaginary stereotypical projects: one with good design and one with no design. The image from &amp;quot;Design Stamina Hypothesis&amp;quot; by Martin Fowler. https://martinfowler.com/bliki/DesignStaminaHypothesis.html" src="../../../../../../_images/design-stamina-graph.png" style="width: 90%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;The pseudo-graph plots delivered functionality (cumulative) versus time for two imaginary stereotypical projects: one with good design and one with no design. The image from "&lt;a class="reference external" href="https://martinfowler.com/bliki/DesignStaminaHypothesis.html"&gt;Design Stamina Hypothesis&lt;/a&gt;" by Martin Fowler.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "... the true value of internal quality - that it's the enabler to speed. The purpose of internal quality is to go faster."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/bliki/TradableQualityHypothesis.html"&gt;Tradable Quality Hypothesis&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The value of good software design is economic: you can continue to add new functionality quickly even as the code-base grows in size."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/bliki/DesignStaminaHypothesis.html"&gt;Design Stamina Hypothesis&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "We usually perceive that it costs more to get higher quality, but software internal quality actually reduces costs."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/is-quality-worth-cost.html"&gt;Is High Quality Software Worth the Cost?&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The fundamental role of internal quality is that it lowers the cost of future change.
But there is some extra effort required to write good software, which does impose some cost in the short term."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/is-quality-worth-cost.html"&gt;Is High Quality Software Worth the Cost?&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The whole point of good design and clean code is to make you go faster - if it didn't people like Uncle Bob, Kent Beck, and Ward Cunningham wouldn't be spending time talking about it."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/bliki/TechnicalDebtQuadrant.html"&gt;Technical Debt Quadrant&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Sadly, software developers usually don't do a good job of explaining this situation.
Countless times I've talked to development teams who say "they (management) won't let us write good quality code because it takes too long".
Developers often justify attention to quality by justifying through the need for proper professionalism.
But this moralistic argument implies that this quality comes at a cost - dooming their argument.
The annoying thing is that the resulting crufty code both makes developers' lives harder, and costs the customer money.
When thinking about internal quality, I stress that we should only approach it as an economic argument.
High internal quality reduces the cost of future features, meaning that putting the time into writing good code actually reduces cost.&lt;/p&gt;
&lt;p&gt;This is why the question that heads this article misses the point.
The "cost" of high internal quality software is negative.
The usual trade-off between cost and quality, one that we are used to for most decisions in our life, does not make sense with the internal quality of software.
(It does for external quality, such as a carefully crafted user-experience.)
Because the relationship between cost and internal quality is an unusual and counter-intuitive relationship, it's usually hard to absorb.
But understanding it is critical to developing software at maximum efficiency."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/is-quality-worth-cost.html"&gt;Is High Quality Software Worth the Cost?&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Refactoring Helps Me Program Faster&lt;/p&gt;
&lt;p&gt;In the end, all the earlier points come down to this: Refactoring helps me develop code more quickly.&lt;/p&gt;
&lt;p&gt;This sounds counterintuitive.
When I talk about refactoring, people can easily see that it improves quality.
Better internal design, readability, reducing bugs—all theseimprove quality.
But doesn't the time I spend on refactoring reduce the speed of development?&lt;/p&gt;
&lt;p&gt;When I talk to software developers who have been working on a system for a while, I often hear that they were able to make progress rapidly at first, but now it takes much longer to add new features.
Every new feature requires more and more time to understand how to fit it into the existing code base, and once it's added, bugs often crop up that take even longer to fix.
The code base starts looking like a series of patches covering patches, and it takes an exercise in archaeology to figure out how things work.
This burden slows down adding new features — to the point that developers wish they could start again from a blank slate.&lt;/p&gt;
&lt;p&gt;I can visualize this state of affairs with &lt;a class="reference internal" href="#emacsway-design-stamina-graph"&gt;&lt;span class="std std-ref"&gt;the following pseudograph&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But some teams report a different experience.
They find they can add new features faster because they can leverage the existing things by quickly building on what's already there.&lt;/p&gt;
&lt;p&gt;The difference between these two is the internal quality of the software.
Software with a good internal design allows me to easily find how and where I need to make changes to add a new feature.
Good modularity allows me to only have to understand a small subset of the code base to make a change.
If the code is clear, I'm less likely to introduce a bug, and if I do, the debugging effort is much easier.
Done well, my code base turns into a platform for building new features for its domain.&lt;/p&gt;
&lt;p&gt;I refer to this effect as the &lt;a class="reference external" href="https://martinfowler.com/bliki/DesignStaminaHypothesis.html"&gt;Design Stamina Hypothesis&lt;/a&gt;:
By putting our effort into a good internal design, we increase the stamina of the software effort, allowing us to go faster for longer.
I can't prove that this is the case, which is why I refer to it as a hypothesis.
But it explains my experience, together with the experience of hundreds of great programmers that I've got to know over my career.&lt;/p&gt;
&lt;p&gt;Twenty years ago, the conventional wisdom was that to get this kind of good design, it had to be completed before starting to program — because once we wrote the code, we could only face decay.
Refactoring changes this picture.
We now know we can improve the design of existing code—so we can form and improve a design over time, even as the needs of the program change.
Since it is very difficult to do a good design up front, refactoring becomes vital to achieving that virtuous path of rapid functionality."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Refactoring: Improving the Design of Existing Code" 2nd edition by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "In its common usage, evolutionary design is a disaster.
The design ends up being the aggregation of a bunch of ad-hoc tactical decisions, each of which makes the code harder to alter.
In many ways you might argue this is no design, certainly it usually leads to a poor design.
As Kent puts it, &lt;strong&gt;design is there to enable you to keep changing the software easily in the long term.&lt;/strong&gt;
&lt;strong&gt;As design deteriorates, so does your ability to make changes effectively.&lt;/strong&gt;
You have the state of software entropy, over time the design gets worse and worse.
Not only does this make the software harder to change, it also makes bugs both easier to breed and harder to find and safely kill.
This is the "code and fix" nightmare, where the bugs become exponentially more expensive to fix as the project goes on."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/designDead.html"&gt;Is Design Dead?&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "If you're a manager or customer how can you tell if the software is well designed?
It matters to you because poorly designed software will be more expensive to modify in the future."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/designDead.html"&gt;Is Design Dead?&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "From the very earliest days of agile methods, people have asked what role there is for architectural or design thinking.
A common misconception is that since agile methods drop the notion of a detailed up-front design artifact, that there is no room for architecture in an agile project.
In my keynote at the first-ever agile conference, I pointed out that design was every bit as important for agile projects, but it manifests itself differently, becoming an evolutionary approach."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/agile.html"&gt;Agile Software Development&lt;/a&gt;" by Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="kent-beck"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Kent Beck&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Nothing kills speed more effectively than poor internal quality."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Planning Extreme Programming" by Kent Beck, Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "... the activity of design is not an option. It must be given serious thought for software development to be effective."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Extreme Programming Explained" by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Quality is another strange variable.
Often, by insisting on better quality you can get projects done sooner, or you can get more done in a given amount of time.
This happened to me when I started writing unit tests (as described in Chapter 2, A Development Episode, page 7).
As soon as I had my tests, I had so much more confidence in my code that I wrote faster, without stress.
I could clean up my system more easily, which made further development easier.
I've also seen this happen with teams.
As soon as they start testing, or as soon as they agree on coding standards, they start going faster.&lt;/p&gt;
&lt;p&gt;There is a strange relationship between internal and external quality.
External quality is quality as measured by the customer.
Internal quality is quality as measured by the programmers.
Temporarily sacrificing internal quality to reduce time to market in hopes that external quality won't suffer too much is a tempting short-term play.
And you can often get away with making a mess for a matter of weeks or months.
Eventually, though, internal quality problems will catch up with you and make your software prohibitively expensive to maintain, or unable to reach a competitive level of external quality."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Extreme Programming Explained" by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Why can't you just listen, write a test case, make it run, listen, write a test case, make it run indefinitely?
Because we know it doesn't work that way.
You can do that for a while.
In a forgiving language you may even be able to do that for a long while.
Eventually, though, you get stuck.
The only way to make the next test case run is to break another.
Or the only way to make the test case run is far more trouble than it is worth.
Entropy claims another victim.&lt;/p&gt;
&lt;p&gt;The only way to avoid this is to design.
Designing is creating a structure that organizes the logic in the system.
Good design organizes the logic so that a change 45 in one part of the system doesn't always require a change in another part of the system.
Good design ensures that every piece of logic in the system has one and only one home.
Good design puts the logic near the data it operates allows the extension of the system with changes in only one place."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Extreme Programming Explained" by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="robert-martin"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;Robert Martin&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The way to go fast, and to keep the deadlines at bay, is to stay clean.
Professionals do not succumb to the temptation to create a mess in order to move quickly.
Professionals realize that "quick and dirty" is an oxymoron.
Dirty always means slow!"&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Coder" by Robert Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The goal of good software design? That goal is nothing less than my utopian description:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The goal of software architecture is to minimize the human resources required to build and maintain the required system.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The measure of design quality is simply the measure of the effort required to meet the needs of the customer.
If that effort is low, and stays low throughout the lifetime of the system, the design is good.
If that effort grows with each new release, the design is bad.
It's as simple as that."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Напомню, что целью архитектора является минимизация трудозатрат на создание и сопровождение системы.
Что может помешать достижению этой цели?
Зависимость — и особенно зависимость от преждевременных решений.&lt;/p&gt;
&lt;p&gt;Recall that the goal of an architect is to minimize the human resources required to build and maintain the required system.
What it is that saps this kind of peoplepower?
Coupling—and especially coupling to premature decisions."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin, перевод ООО Издательство "Питер"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="ralph-johnson"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;Ralph Johnson&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "In most successful software projects, the expert developers working on that project have
a shared understanding of the system design.
&lt;strong&gt;This shared understanding is called 'architecture.'&lt;/strong&gt;
This understanding includes how the system is divided into components and how the components interact through interfaces.
These components are usually composed of smaller components, but the architecture only
includes the components and interfaces that are understood by all the developers."&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://martinfowler.com/ieeeSoftware/whoNeedsArchitect.pdf"&gt;Ralph Johnson&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="steve-mcconnell"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;Steve McConnell&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The General Principle of Software Quality is that improving quality reduces development costs.&lt;/p&gt;
&lt;p&gt;Understanding this principle depends on understanding a key observation: the best way
to improve productivity and quality is to reduce the time spent reworking code, whether
the rework arises from changes in requirements, changes in design, or debugging.
The industry-average productivity for a software product is about 10 to 50 of lines of
delivered code per person per day (including all noncoding overhead).
It takes only a matter of minutes to type in 10 to 50 lines of code, so how is the rest of the day spent?
Part of the reason for these seemingly low productivity figures is that industry average
numbers like these factor nonprogrammer time into the lines-of-code-per-day figure.
Tester time, project manager time, and administrative support time are all included.
Noncoding activities, such as requirements development and architecture work, are also
typically factored into those lines-of-code-per-day figures.
But none of that is what takes up so much time.&lt;/p&gt;
&lt;p&gt;The single biggest activity on most projects is debugging and correcting code that
doesn't work properly.
Debugging and associated refactoring and other rework consume
about 50 percent of the time on a traditional, naive software-development cycle.
(See Section 3.1, "Importance of Prerequisites," for more details.) Reducing debugging by
preventing errors improves productivity.
Therefore, the most obvious method of shortening a development schedule is to improve the quality of the product and decrease
the amount of time spent debugging and reworking the software.
This analysis is confirmed by field data.
In a review of 50 development projects involving over 400 work-years of effort and
almost 3 million lines of code, a study at NASA's Software
Engineering Laboratory found that increased quality assurance was
associated with decreased error rate but did not increase overalldevelopment cost (Card 1987).&lt;/p&gt;
&lt;p&gt;A study at IBM produced similar findings:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Software projects with the lowest levels of defects had the shortest development
schedules and the highest development productivity.... software defect removal is
actually the most expensive and time-consuming form of work for software (Jones 2000).&lt;/p&gt;
&lt;p class="attribution"&gt;—Jones, Capers. 2000. Software Assessments, Benchmarks, and Best Practices. Reading, MA: Addison-Wesley.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The same effect holds true at the small end of the scale.
In a 1985 study, 166 professional programmers wrote programs from the
same specification.
The resulting programs averaged 220 lines of
code and a little under five hours to write.
The fascinating result was that programmers who took the median time to complete their
programs produced programs with the greatest number of errors.
The programmers who took more or less than the median time
produced programs with significantly fewer errors (DeMarco and Lister 1985).&lt;/p&gt;
&lt;p&gt;The two slowest groups took about five times as long to achieve roughly the same
defect rate as the fastest group.
It's not necessarily the case that writing software without
defects takes more time than writing software with defects.
As the graph shows, it can take less."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Watts Humphrey reports that teams using the Team Software Process
(TSP) have achieved defect levels of about 0.06 defects per 1000 lines of code.
TSP focuses on training developers not to create defects in the first place (Weber 2003).
[Morales, Alexandra Weber. 2003. "The Consummate Coach: Watts Humphrey, Father of Cmm and Author of Winning with Software, Explains How to Get Better at What You Do," SD Show Daily, September 16, 2003.]&lt;/p&gt;
&lt;p&gt;The results of the TSP and cleanroom projects confirm another version of the General
Principle of Software Quality: it's cheaper to build high-quality software than it is to build and fix low-quality software.
Productivity for a fully checked-out, 80,000-line cleanroom project was 740 lines of code per work-month.
The industry average rate for fully checked-out code is closer to 250–300 lines per work-month, including all noncoding overhead (Cusumano et al 2003).
[Cusumano, Michael , et al. 2003. "Software Development Worldwide: The State of the Practice," IEEE Software, November/ December 2003, 28–34.]
The cost savings and productivity come from the fact that virtually no time is devoted to debugging on TSP or cleanroom projects.
No time spent on debugging?
That is truly a worthy goal!"&lt;/p&gt;
&lt;p class="attribution"&gt;—"Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "A six-month study conducted by IBM found that maintenance programmers "most often said that &lt;strong&gt;understanding the original programmer's intent was the most difficult problem&lt;/strong&gt;" (Fjelstad and Hamlen 1979).
[Fjelstad, R. K. , and W. T. Hamlen. 1979. "Applications Program Maintenance Study: Report to our Respondents." Proceedings Guide 48, Philadelphia. Reprinted in Tutorial on Software Maintenance, G. Parikh and N. Zvegintzov eds. Los Alamitos, CA: CS Press, 1983: 13–27.]"&lt;/p&gt;
&lt;p class="attribution"&gt;—"Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="randy-shoup"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;Randy Shoup&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;- We don't have time to do it right!&lt;/div&gt;
&lt;div class="line"&gt;- Do you have time to do it twice?&lt;/div&gt;
&lt;/div&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://www.infoq.com/presentations/microservices-data-centric"&gt;Randy Shoup&lt;/a&gt;, VP Engineering at Stitch Fix in San Francisco&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="figure align-left" id="id9"&gt;
&lt;a class="reference internal image-reference" href="../../../../../../_images/do-it-right.png"&gt;&lt;img alt="Do it right! Иллюстрация из открытых источников неизвестного автора." src="../../../../../../_images/do-it-right.png" style="width: 90%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Do it right! Иллюстрация из открытых источников неизвестного автора.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;См.также&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../crash-course-in-software-development-economics.html"&gt;&lt;span class="doc"&gt;Краткий курс по экономике разработки программного обеспечения&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../../../../soft-skills/icebreaker-principle.html#emacsway-icebreaker-principle"&gt;&lt;span class="std std-ref"&gt;Принцип ледокола&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../adaptation.html#emacsway-adaptation"&gt;&lt;span class="std std-ref"&gt;Что такое Adaptation&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../../models/agile/agile.html#emacsway-agile-development"&gt;&lt;span class="std std-ref"&gt;Что такое Agile Development&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Role of Design Patterns in Agile</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/uncertainty-management/adaptation/software-design/patterns.html</link><description>
&lt;span id="emacsway-agile-patterns"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#role-of-design-patterns-in-agile" id="id5"&gt;Role of Design Patterns in Agile&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id2" id="id6"&gt;Составляющие экономического эффекта применения паттернов&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id7"&gt;Индивидуальная составляющая&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id8"&gt;Коллективная составляющая&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Немного о Паттернах Проектирования.
Нужны ли они?&lt;/p&gt;
&lt;p&gt;Паттерны могут приносить пользу экономике разработки, а могут приносить и вред, если не понимать их назначения и злоупотреблять ими.
Как говорится, молотком можно гвоздь забить, а можно и пальцы отбить.&lt;/p&gt;
&lt;p&gt;Любое проектное решение должно исходить из &lt;a class="reference internal" href="software-design.html#emacsway-primary-technical-imperative"&gt;&lt;span class="std std-ref"&gt;принципов управления сложностью&lt;/span&gt;&lt;/a&gt;.
Добавление паттерна может увеличивать уровень косвенности системы, что тоже имеет свою стоимость.&lt;/p&gt;
&lt;p&gt;Посмотрим, к примеру, мотивацию Mediator pattern:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Mediator promotes loose &lt;strong&gt;coupling&lt;/strong&gt; by keeping objects from referring to each other explicitly,
and it lets you vary their interaction independently."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Design Patterns: Elements of Reusable Object-Oriented Software" by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Лекарство не должно быть хуже болезни.
Внося сложность в систему, мы должны обретать возможность управлять еще большим уровнем сложности, т.е. решение должно быть оправданным.&lt;/p&gt;
&lt;p&gt;По этому поводу хорошо &lt;a class="reference internal" href="software-design.html#emacsway-kent-beck-constantine-s-law"&gt;&lt;span class="std std-ref"&gt;рассуждал Kent Beck&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;И по этому поводу хорошо &lt;a class="reference internal" href="../../../../../soft-skills/learning-spiral-phase-mismatch.html#emacsway-martin-fowler-16-patterns-in-32-lines"&gt;&lt;span class="std std-ref"&gt;говорил Martin Fowler о 16 Паттернах в 32 строках кода&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Вопрос применения паттернов - это вопрос баланса между уровнем управляемой им сложности и уровнем привносимой им сложности.
При дисбалансе бизнес и технических интересов, злоупотребление паттернами может привести к экономически неоправданному переусложению системы: &lt;a class="reference external" href="https://t.me/emacsway_log/124"&gt;https://t.me/emacsway_log/124&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Тем не менее, Паттерны Проектирования являются &lt;a class="reference internal" href="../../../../../soft-skills/knowledge-vs-opinion.html#emacsway-knowledge-vs-opinion-in-psychology"&gt;&lt;span class="std std-ref"&gt;обобщением и систематизацией практики&lt;/span&gt;&lt;/a&gt;.
Их не выдумывают - их обобщают.
Это значит, что незнание конкретного паттерна еще не означает неосознанного его применения.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Составляющие экономического эффекта применения паттернов&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Паттерны способны значительно улучшить экономику разработки при разумном их применении.
Экономическая их эффективность складывается из двух составляющих:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Индивидуальная&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Коллективная&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Рассмотрим каждый из них по отдельности.&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Индивидуальная составляющая&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Начнем с первой, индивидуальной составляющей.
Каким образом применение паттернов может повысить персональную эффективность разработчика? Вот что говорит по этому поводу автор книг "Implementation Patterns" и "Smalltalk Best Practice Patterns" Kent Beck:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Я обратил внимание на один важный эффект, который, я надеюсь, смогут принять во внимание и другие.
Если на основе постоянно повторяющихся действий формулируются правила, дальнейшее применение этих правил становится неосознанным и автоматическим.
Естественно, ведь это проще, чем обдумывать все за и все против того или иного действия с самого начала.
Благодаря этому повышается скорость работы, и если в дальнейшем вы сталкиваетесь с исключением или проблемой, которая не вписывается ни в какие правила, у вас появляется дополнительное время и энергия для того, чтобы в полной мере применить свои творческие способности.&lt;/p&gt;
&lt;p&gt;Именно это произошло со мной, когда я писал книгу Smalltalk Best Practice Patterns (Лучшие паттерны Smalltalk).
В какой-то момент я решил просто следовать правилам, описываемым в моей книге.
В начале это несколько замедлило скорость моей работы, — мне требовалось дополнительное время, чтобы вспомнить то или иное правило, или написать новое правило.
Однако по прошествии недели я заметил, что с моих пальцев почти мгновенно слетает код, над разработкой которого ранее мне приходилось некоторое время размышлять.
Благодаря этому у меня появилось дополнительное время для анализа и важных размышлений о дизайне.&lt;/p&gt;
&lt;p&gt;Существует еще одна связь между TDD и паттернами: TDD является методом реализации дизайна, основанного на паттернах.
Предположим, что в определенном месте разрабатываемой системы мы хотим реализовать паттерн Strategy (Стратегия).
Мы пишем тест для первого варианта и реализуем его, создав метод.
После этого мы намеренно пишем тест для второго варианта, ожидая, что на стадии рефакторинга мы придем к паттерну Strategy (Стратегия).
Мы с Робертом Мартином (Robert Martin) занимались исследованием подобного стиля TDD.
Проблема состоит в том, что дизайн продолжает вас удивлять.
Идеи, которые на первый взгляд кажутся вам вполне уместными, позже оказываются неправильными.
Поэтому я не рекомендую целиком и полностью доверять своим предчувствиям относительно паттернов.
Лучше думайте о том, что, по-вашему, должна делать система, позвольте дизайну оформиться так, как это необходимо.&lt;/p&gt;
&lt;p&gt;The effect that I have noticed, and which I hope others find, is that by reducing repeatable behavior to rules, applying the rules becomes rote and mechanical.
This is quicker than redebating everything from first principles all the time.
When along comes an exception, or a problem that just doesn't fit any of the rules, you have more time and energy to generate and apply creativity.&lt;/p&gt;
&lt;p&gt;This happened to me when writing the Smalltalk Best Practice Patterns.
At some point I decided just to follow the rules I was writing.
It was much slower at first, to be looking up the rules, or to be stopping to write a new rule.
After a week, however, I discovered that code was ripping off my fingertips that would have required a pause for thought before.
This gave me more time and attention for bigger thoughts about design and analysis.
Another relationship between TDD and patterns is TDD as an implementation method for pattern-driven design.
Say we decide we want a Strategy for something.
We write a test for the first variant and implement it as a method.
Then we consciously write a test for the second variant, expecting the refactoring phase to drive us to a Strategy.
Robert Martin and I did some research into this style of TDD.
The problem is that the design keeps surprising you.
Perfectly sensible design ideas turn out to be wrong.
Better just to think about what you want the system to do, and let the design sort itself out later."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" by Kent Beck, перевод П. Анджан&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Коллективная составляющая&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Перейдем ко второй, коллективной составляющей.
Каким именно образом паттерны могут повысить экономическую эффективность разработки?&lt;/p&gt;
&lt;p&gt;Когда в печать вышла книга "Patterns of Enterprise Application Architecture" (PoEAA) by Martin Fowler, David Rice, Matthew Foemmel, Edward Hieatt, Robert Mee, Randy Stafford, то David Heinemeier Hansson прочитал ее одним из первых, и реализовал эти паттерны в виде Ruby On Rails (RoR).
Использование этого фреймворка, и реализованных им паттернов, позволило:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;снизить негативный эффект "&lt;a class="reference internal" href="../../../../team-topologies/harlan-mills%27-proposal.html#emacsway-team-topologies-at-scale"&gt;&lt;span class="std std-ref"&gt;Закона Брукса&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;уменьшить порог вхождения новых разработчиков в проект&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;переместить фокус внимания разработчиков от Domain-independent knowledge к &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Domain_knowledge"&gt;Domain knowledge&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В итоге, разработка на RoR дала многократный (на то время) прирост темпов разработки, что вызвало вирусный интерес к PoEAA и массовое клонирование RoR на многие языки программирования.&lt;/p&gt;
&lt;p&gt;Иными словами, паттерны осуществляют унификацию решений типовых проблем, что способствует удешевлению достижения коллективного понимания устройства системы, путем минимизации затрат времени на синхронизацию и обобщение мнений.&lt;/p&gt;
&lt;p&gt;По мере формирования коллективной знаний в области системной архитектуры, стали обнажаться архитектурные недостатки RoR, и по этому поводу даже были сняты два поучительных и заслуживающих внимания сериала:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/articles/is-tdd-dead/"&gt;Is TDD Dead?&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://martinfowler.com/articles/badri-hexagonal/"&gt;A Conversation with Badri Janakiraman about Hexagonal Rails&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Однако, сам факт достижения высокой экономической эффективности от использования паттернов PoEAA был очевиден, и этот факт оказал существенное влияние на формирование современного состояния области знаний системной архитектуры.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "In most successful software projects, the expert developers working on that project have a shared understanding of the system design.
&lt;strong&gt;This shared understanding is called 'architecture.'&lt;/strong&gt;
This understanding includes how the system is divided into components and how the components interact through interfaces.
These components are usually composed of smaller components, but the architecture only includes the components and interfaces that are understood by all the developers."&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://martinfowler.com/ieeeSoftware/whoNeedsArchitect.pdf"&gt;Ralph Johnson&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Несовпадение фаз спиралей обучения</title><link>https://dckms.github.io/system-architecture/emacsway/soft-skills/learning-spiral-phase-mismatch.html</link><description>&lt;span class="target" id="index-0"/&gt;&lt;div class="section" id="emacsway-learning-spiral-phase-mismatch"&gt;
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 Вторая причина столь разных точек зрения на использования инструментов заключается в "спирали обучения".
Если у вас больше 5 лет опыта, то вы наверняка замечали, что кривая обучения на самом деле выглядит не совсем так, как обычно принято представлять, а несколько иначе.
&lt;strong&gt;Я бы сказал, что кривая обучения – это скорее бесконечный процесс, который в лучшем случае будет "сходиться" к точке "идеального использования инструмента"&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="figure align-left" id="id2"&gt;
&lt;a class="reference internal image-reference" href="../../_images/learning-spiral.jpg"&gt;&lt;img alt="Рис. 1: Кривая обучения vs. Спираль обучения. Изображение из статьи &amp;quot;Is TDD Dead. Часть 5&amp;quot; / Сергей Тепляков https://sergeyteplyakov.blogspot.com/2014/06/is-tdd-dead-5.html" src="../../_images/learning-spiral.jpg" style="width: 90%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Рис. 1: Кривая обучения vs. Спираль обучения. Изображение из статьи "&lt;a class="reference external" href="https://sergeyteplyakov.blogspot.com/2014/06/is-tdd-dead-5.html"&gt;Is TDD Dead. Часть 5&lt;/a&gt;" / Сергей Тепляков&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Форма этой "спирали обучения" обусловлена нашей увлеченностью.
Как только мы узнаем о новом инструменте мы начинаем его интенсивно использовать, нас "заносит" и мы начинаем его применять там, где нужно, и там, где без него было бы лучше обойтись.
Со временем наша эйфория проходит и мы можем либо вообще отказаться от него ("Все, паттерны проектирования не нужны!") или же перейти на новый уровень понимания и использовать инструмент более рационально.&lt;/p&gt;
&lt;p&gt;Разные люди находятся на разных точках "спирали обучения", что также усложняет взаимопонимание.
К тому же, у разных людей точка "правильного" понимания (линия "правильного понимания" на графике справа) находится на разном уровне, что проявляется в том, что кто-то полностью отказывается от инструмента ("TDD не нужен!", или "IoC не нужен!", "или ОО не нужно" и т.п.), а кто-то продолжает упорно использовать инструмент не по назначению.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://sergeyteplyakov.blogspot.com/2014/06/is-tdd-dead-5.html"&gt;Is TDD Dead. Часть 5&lt;/a&gt;" / Сергей Тепляков&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Такое простое объяснение профессиональных конфликтов.
У одного специалиста - девиация в сторону паттернов, у другого - в сторону алгоритмов.
И уже не могут на Code Review поделить, что же из них важнее.&lt;/p&gt;
&lt;p&gt;Кстати, это так же объясняет то, почему соискатель и интервьюер часто не находят друг друга.&lt;/p&gt;
&lt;p&gt;Психолог, нобелевский лауреат Даниэль Канеман выделил "правило пик-конец" нашей памяти.
Мы помним прошлое неравномерно.
Наибольший вес мы придаем двум видам событий: тем, что вызвали максимальные эмоции и тем, которые произошли недавно.&lt;/p&gt;
&lt;p&gt;Но, как было сказано:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 кривая обучения – это скорее бесконечный процесс, который в лучшем случае будет "сходиться" к точке "идеального использования инструмента".&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://sergeyteplyakov.blogspot.com/2014/06/is-tdd-dead-5.html"&gt;Is TDD Dead. Часть 5&lt;/a&gt;" / Сергей Тепляков&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Иными словами, чем шире полнота знаний, тем меньше степень "увлеченности" отдельными аспектами этих знаний, и лучше сбалансированность решений.
Т.е., лечится это, опять же, &lt;a class="reference internal" href="knowledge-vs-opinion.html#emacsway-knowledge-vs-opinion-in-psychology"&gt;&lt;span class="std std-ref"&gt;увеличением охвата знаний&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p id="emacsway-martin-fowler-16-patterns-in-32-lines"&gt;Кстати, именно это явление описывал M.Fowler в своей статье "Is Design Dead?":&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The essence of this argument is that patterns are often over-used. The world is full of the legendary programmer, fresh off his first reading of GOF  who includes sixteen patterns in 32 lines of code. I remember one evening, fueled by a very nice single malt, running through with Kent a paper to be called "Not Design Patterns: 23 cheap tricks" We were thinking of such things as use an if statement rather than a strategy. The joke had a point, patterns are often overused, but that doesn't make them a bad idea. The question is how you use them."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://martinfowler.com/articles/designDead.html#PatternsAndXp"&gt;Is Design Dead?&lt;/a&gt;" by M.Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;См. также:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%BD%D0%B5%D0%B4%D0%B0%D0%B2%D0%BD%D0%B5%D0%B3%D0%BE"&gt;Эффект недавнего&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;См.также&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="knowledge-vs-opinion.html#emacsway-knowledge-vs-opinion-in-psychology"&gt;&lt;span class="std std-ref"&gt;Разрешение конфликтов на почве недостатка знаний&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Role of Simplicity in Agile</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/uncertainty-management/adaptation/software-design/simplicity.html</link><description>
&lt;span id="emacsway-agile-simplicity"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#role-of-simplicity-in-agile" id="id5"&gt;Role of Simplicity in Agile&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id2" id="id6"&gt;Единица измерения&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id7"&gt;Качественный код всегда прост!&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#eric-evans" id="id8"&gt;Eric Evans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#edsger-w-dijkstra" id="id9"&gt;Edsger W. Dijkstra&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#kent-beck" id="id10"&gt;Kent Beck&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#martin-fowler" id="id11"&gt;Martin Fowler&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#robert-c-martin" id="id12"&gt;Robert C. Martin&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#bjarne-stroustrup" id="id13"&gt;Bjarne Stroustrup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id14"&gt;Другие&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Не очень глубоко осведомленные в архитектуре люди почему-то иногда думают, что архитектурное решение всегда несет перфекционизм и overengineering.
Вероятно, они просто не знакомы с "&lt;a class="reference internal" href="software-design.html#emacsway-primary-technical-imperative"&gt;&lt;span class="std std-ref"&gt;The Primary Technical Imperative&lt;/span&gt;&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;На самом деле, overengineering означает решение не соответствующее контексту, т.е. когда &lt;a class="reference internal" href="patterns.html#emacsway-agile-patterns"&gt;&lt;span class="std std-ref"&gt;уровень привнесенной сложности превышает уровень управляемой сложности&lt;/span&gt;&lt;/a&gt;.
С точки зрения "&lt;a class="reference internal" href="software-design.html#emacsway-primary-technical-imperative"&gt;&lt;span class="std std-ref"&gt;The Primary Technical Imperative&lt;/span&gt;&lt;/a&gt;" это значит, что он ухудшает внутреннее качество программы, а не повышает его.&lt;/p&gt;
&lt;p&gt;Более того, хороший архитектор стремится исключить само возникновение сложной проблемы, нежели пытаться героически ее решить.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Усложнять - просто, упрощать - сложно".&lt;/p&gt;
&lt;p class="attribution"&gt;—"Закон Мейера"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Вершиной простоты авиационной инженерной мысли был, пожалуй, самолет Ил-62.&lt;/p&gt;
&lt;p&gt;См. видео "&lt;a class="reference external" href="https://youtu.be/VyrN9AJm7sk"&gt;Ил-62 - идеальный вариант&lt;/a&gt;" / @SkyShips.&lt;/p&gt;
&lt;p&gt;Его конструкция получилась настолько удачной и простой, что огромный межконтинентальный лайнер управлялся исключительно мускульной силой пилотов посредством безбустерной (т.е. без усилителей) системы управления, что стало возможным благодаря удачно выбранной балансировке.
Для этого, правда, пришлось привнести в конструкцию заднюю штангу - довольно простое решение, которое на корню исключило возникновение довольно сложной проблемы.
Идеальный пример воплощения &lt;a class="reference external" href="https://people.apache.org/~fhanik/kiss.html"&gt;KISS-principle&lt;/a&gt;.
Более того, этот лайнер не имел даже предкрылков, благодаря оригинальному аэродинамическому решению в виде "зуба" на передней кромки крыла.&lt;/p&gt;
&lt;p&gt;Это яркий пример того, как, вместо того, чтобы создавать сложные решения для сложных проблем, можно просто не допускать самого возникновения этих сложных проблем, благодаря простым и удачным проектным решениям.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Вобрав в себя лучшие технологические наработки, лайнер сохранил идеологию простоты конструкции и систем, что сделало его оптимальным для магистральных перевозок в СССР и одним из лучших самолетов своего времени."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://youtu.be/VyrN9AJm7sk"&gt;Ил-62 - идеальный вариант&lt;/a&gt;" / @SkyShips&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 Дальнейший этап в творческой деятельности Ильюшина – пассажирский трансконтинентальный лайнер Ил-62, вышедший на воздушные линии в 1967 году и его модификация Ил-62М, ставший флагманом Аэрофлота.
Примечательно, что даже такой очень большой самолет сохранил простоту и легкость управления, присущую всем "илам".
В этом – одно из проявлений творческого стиля С.В.Ильюшина, стиля, которому свойственно стремление к оптимальному проектированию, упорство в достижении максимальной надежности и безопасности самолета в сочетании с высокой экономичностью или боевой эффективностью.&lt;/p&gt;
&lt;p&gt;Характерной чертой творческой деятельности Ильюшина являлась простота проектных решений.
В своих воспоминаниях генеральный конструктор, академик А.С.Яковлев особо отмечает эту черту, называя Ильюшина "мастером простых решений".
Конечно, эта "простота" требовала огромного творческого напряжения и совершенно четкого и ясного представления эксплуатационной жизни проектируемого самолета.&lt;/p&gt;
&lt;p&gt;В каждом самолете, созданном в конструкторском бюро под руководством С.В.Ильюшина, воплощены творческие особенности Генерального конструктора.
Умение технически просто решать сложные, а порой противоречивые проблемы – это талант, это стиль С.В.Ильюшина, конструктора и ученого, инженера и творца авиационной техники, что позволяло создавать такие машины, которые сыграли значительную роль в развитии Военно-Воздушных Сил СССР и обеспечили выполнение большой доли работы гражданского воздушного транспорта.
Они заняли достойное место в истории отечественной авиации.&lt;/p&gt;
&lt;p&gt;Успех С.В.Ильюшиным достигался в результате решения технических задач на основе последних достижений науки, путем смелого внедрения нового и благодаря его исключительной дальновидности.&lt;/p&gt;
&lt;p&gt;От легкого планера с полетным весом 100 кг до межконтинентального лайнера с полетным весом 160 т прошло почти 40 лет.
Под руководством С.В.Ильюшина спроектировано, построено и испытано в полете десятки машин, многие из которых оказались непревзойденными по летным характеристикам, простоте конструкции, технологии и надежности.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://www.ilyushin.org/about/history/biography/"&gt;Биография Ильюшина&lt;/a&gt;" / ПАО "Ил" ("Ильюшин" - группа компаний ОАК)&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Давайте послушем другого известного "мастера простых решений", оружейного конструктора, создавшего наиболее надежный и простой автомат в истории:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "хочу сказать, что сделать простое иногда во много раз сложнее, чем сложное."&lt;/p&gt;
&lt;p class="attribution"&gt;—М.Т. Калашников в интервью журналисту газеты "Metro Москва", 2009 год.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Единица измерения&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Посмотрим, к примеру, мотивацию Mediator pattern:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Mediator promotes loose &lt;strong&gt;coupling&lt;/strong&gt; by keeping objects from referring to each other explicitly,
and it lets you vary their interaction independently."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Design Patterns: Elements of Reusable Object-Oriented Software" by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Конечно, тут важно найти &lt;a class="reference internal" href="software-design.html#emacsway-kent-beck-constantine-s-law"&gt;&lt;span class="std std-ref"&gt;баланс между стоимостью Coupling и стоимостью Decoupling&lt;/span&gt;&lt;/a&gt;.
Но ключевой целью принципа "&lt;a class="reference external" href="http://wiki.c2.com/?CouplingAndCohesion"&gt;Low Coupling &amp;amp; High Cohesion&lt;/a&gt;" является управление сложностью, т.е. упрощение, а не усложнение!
Именно это позволяет &lt;a class="reference internal" href="../../../../../soft-skills/icebreaker-principle.html#emacsway-icebreaker-principle"&gt;&lt;span class="std std-ref"&gt;рассматривать фрагмент кода изолированно в пределах возможностей краткосрочной памяти человека&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Поэтому размер программного элемента исчисляется количеством его обязанностей, а не количеством символов.
Если кто-то считает иначе, и думает, что меньше сложности означает "меньше кода", тогда попробуйте понять, что делает этот, весьма лаконичный, код:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;div class="highlight-bash notranslate" id="emacsway-rm-rf"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span/&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"test... test... test..."&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; perl -e &lt;span class="s1"&gt;'$??s:;s:s;;$?::s;;=]=&amp;gt;%-{&amp;lt;-|}&amp;lt;&amp;amp;|{;;y; -/:-@[-{-};`-{/" -;;s;;$_;see'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;P.S.: Не вздумайте запустить! Он выполняет &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rm&lt;/span&gt; &lt;span class="pre"&gt;-rf&lt;/span&gt; &lt;span class="pre"&gt;/*&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://ru.stackoverflow.com/questions/1144804/%D0%A7%D1%82%D0%BE-%D0%B4%D0%B5%D0%BB%D0%B0%D0%B5%D1%82-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9-%D0%BE%D0%B4%D0%BD%D0%BE%D1%81%D1%82%D1%80%D0%BE%D1%87%D0%BD%D0%B8%D0%BA-%D0%BD%D0%B0-perl"&gt;Источник 1&lt;/a&gt;", "&lt;a class="reference external" href="https://lurkmore.to/Rm_-rf"&gt;Источник 2&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Как красиво сказал Vladik Khononov: "абзац - это единица измерения мыслей, а не количества слов".
Лаконичность кода определяется уровнем его сложности на горизонте его рассмотрения (т.е. на рассматриваемом уровне абстракции), а не количеством символов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Качественный код всегда прост!&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="eric-evans"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Eric Evans&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Software design is a constant battle with complexity."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Domain-Driven Design: Tackling Complexity in the Heart of Software" by Eric Evans&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="edsger-w-dijkstra"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Edsger W. Dijkstra&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Simplicity and elegance are unpopular because they require hard work and discipline to achieve and education to be appreciated."&lt;/p&gt;
&lt;p class="attribution"&gt;—Edsger W. Dijkstra&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Simplicity is prerequisite for reliability."&lt;/p&gt;
&lt;p class="attribution"&gt;—Edsger W. Dijkstra&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Simplicity is a great virtue but it requires hard work to achieve it and education to appreciate it.
And to make matters worse: complexity sells better."&lt;/p&gt;
&lt;p class="attribution"&gt;—Edsger W. Dijkstra, 1984 &lt;a class="reference external" href="http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD896.html"&gt;On the nature of Computing Science&lt;/a&gt; (EWD896)&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The competent programmer is fully aware of the strictly limited size of his own skull;
therefore, he approaches the programming task in full humility"&lt;/p&gt;
&lt;p class="attribution"&gt;—Edsger W. Dijkstra, 1972&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="kent-beck"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Kent Beck&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "On the surface, being an XP programmer looks a lot like being a programmer within other software development disciplines.
You spend your time working with programs, making them bigger, simpler, faster.
Beneath the surface, however, the focus is quite different.
Your job isn't over when the computer understands what to do.
Your first value is communication with other people.
If the program runs, but there is some vital component of communication left to be done, you aren't done.
You write tests that demonstrate some vital aspect of the software.
You break the program into more smaller pieces, or merge pieces that are too small into larger, more coherent pieces.
You find a system of names that more accurately reflects your intent.&lt;/p&gt;
&lt;p&gt;This may sound like a high-minded pursuit of perfection.
It is anything but.
You try to develop the most valuable software for the customer, but not to develop anything that isn't valuable.
If you can reduce the size of the problem enough, then you can afford to be careful with the work you do on what remains.
Then, you are careful by habit."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Extreme Programming Explained" by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Of course, you can do a better job if you have more tools in your toolbox than if you have fewer, but it is much more important to have a handful of tools that you know when not to use, than to know everything about everything and risk using too much solution."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Extreme Programming Explained" by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 Mastery - The spirit of xUnit is simplicity.
Martin Fowler said, "Never in the annals of software engineering was so much owed by so many to so few lines of code."
Some of the implementations have gotten a little complicated for my taste.
Rolling your own will give you a tool over which you have a feeling of mastery.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Test-Driven Development By Example" by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 Travel light - You can't expect to carry a lot of baggage and move fast.
The artifacts we maintain should be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Few&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simple&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Valuable&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The XP team becomes intellectual nomads, always prepared to quickly pack up the tents and follow the herd.
The herd in this case might be a design that wants to go a different direction than anticipated, or a customer that wants to go a different direction than anticipated, or a team member who leaves, or a technology that suddenly gets hot, or a business climate that shifts.&lt;/p&gt;
&lt;p&gt;Like the nomads, the XP team gets used to traveling light.
They don't carry much in the way of baggage except what they must have to keep producing value for the customer—tests and code.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;Travel light - suggests that the manager doesn't impose a lot of overhead - long all-hands meetings, lengthy status reports.
Whatever the manager requires of the programmers shouldn't take much time to fulfill.&lt;/p&gt;
&lt;p&gt;&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;p&gt;Travel light - The design strategy should produce no "extra" design.
There should be enough to suit our current purposes (the need to do quality work), but no more.
If we embrace change, we will be willing to start simple and continually refine.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Extreme Programming Explained" by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "It's hard to do simple things.
It seems crazy, but sometimes it is easier to do something more complicated than to do something simple.
This is particularly true when you have been successful doing the complicated thing in the past.
Learning to see the world in the simplest possible terms is a skill and a challenge.
The challenge is that you may have to change your value system.
Instead of being impressed when someone (like you, for instance) gets something complicated to work, you have to learn to be dissatisfied with complexity, not to rest until you can't imagine anything simpler working."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Extreme Programming Explained" by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "I'm not a great programmer; I'm just a good programmer with great habits."&lt;/p&gt;
&lt;p class="attribution"&gt;—Kent Beck at "Refactoring: Improving the Design of Existing Code" 1st edition by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="martin-fowler"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Martin Fowler&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "A little time spent refactoring can make the code better communicate its purpose. Programming in this mode is all about saying exactly what you mean."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Refactoring: Improving the Design of Existing Code", Martin Fowler&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="robert-c-martin"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Robert C. Martin&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Professionals avoid getting so vested in an idea that they can't abandon it and turn around.
They keep an open mind about other ideas so that when they hit a dead end they still have other options."&lt;/p&gt;
&lt;p class="attribution"&gt;—"The Clean Coder: a code of conduct for professional programmers" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "A good architecture comes from understanding it more as a journey than as a destination, more as an ongoing process of enquiry than as a frozen artifact."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="bjarne-stroustrup"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Bjarne Stroustrup&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "I like my code to be elegant and efficient.
The logic should be straightforward to make it hard for bugs to hide,
the dependencies minimal to ease maintenance, error handling complete according to an articulated strategy,
and performance close to optimal so as not to tempt people to make the code messy with unprincipled optimizations.
Clean code does one thing well."&lt;/p&gt;
&lt;p class="attribution"&gt;—Bjarne Stroustrup, inventor of C++ and author of The C++ Programming Language.
"Clean Code: A Handbook of Agile Software Craftsmanship" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Другие&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The design goal for Eventlet's API is simplicity and readability.
You should be able to read its code and understand what it's doing.
Fewer lines of code are preferred over excessively clever implementations."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="http://eventlet.net/doc/basic_usage.html"&gt;Eventlet's docs&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Be Humble, don't think of yourself as a super genius, this is your first mistake.
By being humble, you will eventually achieve super genius status =), and even if you don't, who cares!
your code is stupid simple, so you don't have to be a genius to work with it."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://people.apache.org/~fhanik/kiss.html"&gt;KISS principle&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;См.также&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../../../../soft-skills/icebreaker-principle.html#emacsway-icebreaker-principle"&gt;&lt;span class="std std-ref"&gt;Принцип ледокола&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="software-design.html#emacsway-agile-software-design"&gt;&lt;span class="std std-ref"&gt;Role of Software Design in Agile&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="patterns.html#emacsway-agile-patterns"&gt;&lt;span class="std std-ref"&gt;Role of Design Patterns in Agile&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Role of SOLID principles in Agile</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/uncertainty-management/adaptation/software-design/solid.html</link><description>
&lt;span id="emacsway-agile-solid"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#role-of-solid-principles-in-agile" id="id5"&gt;Role of SOLID principles in Agile&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#srp" id="id6"&gt;Ошибочная трактовка SRP&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#srp-is-not-do-just-one-thing" id="id7"&gt;SRP is not do just one thing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#srp-is-about-cohesion" id="id8"&gt;SRP is about Cohesion&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#srp-and-conway-s-law" id="id9"&gt;SRP and "Conway's law"&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#common-closure-principle-ccp" id="id10"&gt;Common Closure Principle (CCP)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#srp-and-complexity" id="id11"&gt;SRP and complexity&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ad-hominem" id="id12"&gt;Ad hominem&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#solid-and-agile" id="id13"&gt;SOLID and Agile&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id2" id="id14"&gt;Баланс краткосрочных и долгосрочных интересов&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#solid" id="id15"&gt;SOLID и первоисточники&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ocp" id="id16"&gt;OCP&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id17"&gt;SRP&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#no-silver-bullet" id="id18"&gt;No Silver Bullet&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="srp"&gt;
&lt;span id="emacsway-agile-solid-misunderstanding"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Ошибочная трактовка SRP&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="srp-is-not-do-just-one-thing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;SRP is not do just one thing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Существуют две распространенные ошибки применения принципа SRP:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;SRP якобы подразумевает делать только одну вещь.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SRP якобы применяется к компонентам, например, к микросервисам.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Давайте немного исследуем этот вопрос.&lt;/p&gt;
&lt;p&gt;В своей книге "Clean Architecture: A Craftsman's Guide to Software Structure and Design", Robert C. Martin сожалеет, что выбрал такое название (SRP):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Of all the SOLID principles, the Single Responsibility Principle (SRP) might be &lt;strong&gt;the least well understood&lt;/strong&gt;.
That's likely because it has a particularly &lt;strong&gt;inappropriate name&lt;/strong&gt;.
It is too easy for programmers &lt;strong&gt;to hear the name and then assume that it means that every module should do just one thing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Make no mistake, there is a principle like that.
A function should do one, and only one, thing.
We use that principle when we are refactoring large functions into smaller functions; we use it at the lowest levels.
&lt;strong&gt;But it is not one of the SOLID principles—it is not the SRP&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Historically, the SRP has been described this way:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;em&gt;A module should have one, and only one, reason to change.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Software systems are changed to satisfy users and stakeholders; those users and stakeholders are the "reason to change" that the principle is talking about.
Indeed, we can rephrase the principle to say this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;em&gt;A module should be responsible to one, and only one, user or stakeholder.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Unfortunately, the words "user" and "stakeholder" aren't really the right words to use here.
There will likely be more than one user or stakeholder who wants the system changed in the same way.
Instead, we're really referring to a group—one or more people who require that change.
We'll refer to that group as an actor.&lt;/p&gt;
&lt;p&gt;Thus the final version of the SRP is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;em&gt;A module should be responsible to one, and only one, actor.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Now, what do we mean by the word "module"? The simplest definition is just a source file.
Most of the time that definition works fine.
Some languages and development environments, though, don't use source files to contain their code.
In those cases a module is just a cohesive set of functions and data structures.&lt;/p&gt;
&lt;p&gt;That word "cohesive" implies the SRP.
Cohesion is the force that binds together the code responsible to a single actor.&lt;/p&gt;
&lt;p&gt;Perhaps the best way to understand this principle is by looking at the symptoms of violating it..."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="srp-is-about-cohesion"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;SRP is about Cohesion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;А в своей книге 2002 года, которая вышла в свет через год после подписания Agile Manifesto (подписание которого, собственно, он же и организовал), Robert C. Martin выводит определение SRP из понятия "сфокусированности" (cohesion) класса:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "SRP: The Single-Responsibility Principle&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This principle was described in the work of Tom DeMarco [1] and Meilir Page-Jones [2].&lt;/strong&gt;
&lt;strong&gt;They called it cohesion.&lt;/strong&gt;
They defined cohesion as the functional relatedness of the elements of a module.
In this chapter we'll shift that meaning a bit and relate cohesion to the forces that cause a module, or a class, to change.&lt;/p&gt;
&lt;p&gt;A class should have only one reason to change.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;[DeMarco79], p. 310.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[Page-Jones88], Chapter 6, p. 82.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;DeMarco, Tom. Structured Analysis and System Specification. Yourdon Press Computing Series. Englewood Cliff, NJ: 1979.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Page-Jones, Meilir. The Practical Guide to Structured Systems Design, 2d ed. Englewood Cliff, NJ: Yourdon Press Computing Series, 1988."&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class="attribution"&gt;—"Agile Software Development. Principles, Patterns, and Practices." by Robert C. Martin, James W. Newkirk, Robert S. Koss&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Многое встает на свое место, если принимать во внимание Cohesion, т.е. использовать изначальный принцип "&lt;a class="reference external" href="http://wiki.c2.com/?CouplingAndCohesion"&gt;Low Coupling &amp;amp; High Cohesion&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;Часто можно слышать, что применение принципов SOLID ведет к появлению нечитаемого кода.
Очень хорошо подобную проблему выразил Eric Evans (правда, по другим причинам):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Если требования архитектурной среды к распределению обязанностей таковы, что элементы, реализующие концептуальные объекты, оказываются физически разделенными, то код больше не выражает модель.&lt;/p&gt;
&lt;p&gt;Нельзя разделять до бесконечности, у человеческого ума есть свои пределы, до которых он еще способен соединять разделенное; если среда выходит за эти пределы, разработчики предметной области теряют способность расчленять модель на осмысленные фрагменты.&lt;/p&gt;
&lt;p&gt;If the framework's partitioning conventions pull apart the elements implementing the conceptual objects, the code no longer reveals the model.&lt;/p&gt;
&lt;p&gt;There is only so much partitioning a mind can stitch back together, and if the framework uses it all up, the domain developers lose their ability to chunk the model into meaningful pieces."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Domain-Driven Design: Tackling Complexity in the Heart of Software" by Eric Evans, перевод В.Л. Бродового&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;О том, что использованием принципов SOLID можно переусложнить программу, пишет и весьма авторитетный в области программной разработки Сергей Тепляков:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://sergeyteplyakov.blogspot.com/2016/08/yagni.html"&gt;Принцип YAGNI&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://sergeyteplyakov.blogspot.com/2013/12/about-agile-principles-patterns-and.html"&gt;Критика книги Боба Мартина "Принципы, паттерны и методики гибкой разработки на языке C#"&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://sergeyteplyakov.blogspot.com/2011/11/blog-post_23.html"&gt;Идеальная архитектура&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://sergeyteplyakov.blogspot.com/2014/10/solid.html"&gt;Шпаргалка по SOLID принципам&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://sergeyteplyakov.blogspot.com/2014/10/about-design-principles.html"&gt;О принципах проектирования&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://sergeyteplyakov.blogspot.com/2012/07/blog-post.html"&gt;О дизайне&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://sergeyteplyakov.blogspot.com/2012/04/blog-post_19.html"&gt;О повторном использовании кода&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Лично мне на практике не доводилось наблюдать сложности от использования принципов SOLID, разве что только в проектах с использованием Redux.
Кстати, у Udi Dahan есть прекрасная статья "&lt;a class="reference external" href="http://udidahan.com/2009/12/09/clarified-cqrs/"&gt;Clarified CQRS&lt;/a&gt;" о том, как грамотно разделять бизнес-логику и логику приложения в CQRS-приложении (а &lt;a class="reference external" href="https://redux.js.org/understanding/thinking-in-redux/motivation"&gt;Redux реализаует принципы CQRS&lt;/a&gt;), чтобы предотвратить фрагментирование бизнес-логики.&lt;/p&gt;
&lt;p&gt;Я обнаружил еще одну причину столь широкого недопонимания этого принципа.
В переводе книги "Clean Code" термин "Single" переводится как "Единый".
А в книге "Clean Architecture" - как "Единственный".&lt;/p&gt;
&lt;p&gt;Эти термины похожи, но не идентичны.
Так, например, "Единое гражданство" означает то, что административно-территориальные единицы государства не могут вводить свое собственное гражданство.
Но при этом, граждане могут иметь двойное гражданство.
А вот "Единственное гражданство" уже подразумевает запрет на двойное гражданство.&lt;/p&gt;
&lt;p&gt;Таким образом, термин "Единый" подразумевает "Сфокусированный" на конкретной задаче, т.е. нефрагментированный.
Иными словами, речь идет о "High Cohesion", что восходит к Constantine's Law - "Low Coupling &amp;amp; High Cohesion", о чем прямо говорит Robert C. Martin по приведенным выше ссылкам.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "&lt;strong&gt;That word "cohesive" implies the SRP.&lt;/strong&gt;
Cohesion is the force that binds together the code responsible to a single actor."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Так, например, метод рефакторинга "&lt;a class="reference external" href="https://refactoring.com/catalog/inlineClass.html"&gt;Inline Class&lt;/a&gt;" не противоречит SRP, хотя класс и отбирает обязанность у другого класса в случае, когда её недостаточно для самостоятельного существования.&lt;/p&gt;
&lt;p&gt;С другой стороны, если фрагментировать класс, понижая его Cohesion, то это будет противоречить принципу SRP, хотя мы и получим классы с дистиллированными обязанностями без примесей.&lt;/p&gt;
&lt;p&gt;Качественный Software Design должен облегчать понимание кода, а не затруднять.&lt;/p&gt;
&lt;p&gt;К сожалению, сложности перевода встречаются нередко.
Так, например, до сих пор нет единого мнения о том, как правильно переводить термины "Coupling" и "Cohesion", и различные источники дают прямо противоположный перевод.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="srp-and-conway-s-law"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;SRP and "Conway's law"&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;А здесь Robert C. Martin выводит понимание SRP исходя из "Conway's law":&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "SRP: The Single Responsibility Principle&lt;/p&gt;
&lt;p&gt;An active &lt;strong&gt;corollary to Conway's law&lt;/strong&gt;: The best structure for a software system is heavily influenced by the social structure of the organization that uses it so that each software module has one, and only one, reason to change."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="common-closure-principle-ccp"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Common Closure Principle (CCP)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;К компонентам применяется похожий, но другой, принцип, который называется "Common Closure Principle (CCP)":&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "THE COMMON CLOSURE PRINCIPLE&lt;/p&gt;
&lt;p&gt;Gather into components those classes that change for the same reasons and at the same times.
Separate into different components those classes that change at different times and for different reasons.&lt;/p&gt;
&lt;p&gt;This is the Single Responsibility Principle restated for components.
Just as the SRP says that a class should not contain multiples reasons to change, so the Common Closure Principle (CCP) says that a component should not have multiple reasons to change.&lt;/p&gt;
&lt;p&gt;For most applications, maintainability is more important than reusability.
If the code in an application must change, you would rather that all of the changes occur in one component, rather than being distributed across many components. [1]
If changes are confined to a single component, then we need to redeploy only the one changed component.
Other components that don't depend on the changed component do not need to be revalidated or redeployed.&lt;/p&gt;
&lt;p&gt;The CCP prompts us to gather together in one place all the classes that are likely to change for the same reasons.
If two classes are so tightly bound, either physically or conceptually, that they always change together, then they belong in the same component.
This minimizes the workload related to releasing, revalidating, and redeploying the software.&lt;/p&gt;
&lt;p&gt;This principle is closely associated with the Open Closed Principle (OCP).
Indeed, it is "closure" in the OCP sense of the word that the CCP addresses.
The OCP states that classes should be closed for modification but open for extension.
Because 100% closure is not attainable, closure must be strategic.
We design our classes such that they are closed to the most common kinds of changes that we expect or have experienced.&lt;/p&gt;
&lt;p&gt;The CCP amplifies this lesson by gathering together into the same component those classes that are closed to the same types of changes.
Thus, when a change in requirements comes along, that change has a good chance of being restricted to a minimal number of components."&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;See the section on "The Kitty Problem" in Chapter 27, "Services: Great and Small."&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class="attribution"&gt;—"Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Нужно учитывать, что под компонентом Robert C. Martin понимает единицу развертывания (в других источниках этот термин может иметь другое значение):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Components are the units of deployment.
They are the smallest entities that can be deployed as part of a system.
In Java, they are jar files.
In Ruby, they are gem files.
In .Net, they are DLLs.
In compiled languages, they are aggregations of binary files.
In interpreted languages, they are aggregations of source files.
In all languages, they are the granule of deployment."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="srp-and-complexity"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;SRP and complexity&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Еще существует распространенное мнение, что SOLID уменьшает сложность программы.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;📝 сложность&lt;/dt&gt;&lt;dd&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Составленность из нескольких частей; многообразность по составу входящих частей и связей между ними.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Трудность, запутанность. Противоположное понятие — простота.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://psychology.academic.ru/2331/%D1%81%D0%BB%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D1%8C"&gt;Словарь практического психолога&lt;/a&gt;". — М.: АСТ, Харвест. С. Ю. Головин. 1998.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;📝 сложный&lt;/dt&gt;&lt;dd&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Состоящий из нескольких частей, элементов. от т. перен. Характеризующийся многими переплетающимися явлениями, признаками, отношениями.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;перен. Представляющий трудность для понимания, разрешения, осуществления; трудный.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;перен. Обладающий противоречивыми качествами, свойствами, особенностями.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://dic.academic.ru/dic.nsf/efremova/246102/%D1%81%D0%BB%D0%BE%D0%B6%D0%BD%D1%8B%D0%B9"&gt;Толковый словарь Ефремовой&lt;/a&gt;". Т. Ф. Ефремова. 2000.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 Complex&lt;/p&gt;
&lt;p&gt;Com"plex (kŏm"plĕks), a. [L. complexus, p. p. of complecti to entwine around, comprise; com- + plectere to twist, akin to plicare to fold. See Plait, n.]&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Composed of two or more parts; composite; not simple; as, a complex being; a complex idea.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Ideas thus made up of several simple ones put together, I call complex; such as beauty, gratitude, a man, an army, the universe.
Locke.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Involving many parts; complicated; intricate.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;When the actual motions of the heavens are calculated in the best possible way, the process is difficult and complex.
Whewell.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Complex fraction. See Fraction. — Complex number (Math.), in the theory of numbers, an expression of the form a + b√-1, when a and b are ordinary integers.&lt;/p&gt;
&lt;p&gt;Syn. — See Intricate.&lt;/p&gt;
&lt;p&gt;Com"plex, n. [L. complexus] Assemblage of related things; collection; complication.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;This parable of the wedding supper comprehends in it the whole complex of all the blessings and privileges exhibited by the gospel.
South.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Complex of lines (Geom.), all the possible straight lines in space being considered, the entire system of lines which satisfy a single relation constitute a complex; as, all the lines which meet a given curve make up a complex. The lines which satisfy two relations constitute a congruency of lines; as, the entire system of lines, each one of which meets two given surfaces, is a congruency.&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="http://www.websters1913.com/words/Complex"&gt;webster's 1913&lt;/a&gt;. Connoisseur's reference to American English - a dictionary for writers and wordsmiths&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Если рассматривать термин в значении "простота понимания", то правильное использование принципов SOLID, наоборот, облегчает понимание.&lt;/p&gt;
&lt;p&gt;Если же рассматривать термин в значении "многообразность по составу входящих частей", то совокупная сложность программы (в общей сложности) не уменьшается, а наоборот возрастает.
Задача архитектурных принципов сводится не к тому, чтобы уменьшить сложность, а к тому, чтобы управлять сложностью.
Это позволяет формировать структуру программы таким образом, чтобы отдельные её части можно было рассматривать изолированно, сохраняя рассматриваемый уровень сложности в пределах &lt;a class="reference external" href="https://ru.m.wikipedia.org/wiki/%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D1%87%D0%B8%D1%81%D0%BB%D0%BE_%D1%81%D0%B5%D0%BC%D1%8C_%D0%BF%D0%BB%D1%8E%D1%81-%D0%BC%D0%B8%D0%BD%D1%83%D1%81_%D0%B4%D0%B2%D0%B0"&gt;возможностей краткосрочной памяти человека&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Отсюда вывод - применение любого паттерна или принципа, вносящего в систему несущественную сложность (accidental complexity), должно себя окупать, т.е. позволять управлять еще большим уровнем сложности.
Тогда применение принципов и паттернов, хотя и будет (математически) усложнять программу, но будет упрощать понимание программы, формируя такие уровни абстракции, которые человеческий мозг сможет рассматривать изолированно.&lt;/p&gt;
&lt;p&gt;Методики управления сложностью позволяют предотвратить Уроборос.&lt;/p&gt;
&lt;p&gt;Но есть еще одно значение этого термина:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "Structural Complexity looks at the system elements and relationships.
In particular, structural complexity looks at how many different ways system elements can be combined.
Thus, it is related to the potential for the system to adapt to external needs."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://www.sebokwiki.org/wiki/Complexity"&gt;Guide to the Systems Engineering Body of Knowledge (SEBoK)&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Если рассматривать термин в этом значении, то SOLID увеличивает сложность, но это не имеет негативного влияния на понимание устройства системы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ad-hominem"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Ad hominem&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Еще одно распространенное мнение, которое часто можно услышать, заключается в том, что Robert C. Martin - оторванный от практики теоретик, придумывающий в своем иллюзорном мирке всякие нежизнеспособные принципы вроде SOLID, которые на практике только ухудшают код.&lt;/p&gt;
&lt;p&gt;Принципы SOLID действительно, имеют под собой теоретическое обоснование, только эта теория не связана с Robert C. Martin.
А вот, например, Bertrand Meyer, действительно, является серьезным научным теоретиком, и его авторство Robert C. Martin не скрывал в своей оригинальной статье "&lt;a class="reference external" href="https://web.archive.org/web/20060822033314/http://www.objectmentor.com/resources/articles/ocp.pdf"&gt;The Open-Closed Principle&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;Итак, вывод первый - если кто и является теоретиком, то это не Robert C. Martin. Он-то как раз практик.&lt;/p&gt;
&lt;p&gt;В архитекторских кругах отношение к Robert C. Martin можно назвать, мягко говоря, неоднозначным.
Зато к Gregor Hohpe отношение - почти единодушно уважительное.&lt;/p&gt;
&lt;p&gt;Но, странное дело, первая книга в &lt;a class="reference external" href="https://architectelevator.com/architecture/architect-bookshelf/"&gt;списке рекомендованной литературы Gregor Hohpe&lt;/a&gt; - это именно книга "Clean Code" by Robert C. Martin.&lt;/p&gt;
&lt;p&gt;Мое же мнение сводится к тому, что говорить о влиянии внутреннего качества кода на характер роста стоимости изменения кода - нужно.
Именно этим и занимается Robert C. Martin.
И это &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Ad_hominem"&gt;важнее манеры донесения информации&lt;/a&gt;.
Потому что это - один из наиболее чувствительных вопросов индустрии:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://t.me/emacsway_log/458"&gt;https://t.me/emacsway_log/458&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://t.me/emacsway_log/462"&gt;https://t.me/emacsway_log/462&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="solid-and-agile"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;SOLID and Agile&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Принципы SOLID впервые появились в статье "Design Principles and Design Patterns" 2000 года:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://sites.google.com/site/unclebobconsultingllc/getting-a-solid-start"&gt;Источник 1&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://web.archive.org/web/20150906155800/http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf"&gt;Источник 2&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://fi.ort.edu.uy/innovaportal/file/2032/1/design_principles.pdf"&gt;Источник 3&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Вышла эта статья за год до того, как тот же Robert C. Martin организовал встречу 17-ти, на которой был принят Agile-Manifesto.
Как между собой связаны два этих события?&lt;/p&gt;
&lt;p&gt;Все просто.
Agile - это адаптивная методика, которая имеет экономическую целесообразность только в том случае, если &lt;a class="reference internal" href="../../../models/agile/agile.html#emacsway-agile-development"&gt;&lt;span class="std std-ref"&gt;стоимость адаптации ниже стоимости заблаговременного проектирования (BDUF)&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;А стоимость адаптации, благодаря которой итеративная разработка вообще обретает смысл, определяется характером роста стоимости изменения кода.
А это уже &lt;a class="reference internal" href="software-design.html#emacsway-agile-software-design"&gt;&lt;span class="std std-ref"&gt;задача архитектурная&lt;/span&gt;&lt;/a&gt;, и это объясняет, почему на подписании Agile-manifesto присутствовало столько людей из мира архитектуры.
Кстати, на этой встрече предполагалось присутствие и Grady Booch, но, не вышло.&lt;/p&gt;
&lt;p&gt;И это так же объясняет, почему первая книга, которую выпустил организатор встречи Agile-Manifesto после его подписания, была посвящена не столько процессам, сколько принципам конструирования (гибкого) кода, обладающего низкой стоимостью изменения.
Это лишний раз подчеркивает &lt;a class="reference internal" href="../../../models/agile/agile.html#emacsway-agile-development-difficulties"&gt;&lt;span class="std std-ref"&gt;важность технической составляющей в Agile (гибкой) разработке&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Итак, следующий важный вывод: если бы принципы конструирования гибкого кода, включая SOLID, не имели бы практического улучшения экономических показателей разработки, тогда Robert C. Martin с единомышленниками никогда не смог бы доказать бизнесу, что Agile обладает экономическим превосходством перед BDUF, и рынок просто его проигнорировал бы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Баланс краткосрочных и долгосрочных интересов&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/List_of_system_quality_attributes"&gt;Quality Attributes&lt;/a&gt; противоречивы между собой, и удовлетворить их все не представляется возможным.
Поэтому, приложение не может быть лучше или хуже - оно может соответствовать или не соответствовать требуемым атрибутам качества.&lt;/p&gt;
&lt;p&gt;Принципы SOLID направлены на удовлетворение атрибута качества &lt;a class="reference external" href="https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=8299"&gt;Modifiability&lt;/a&gt; (см. "Software Architecture in Practice" 3d edition by Len Bass, Paul Clements, Rick Kazman) в долгосрочной перспективе.
Т.е. они призваны обеспечить пологий характер роста стоимости изменения кода, максимально приближенный к горизонтальной асимптоте.
Напомню, принципы SOLID были опубликованы в контексте Agile разработки, где это требование является критически необходимым для достижения экономического превосходства Agile-разработки перед BDUF.&lt;/p&gt;
&lt;p&gt;Чтобы находить баланс наименьшей стоимости разработки как в долгосрочной, так и в краткосрочной перспективе, нужно сочетать принципы SOLID с принципом YAGNI (который отвечает за снижение стоимости в краткосрочной перспективе), о чем писал Сегей Тепляков в статьях:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://sergeyteplyakov.blogspot.com/2016/08/yagni.html"&gt;Принцип YAGNI&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://sergeyteplyakov.blogspot.com/2012/04/blog-post_19.html"&gt;О повторном использовании кода&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Сам Robert Martin дает такое определение качеству дизайна:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The measure of design quality is simply the measure of the effort required to meet the needs of the customer.
If that effort is low, and stays low throughout the lifetime of the system, the design is good.
If that effort grows with each new release, the design is bad.
It's as simple as that."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Ключевым здесь является "stays low throughout the lifetime of the system" (т.е. в долгосрочной перспективе), поскольку существует &lt;a class="reference external" href="https://martinfowler.com/bliki/DesignPayoffLine.html"&gt;Design Payoff Line&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Не должно быть принципов ради принципов, когда за деревьями леса не видно.
Если принципы применяются, а стоимость разработки возрастает, значит, применяются либо не те принципы, либо не так.
Как говорил Craig Larman:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "в продуктовой разработке нет такого понятия как "лучшие практики" - есть только практики, применение которых целесообразно в конкретном контексте.
Практики ситуационны, и беспечное объявление их "лучшими" отрывает их от мотивации и контекста.
Они превращаются в ритуалы, и навязывание так называемых "best practices" убивает культуру обучения, задавания вопросов, вовлечения и непрерывных улучшений.
Зачем людям искать чего-то лучшего, если все уже придумано за них?"&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://less.works/ru/less/framework/introduction"&gt;Знакомство с LeSS&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "There are no such things as best practices in product development.
There are only practices that are adequate within a certain context.
Practices are situational; blithely claiming they are "best" disconnects them from motivation and context.
They become rituals. And pushing so-called best practices kills a culture of learning, questioning, engagement, and continuous improvement.
Why would people challenge best?"&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://less.works/ru/less/framework/introduction"&gt;Introduction to LeSS&lt;/a&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Иными словами, нужно осознавать, для достижения какого именно требования применяется тот или иной принцип, следить за фидбэком от его применения, и анализировать успешность достижения этого требования. Без этого применение принципов может легко превратиться в &lt;a class="reference external" href="http://sergeyteplyakov.blogspot.com/2013/09/blog-post_24.html"&gt;Карго-Культ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solid"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;SOLID и первоисточники&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Остается еще одно распространенное мнение - Robert C. Martin исказил оригинальный смысл первоисточников.
Где-то в чем-то он может и ошибся, да он и сам об этом говорил.
Но он не присваивал себе чужие идеи, и всегда открыто отсылал к первоисточникам, таким образом, привлекая к ним внимание.&lt;/p&gt;
&lt;div class="section" id="ocp"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;OCP&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Вот, например, многие из ваших коллег узнали бы об OCP из оригинала в изложении Bertrand Meyer?
Даже Martin Fowler говорил, что:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "the second  edition [of "Object Oriented Software Construction"] is good but you'll need several months in a gym before you  can lift it."&lt;/p&gt;
&lt;p class="attribution"&gt;—M.Fowler, &lt;a class="reference external" href="https://martinfowler.com/bliki/CommandQuerySeparation.html"&gt;Command Query Separation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;При этом, Robert C. Martin, действительно возлагал на старые принципы новые задачи, исходя из исторического контекста того времени.
Очень хорошо этот вопрос рассматривается в статье "&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/ocp-vs-yagni/"&gt;OCP vs YAGNI&lt;/a&gt;" by Vladimir Khorikov.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "There are two interpretations of the Open/Closed Principle:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;The original Bertrand Meyer's one is about backward compatibility. You need to close the API of your module/library/service if it's meant for external use. Not implementation but exactly the API part of it. And only when it's used by external teams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Bob Martin's one is about avoiding ripple effects: you need to be able to extend the software behavior with modifying little or no original code. This is achieved by putting extension points to your code base."&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/ocp-vs-yagni/"&gt;OCP vs YAGNI&lt;/a&gt;" by Vladimir Khorikov&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;SRP&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В качестве источника этого принципа, Robert C. Martin в своей книге "Agile Software Development. Principles, Patterns, and Practices." указывает:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;DeMarco, Tom. Structured Analysis and System Specification. Yourdon Press Computing Series. Englewood Cliff, NJ: 1979.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Page-Jones, Meilir. The Practical Guide to Structured Systems Design, 2d ed. Englewood Cliff, NJ: Yourdon Press Computing Series, 1988.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class="attribution"&gt;—"Agile Software Development. Principles, Patterns, and Practices." by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;А здесь он дает более развернутую историю:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The 1970s and 1980s were a fertile time for principles of software architecture.
Structured Programming and Design were all the rage.
During that time the notions of Coupling and Cohesion were introduced by Larry Constantine, and amplified by Tom DeMarco, Meilir Page-Jones and many others."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html"&gt;The Single Responsibility Principle&lt;/a&gt;" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Т.е. он отсылает к &lt;a class="reference external" href="http://wiki.c2.com/?CouplingAndCohesion"&gt;Constantine's Law&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Этот принцип не имеет отношения к OOP, хотя и активно используется в OOP, в частности в книгах:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Code Complete" by Steve McConnell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development" by Craig Larman, где этот принцип известен под аббревиатурой GRASP&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;И этот принцип является одним из самых фундаментальных в разработке ПО.
Он применяется в структурном программировании, в OOP, в DDD при моделировании агрегатов, в микросервисах при поиске границ микросервисов и т.п.&lt;/p&gt;
&lt;p&gt;А Kent Beck назвал его в одной из своих недавних статей&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "the basic forces acting on software design.
These were elucidated in the mid-70s by Yourdon &amp;amp; Constantine in &lt;a class="reference external" href="https://amzn.to/2GsuXvQ"&gt;Structured Design&lt;/a&gt; and haven't changed."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://medium.com/@kentbeck_7670/monolith-services-theory-practice-617e4546a879"&gt;Monolith -&amp;gt; Services: Theory &amp;amp; Practice&lt;/a&gt;" by Kent Beck&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Каким бы образом это ни сделал Robert C. Martin, но он достиг поставленной цели - привлек массовое внимание к архитектурным принципам, имеющим действительно важное значение в Agile разработке.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-silver-bullet"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;No Silver Bullet&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Но правда и в том, что &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/No_Silver_Bullet"&gt;серебряной пули нет&lt;/a&gt;.
Нет магических пяти букв, которые волшебным образом сделают код экономически высокоэффективным, особенно, если про них узнали не из первоисточника, а из Википедии.
Зайдите на github, и вы увидите огромное многообразие взаимно-противоречивых демонстрационных приложений (reference applications), и каждое из них претендует на роль самой эталонной реализации Clean Architecture (это уже не совсем SOLID, но из этой же области).
Кто в лес, кто по дрова.
И только работы парней, обладающих &lt;a class="reference external" href="http://www.kamilgrzybek.com/programming-and-design-resources/"&gt;широким архитектурным кругозором и литературным бэкграундом&lt;/a&gt;, таких, как &lt;a class="reference external" href="https://github.com/kgrzybek"&gt;Kamil Grzybek&lt;/a&gt;, могут претендовать на роль эталонной реализации:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/kgrzybek/modular-monolith-with-ddd"&gt;Full Modular Monolith application with Domain-Driven Design approach&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/kgrzybek/sample-dotnet-core-cqrs-api"&gt;Sample .NET Core REST API CQRS implementation with raw SQL and DDD using Clean Architecture&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В таком случае, SOLID уже не мешает создавать экономически высокоэффективные приложения (&lt;a class="reference external" href="http://www.kamilgrzybek.com/design/clean-domain-model-attributes/"&gt;раз&lt;/a&gt; и &lt;a class="reference external" href="http://www.kamilgrzybek.com/design/grasp-explained/"&gt;два&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Еще одно, наверное, самое популярное reference application - &lt;a class="reference external" href="https://github.com/dotnet-architecture/eShopOnContainers"&gt;eShopOnContainers&lt;/a&gt;, было разработано при значительном участии известного авторитета в области архитектуры Cesar De La Torre, который в своем &lt;a class="reference external" href="https://devblogs.microsoft.com/cesardelatorre/free-ebookguide-on-net-microservices-architecture-for-containerized-net-applications/"&gt;блог-посте&lt;/a&gt; пишет:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"Using SOLID principles and Dependency Injection"&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Речь идет об &lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/microservice-application-layer-web-api-design"&gt;этом месте гайда&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В качестве итога можно привести слова самого Robert C. Martin:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "&lt;strong&gt;Following the rules on the paint can won't teach you how to paint.&lt;/strong&gt;
This is an important point.
Principles will not turn a bad programmer into a good programmer.
Principles have to be applied with judgement.
If they are applied by rote it is just as bad as if they are not applied at all.
Having said that, if you want to paint well, I suggest you learn the rules on the paint can.
You may not agree with them all.
You may not always apply the ones you do agree with.
But you'd better know them.
Knowledge of the principles and patterns gives you the justification to decide when and where to apply them.
If you don't know them, your decisions are much more arbitrary."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://sites.google.com/site/unclebobconsultingllc/getting-a-solid-start"&gt;Getting a SOLID start.&lt;/a&gt;" by Robert C. Martin&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;См. также:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://sites.google.com/site/unclebobconsultingllc/getting-a-solid-start"&gt;Getting a SOLID start&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html"&gt;The Single Responsibility Principle&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html"&gt;The Open Closed Principle&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="http://blog.cleancoder.com/uncle-bob/2020/10/18/Solid-Relevance.html"&gt;Solid Relevance&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;См.также&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../crash-course-in-software-development-economics.html"&gt;&lt;span class="doc"&gt;Краткий курс по экономике разработки программного обеспечения&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Sun, 09 Jan 2022 00:00:00 </pubDate></item><item><title>Как стать успешным разработчиком</title><link>https://dckms.github.io/system-architecture/emacsway/it/self-education/success-roadmap.html</link><description>&lt;span class="target" id="index-0"/&gt;&lt;div class="section" id="emacsway-success-roadmap"&gt;
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"My career mission is to help geeks feel safe in the world."&lt;/p&gt;
&lt;p class="attribution"&gt;—Kent Beck, description of his Linkedin profile&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="contents topic" id="id2"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#emacsway-success-roadmap" id="id9"&gt;Как стать успешным разработчиком&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id10"&gt;Несколько исторических примеров&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id11"&gt;Дорожная карта&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id5" id="id12"&gt;1. Учимся писать экономически эффективный код&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id6" id="id13"&gt;2. Обучаем команду&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id7" id="id14"&gt;3. Организовываем процессы&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id8" id="id15"&gt;4. Изменяем коллектив&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;По поводу "&lt;a class="reference external" href="https://ru.m.wikipedia.org/wiki/%D0%A1%D0%B8%D0%BD%D0%B4%D1%80%D0%BE%D0%BC_%D1%81%D0%B0%D0%BC%D0%BE%D0%B7%D0%B2%D0%B0%D0%BD%D1%86%D0%B0"&gt;Эффекта Самозванца&lt;/a&gt;" (ощущение того, что человек не заслуживает профессиональной позиции, полагая, что окружающие ошибочно думают иначе).
Видно, что эта тема многих беспокоит.
Мне даже известны люди, которые не выдержали напряжения и бросили разработку.&lt;/p&gt;
&lt;p&gt;Хотя этот термин здесь не совсем корректно употреблен, и означает он немного другую проблему, но в индустрии этот термин хорошо закрепился и многим понятен.&lt;/p&gt;
&lt;p&gt;Наверное, каждого разработчика волнует вопрос его эффективности.
Чаще всего собственная недооценка провоцируется хронической неуспеваемостью, о чем и пойдет речь далее.&lt;/p&gt;
&lt;p&gt;Нужно учитывать, что через "Долину Отчаяния" на графике &lt;a class="reference external" href="https://ru.m.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%94%D0%B0%D0%BD%D0%BD%D0%B8%D0%BD%D0%B3%D0%B0_%E2%80%94_%D0%9A%D1%80%D1%8E%D0%B3%D0%B5%D1%80%D0%B0"&gt;Даннинга-Крюгера&lt;/a&gt; проходят все.
Если вы относите причины неуспеваемости на свой счет, то, вероятно, в вашей компании что-то не так с процессами, которые искажают это восприятие.
Впрочем, подобный уровень организации процессов является, скорее, правилом на рынке труда, чем исключением.&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Несколько исторических примеров&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Фрагмент биографии легендарного летчика-аса Ивана Кожедуба:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "В начале военной карьеры Ивана Никитовича преследовали неудачи, его даже чуть было не перевели на пост оповещения.
Только заступничество командира полка майора И. Солдатенко помогло ему остаться в полку.
Свою первую победу летчик одержал в ходе 40-го боевого вылета, сбив немецкий пикировщик."&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://w.histrf.ru/articles/article/show/kozhiedub_ivan_nikitovich_08_06_1920_08_08_1991_ghgh"&gt;Кожедуб Иван Никитович&lt;/a&gt;" / Киселев О. Н.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Каждая ошибка - это ориентир на пути к успеху. Неважно, сколько ошибок было сделано, важно сколько выводов из них было вынесено.&lt;/p&gt;
&lt;p&gt;Еще один назидательный пример - Кубинец Лопес стал первым в истории четырехкратным олимпийским чемпионом в греко-римской борьбе, превзойдя достижение Александра Карелина.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 В 13 лет его карьера могла завершиться досрочно — он получил страшный двойной перелом ноги...&lt;/p&gt;
&lt;p&gt;Лопес уже в 17 лет попал в сборную Кубы, но не все шло гладко. На своем первом крупном соревновании — чемпионате мира 2002 года — молодой Лопес с треском провалился. Он финишировал 13-м в весовой категории до 120 кг. А на следующий год выступил и того хуже — занял 16-е место.&lt;/p&gt;
&lt;p&gt;Не заладилось и на Олимпиаде в Афинах — в четвертьфинале кубинца остановил россиянин Хасан Бароев, ставший впоследствии Олимпийским чемпионом и лишенный медали.&lt;/p&gt;
&lt;p&gt;"Не понимаю, что я тогда делал не так. Я был готов, был заряжен. Но медали не шли ко мне", — вспоминал об этом впоследствии Лопес.&lt;/p&gt;
&lt;p&gt;Но начиная с 2005 года результаты упорного и упрямого кубинца пошли вверх. Он стал чемпионом мира в 2005, 2007, 2009 и 2010 годах.&lt;/p&gt;
&lt;p class="attribution"&gt;—"&lt;a class="reference external" href="https://tass.ru/opinions/12047595"&gt;Скромный кубинский гигант. Кто побил рекорд Карелина в борьбе?&lt;/a&gt;" / Лазорин Игорь, ТАСС&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Нередко импульс волевых усилий, необходимый для решения неудач в начале своего профессионального пути, обретает момент инерции уже на всю жизнь, помогая &lt;a class="reference internal" href="../../soft-skills/planning-in-psychology.html#emacsway-planning-in-psychology"&gt;&lt;span class="std std-ref"&gt;достигнуть уровень высококлассного специалиста&lt;/span&gt;&lt;/a&gt;. Таких примеров история знает немало, в самых различных отраслях.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Дорожная карта&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;1. Учимся писать экономически эффективный код&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Первым важным навыком на пути к обретению успеваемости является умение писать &lt;a class="reference internal" href="../sdlc/uncertainty-management/adaptation/crash-course-in-software-development-economics.html"&gt;&lt;span class="doc"&gt;экономически эффективный код&lt;/span&gt;&lt;/a&gt; с &lt;a class="reference internal" href="../sdlc/models/agile/agile.html#emacsway-agile-development"&gt;&lt;span class="std std-ref"&gt;пологим характером роста стоимости его изменения&lt;/span&gt;&lt;/a&gt;.
На эту тему было написано &lt;a class="reference internal" href="self-education-for-software-engineer.html"&gt;&lt;span class="doc"&gt;немало книг&lt;/span&gt;&lt;/a&gt;.
Не понимая истинных причин снижения velocity, человек склонен относить это на свой счет, что препятствует их обнаружению и устранению.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;2. Обучаем команду&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Второй важный навык выводится исходя из модели коллективного владения кодом.
Вы работаете по большей части с кодом, написанным другими участниками команды.
Вы тратите на его чтение, понимание и изменение основную часть времени.
От его качества зависит и ваша персональная успеваемость.&lt;/p&gt;
&lt;p&gt;Здесь есть несколько вариантов:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Попасть в струю коллектива, которая работает с качественным кодом. Для этого нужно уметь их собой заинтересовать, поэтому см. п.1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Изолироваться от командного legacy и начать формировать новую кодовую базу под себя (вариант кажется фантастическим, но, тем не менее, вполне реальнен).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Влиять на коллектив, и вместе с коллективом изменять код. Этот вариант тоже возможен, но требует обладания совокупностью качеств. Больше всего мне в этом вопросе помогла книга "Extreme Programming Explained" 1st edition by Kent Beck.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Полученные знания нужно умело применять.
Здесь важно понять, с какой стороны начать.
Этот вопрос хорошо освещает статья "&lt;a class="reference external" href="https://less.works/ru/less/principles/systems-thinking.html"&gt;Системное мышление&lt;/a&gt; by Craig Larman.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;3. Организовываем процессы&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Итак. Теперь вы можете писать высокоэффективный код вместе с командой.
Но это еще не победа.
Успешность во многом зависит от качества организации процессов.
Одно неверное управленческое решение, и команда демотивирована, уходят ключевые специалисты, возникают разногласия и конфликты.&lt;/p&gt;
&lt;p&gt;Попасть работать к хорошему менедженту хотя и возможно, но это сложнее, чем попасть работать в хорошую команду.
А это значит, что вы можете рассчитывать только на себя.&lt;/p&gt;
&lt;p&gt;Наиболее частые проблемы исходят из-за неверного распределения обязанностей, например, когда продакт занимается не требованиями, а реализацией.
Или методика оценивания задач не соответствует уровню культуры коллектива - индивидуальная оценка задачи может повысить точность планирования в зрелом коллективе, а может напрочь убить взаимопомощь и распространение знаний в развивающемся коллективе, и разогнать комплекс неполноценности до уровня психологического предела (см. "Agile Estimating and Planning" by Mike Cohn), особенно, если при этом еще и путают оценку с обязательством.
Непонимание того, чем является макет UX/UI дизайна (problem vs. solution space) приводит конфликту между продактом и командой.
Неудачная топология заблокирует автономность команд, и команды будут бОльшую часть времени потопать в дискуссиях.
Список можно продолжать.
Вообще, по моим наблюдением, качество организации процессов является основной причиной увольнения значимых специалистов.&lt;/p&gt;
&lt;p&gt;Собственно, даже Steve McConnell советовал в некоторых случаях "голосовать ногами".
Вот только вероятность того, что на новом месте менеджмент будет поставлен получше, не сильно высокая.&lt;/p&gt;
&lt;p&gt;Поскольку процессы влияют на вас, то вы можете изменить свое положение, влияя на процессы.
Поэтому, грамотный специалист должен уметь &lt;a class="reference internal" href="../sdlc/sdlc-reference.html"&gt;&lt;span class="doc"&gt;разбираться в процессах&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;4. Изменяем коллектив&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;И, наконец, мы подходим к самой сложной карьерной проблеме - это &lt;a class="reference internal" href="../../soft-skills/change-making.html"&gt;&lt;span class="doc"&gt;осуществление изменений в коллективе&lt;/span&gt;&lt;/a&gt; с точки зрения &lt;a class="reference internal" href="../../soft-skills/cognitive-biases.html"&gt;&lt;span class="doc"&gt;коммуникативной, социальной и управленческой психологии&lt;/span&gt;&lt;/a&gt;.
Мало знать, что нужно изменить, нужно еще иметь понимание как это осуществить.&lt;/p&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;См.также&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="self-education-for-software-engineer.html"&gt;&lt;span class="doc"&gt;Список литературы для самообучения разработчика программного обеспечения&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../soft-skills/planning-in-psychology.html#emacsway-planning-in-psychology"&gt;&lt;span class="std std-ref"&gt;Психологическое значение планирования&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../soft-skills/learning.html#emacsway-learning-in-psychology"&gt;&lt;span class="std std-ref"&gt;Кристаллизация знаний. Как читать и не превратиться в коллекционера информации.&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="../../../README.html"&gt;&lt;span class="doc"&gt;Как пользоваться&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Sat, 08 Jan 2022 00:00:00 </pubDate></item><item><title>Список психологических эффектов</title><link>https://dckms.github.io/system-architecture/emacsway/soft-skills/cognitive-biases.html</link><description>
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Список психологических эффектов, с которыми приходится сталкиваться в своей деятельности IT-архитектору:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%94%D0%B0%D0%BD%D0%BD%D0%B8%D0%BD%D0%B3%D0%B0_%E2%80%94_%D0%9A%D1%80%D1%8E%D0%B3%D0%B5%D1%80%D0%B0"&gt;Эффект Даннинга — Крюгера&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D0%BD%D0%B4%D1%80%D0%BE%D0%BC_%D1%81%D0%B0%D0%BC%D0%BE%D0%B7%D0%B2%D0%B0%D0%BD%D1%86%D0%B0"&gt;Синдром самозванца&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BA%D0%BB%D0%BE%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D1%8C_%D0%BA_%D0%BF%D0%BE%D0%B4%D1%82%D0%B2%D0%B5%D1%80%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D1%8E_%D1%81%D0%B2%D0%BE%D0%B5%D0%B9_%D1%82%D0%BE%D1%87%D0%BA%D0%B8_%D0%B7%D1%80%D0%B5%D0%BD%D0%B8%D1%8F"&gt;Склонность к подтверждению своей точки зрения&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="learning-spiral-phase-mismatch.html#emacsway-learning-spiral-phase-mismatch"&gt;&lt;span class="std std-ref"&gt;Несовпадение фаз спиралей обучения&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D0%BB%D0%B5%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5_%D0%B2%D0%BE%D1%81%D0%BF%D1%80%D0%B8%D1%8F%D1%82%D0%B8%D0%B5"&gt;Селективное восприятие&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%BF%D1%80%D0%B8%D0%B2%D1%8F%D0%B7%D0%BA%D0%B8"&gt;Эффект привязки&lt;/a&gt;" (Эффект якоря)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D1%89%D0%B8%D1%82%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%B7%D0%BC"&gt;Психологическая защита&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5_%D1%81%D0%BE%D0%BF%D1%80%D0%BE%D1%82%D0%B8%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_(%D0%BF%D1%81%D0%B8%D1%85%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D1%8F)"&gt;Реактивное сопротивление&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%BB%D0%BE%D0%B6%D0%BD%D0%BE%D0%B9_%D1%83%D0%BD%D0%B8%D0%BA%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8"&gt;Эффект ложной уникальности&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%BD%D0%B5%D0%BE%D0%B4%D0%BD%D0%BE%D0%B7%D0%BD%D0%B0%D1%87%D0%BD%D0%BE%D1%81%D1%82%D0%B8"&gt;Эффект неоднозначности&lt;/a&gt;" (упоминался &lt;a class="reference external" href="https://t.me/emacsway_log/97"&gt;здесь&lt;/a&gt; и &lt;a class="reference external" href="https://t.me/emacsway_log/101"&gt;здесь&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B5%D0%B4%D0%BF%D0%BE%D1%87%D1%82%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BD%D1%83%D0%BB%D0%B5%D0%B2%D0%BE%D0%B3%D0%BE_%D1%80%D0%B8%D1%81%D0%BA%D0%B0"&gt;Предпочтение нулевого риска&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%98%D1%80%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D1%83%D1%81%D0%B8%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5"&gt;Закон иррационального усиления&lt;/a&gt;" (упоминался &lt;a class="reference external" href="https://t.me/emacsway_log/455"&gt;здесь&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Sunk_cost"&gt;Sunk cost&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%98%D1%81%D0%BA%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_%D0%B2%D0%BE%D1%81%D0%BF%D1%80%D0%B8%D1%8F%D1%82%D0%B8%D0%B8_%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B2%D1%8B%D0%B1%D0%BE%D1%80%D0%B0"&gt;Искажение в восприятии сделанного выбора&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.m.wikipedia.org/wiki/%D0%9A%D0%BE%D0%B3%D0%BD%D0%B8%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B9_%D0%B4%D0%B8%D1%81%D1%81%D0%BE%D0%BD%D0%B0%D0%BD%D1%81"&gt;Когнитивный диссонанс&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.m.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%BD%D0%BE%D1%81%D1%82%D1%8C"&gt;Конформность&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%B2%D0%BB%D0%B0%D0%B4%D0%B5%D0%BD%D0%B8%D1%8F"&gt;Эффект владения&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%BE%D1%88%D0%B8%D0%B1%D0%BA%D0%B0_%D0%B2%D1%8B%D0%B6%D0%B8%D0%B2%D1%88%D0%B5%D0%B3%D0%BE"&gt;Систематическая ошибка выжившего&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F_%D1%80%D0%B0%D0%B7%D0%B1%D0%B8%D1%82%D1%8B%D1%85_%D0%BE%D0%BA%D0%BE%D0%BD"&gt;Теория разбитых окон&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%90%D0%BF%D0%B5%D0%BB%D0%BB%D1%8F%D1%86%D0%B8%D1%8F_%D0%BA_%D0%BB%D0%B8%D1%87%D0%BD%D0%BE%D1%81%D1%82%D0%B8"&gt;Апелляция к личности&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%B2%D1%82%D0%BE%D1%80%D0%BE%D0%B9_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B"&gt;Эффект второй системы&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D1%84%D0%B5%D1%81%D1%81%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D0%B4%D0%B5%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D1%8F"&gt;Профессиональная деформация&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.m.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%BF%D1%80%D0%BE%D0%B6%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%B0"&gt;Эффект прожектора&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%BA%D1%80%D0%B0%D1%81%D1%82%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F"&gt;Прокрастинация&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D0%BC%D0%BE%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%B2%D1%8B%D0%B3%D0%BE%D1%80%D0%B0%D0%BD%D0%B8%D0%B5"&gt;Эмоциональное выгорание&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9E%D1%88%D0%B8%D0%B1%D0%BA%D0%B0_%D0%BF%D0%BB%D0%B0%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F"&gt;Ошибка планирования&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D1%82%D0%B5%D0%BB%D0%B5%D1%81%D0%BA%D0%BE%D0%BF%D0%B0"&gt;Эффект телескопа&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%BD%D0%B5%D0%B4%D0%B0%D0%B2%D0%BD%D0%B5%D0%B3%D0%BE"&gt;Эффект недавнего&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D1%81%D0%BA%D0%B0%D0%B4_%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%BD%D0%BE%D0%B9_%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D0%B8"&gt;Каскад доступной информации&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BA%D0%BE%D0%BD_%D1%82%D1%80%D0%B8%D0%B2%D0%B8%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8"&gt;Закон тривиальности (эффект велосипедного сарая)&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BA%D0%BE%D0%BD%D1%8B_%D0%9F%D0%B0%D1%80%D0%BA%D0%B8%D0%BD%D1%81%D0%BE%D0%BD%D0%B0"&gt;Первый закон Паркинсона (Работа заполняет время, отпущенное на неё)&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Обзорные (агрегированные) статьи:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9B%D0%BE%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%BE%D1%88%D0%B8%D0%B1%D0%BA%D0%B0"&gt;Логическая ошибка&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%BA%D0%BE%D0%B3%D0%BD%D0%B8%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D1%85_%D0%B8%D1%81%D0%BA%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B9"&gt;Список когнитивных искажений&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Decision-making"&gt;Decision-making&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;А вот следующая статья очень интересна.
Научное биологическое обоснование того, почему процесс Knowledge Crunching неизбежен.
Иными словами, почему требуется время на вызревание концептуальных контуров доменного моделирования, что и является основной причиной появления Monolith First:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.hindawi.com/journals/np/2009/482696/"&gt;A Plastic Temporal Brain Code for Conscious State Generation&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;На эту тему была неплохая статья на Хабре:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://habr.com/ru/company/web_payment_ru/blog/246081/"&gt;О медленном программировании&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Шпаргалки по теме:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=ru.free_coding.biascs"&gt;Шпаргалка по когнитивным искажениям в виде мобильного приложения&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В виде JSON:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.dropbox.com/s/8l49rx8ig9i4za3/cognitive-bias-cheat-sheet-ru.json"&gt;https://www.dropbox.com/s/8l49rx8ig9i4za3/cognitive-bias-cheat-sheet-ru.json&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://ezh.li/cbcs-json"&gt;http://ezh.li/cbcs-json&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/busterbenson/public/blob/master/cognitive-bias-cheat-sheet.json"&gt;https://github.com/busterbenson/public/blob/master/cognitive-bias-cheat-sheet.json&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Статьи по теме:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://betterhumans.pub/cognitive-bias-cheat-sheet-55a472476b18"&gt;Cognitive bias cheat sheet&lt;/a&gt;" by Buster Benson&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://medium.com/russian/cognitive-bias-cheat-sheet-5bb0664b67b5"&gt;Памятка по когнитивным искажениям&lt;/a&gt;" / Alexey Ezhikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://www.talent-management.com.ua/3467-shpargalka-po-kognitivnym-iskazheniyam/"&gt;Шпаргалка по когнитивным искажениям&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Простой и доходчивый видеокурс по SoftSkills:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://youtube.com/channel/UCSN7G8syJUaRiXrw1l0qk_g"&gt;Soft Skills Pro&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><pubDate>Thu, 06 Jan 2022 00:00:00 </pubDate></item><item><title>Принцип ледокола</title><link>https://dckms.github.io/system-architecture/emacsway/soft-skills/icebreaker-principle.html</link><description>
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;В статье "&lt;a class="reference internal" href="change-making.html"&gt;&lt;span class="doc"&gt;Как осуществлять изменения в коллективе&lt;/span&gt;&lt;/a&gt;" говорилось о том, что, изменяя процессы коллектива, важно выбрать такую область воздействия, в которой потребность изменений будет превосходить силу сопротивления.&lt;/p&gt;
&lt;p&gt;На этот счет существует интересная аналогия.
Знаете, почему ледокол рубит лед, а обычный корабль нет?&lt;/p&gt;
&lt;div class="contents topic" id="id2"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#emacsway-icebreaker-principle" id="id16"&gt;Принцип ледокола&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id17"&gt;Суть принципа ледокола&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id18"&gt;В программировании&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id5" id="id19"&gt;В борьбе&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id6" id="id20"&gt;В военном деле&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id7" id="id21"&gt;В спорте&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id8" id="id22"&gt;В торговле на фондовом рынке&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id9" id="id23"&gt;В технике&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id10" id="id24"&gt;В управленческой психологии&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id11" id="id25"&gt;В психологии&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id12" id="id26"&gt;В природе&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id13" id="id27"&gt;В быту&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;Суть принципа ледокола&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ледокол атакует лед в том направлении, в котором способен обеспечить силовое превосходство.
Он атакует его сверху, где сила сопротивления льда наименьшая.
А корабль - с торца, где силовое превосходство остается за льдом, поскольку в горизонтальной плоскости толща льда простирается на сотни километров.&lt;/p&gt;
&lt;div class="figure align-center" id="id14"&gt;
&lt;a class="reference internal image-reference" href="../../_images/icebreaker-principle.jpg"&gt;&lt;img alt="Ледокол атакует лед сверху, где сила его сопротивления наименьшая. Иллюстрация из открытых источников неизвестного автора." src="../../_images/icebreaker-principle.jpg" style="width: 90%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Ледокол атакует лед сверху, где сила его сопротивления наименьшая. Иллюстрация из открытых источников неизвестного автора.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Вот так все просто - иногда достаточно просто изменить направление воздействия, чтобы преодолеть сопротивление.&lt;/p&gt;
&lt;p&gt;Лед сильнее ледокола.
Но ледокол способен создать силовое превосходство в нужное время в нужном месте.
Этого достаточно, чтобы шаг за шагом проложить маршрут полностью.&lt;/p&gt;
&lt;p&gt;Еще один важный вывод - ледокол колет лед там, где нужно ходить судам.
Т.е. там, где это действительно востребовано остальными участниками зимней навигации.
Проецируя это в профессиональную плоскость - нужно уметь распознавать истинные потребности коллектива.&lt;/p&gt;
&lt;p&gt;Принцип создания силового превосходства в нужное время и в нужном месте находит широкое распространение в природе, в технике, в политике, в военном деле, в борьбе, в спорте, в управленческой психологии, в программировании, в торговле на фондовом рынке и т.п.&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;В программировании&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"Software design is a constant battle with complexity."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Domain-Driven Design: Tackling Complexity in the Heart of Software" by Eric Evans&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;В алгоритмах группы "Divide-and-conquer" действует тот же принцип, который известен по названием "Разделяй и властвуй".
Властвуй - значит обладай превосходством, откуда происходят такие воинские термины как "господствующая высота", "господство в воздухе" и т.д.&lt;/p&gt;
&lt;p&gt;Одна из ключевых задач хорошей архитектуры заключается в управлении сложностью, чтобы обеспечить превосходство &lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D1%87%D0%B8%D1%81%D0%BB%D0%BE_%D1%81%D0%B5%D0%BC%D1%8C_%D0%BF%D0%BB%D1%8E%D1%81-%D0%BC%D0%B8%D0%BD%D1%83%D1%81_%D0%B4%D0%B2%D0%B0"&gt;краткосрочной памяти&lt;/a&gt; разработчика над уровнем сложности рассматриваемого изолировано фрагмента кода.&lt;/p&gt;
&lt;p&gt;Grady Booch говорил, что архитектура - это многоуровневая система абстракций.
Где назначение абстракций - управление сложностью.&lt;/p&gt;
&lt;p&gt;А Len Bass говорил, что&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Architecture Is an Abstraction&lt;/p&gt;
&lt;p&gt;This abstraction is essential to taming the complexity of a system - we simply cannot, and do not want to, deal with all of the complexity all of the time.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Software Architecture in Practice" 3d edition by Len Bass, Paul Clements, Rick Kazman&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;И Thomas H. Cormen:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;In software design, separating what operations do from how they do it is known as abstraction.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Algorithms Unlocked" 3d edition by Thomas H. Cormen&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Ну и как же здесь не вспомнить Steve McConnell:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Managing complexity is the most important technical topic in software development. In my view, it's so important that Software's Primary Technical Imperative has to be managing complexity.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;"Dijkstra pointed out that no one's skull is really big enough to contain a modern
computer program (Dijkstra 1972), which means that we as software developers
shouldn't try to cram whole programs into our skulls at once; we should try to organize
our programs in such a way that we can safely focus on one part of it at a time. The goal
is to minimize the amount of a program you have to think about at any one time. You
might think of this as mental juggling—the more mental balls the program requires you
to keep in the air at once, the more likely you'll drop one of the balls, leading to a design
or coding error.&lt;/p&gt;
&lt;p&gt;At the software-architecture level, the complexity of a problem is reduced by dividing
the system into subsystems. Humans have an easier time comprehending several simple
pieces of information than one complicated piece. The goal of all software-design
techniques is to break a complicated problem into simple pieces. The more independent
the subsystems are, the more you make it safe to focus on one bit of complexity at a
time. Carefully defined objects separate concerns so that you can focus on one thing at a
time. Packages provide the same benefit at a higher level of aggregation.&lt;/p&gt;
&lt;p&gt;Keeping routines short helps reduce your mental workload. Writing programs in terms
of the problem domain, rather than in terms of low-level implementation details, and
working at the highest level of abstraction reduce the load on your brain.&lt;/p&gt;
&lt;p&gt;The bottom line is that programmers who compensate for inherent human limitations
write code that's easier for themselves and others to understand and that has fewer
errors."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Software's Primary Technical Imperative is managing complexity. This is greatly
aided by a design focus on simplicity.
Simplicity is achieved in two general ways: minimizing the amount of essential
complexity that anyone's brain has to deal with at any one time, and keeping
accidental complexity from proliferating needlessly.&lt;/p&gt;
&lt;p class="attribution"&gt;—"Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The number
"7±2" has been found to be a number of discrete items a person can remember while
performing other tasks (Miller 1956). If a class contains more than about seven data
members, consider whether the class should be decomposed into multiple smaller
classes (Riel 1996).&lt;/p&gt;
&lt;p class="attribution"&gt;—"Code Complete" by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;В борьбе&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Наглядный пример этого принципа - "&lt;a class="reference external" href="https://youtu.be/svxD8dPGBJw"&gt;висячка&lt;/a&gt;" в Самбо.&lt;/p&gt;
&lt;div class="figure align-center" id="id15"&gt;
&lt;a class="reference internal image-reference" href="../../_images/hanging.jpg"&gt;&lt;img alt="Для одержания победы не нужно быть сильнее противника - достаточно противопоставить свои сильные группы мышц против его слабых групп мышц. Фото из открытых источников неизвестного автора." src="../../_images/hanging.jpg" style="width: 90%;"/&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;span class="caption-text"&gt;Для одержания победы не нужно быть сильнее противника - достаточно противопоставить свои сильные группы мышц против его слабых групп мышц. Фото из открытых источников неизвестного автора.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Противопоставляя свои сильные группы мышц (спины и ног) против слабых групп мышц (бицепс) противника, становится возможным одержать победу даже над превосходящем по силе противником (и именно поэтому "болевые приемы лежа" (с использованием ног) изучаются в силовых ведомствах).&lt;/p&gt;
&lt;p&gt;В одном фильме (уже не помню его названия) было красиво сказано:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Искусство воевать заключается в том, чтобы быть сильным в нужное время в нужном месте.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Но отсюда можно сделать еще один интересный вывод - суть победы в борьбе заключается в умелом использовании потенциальной энергии в поле тяготения Земли.
Тот, кто повален, существенно ограничен в использовании потенциальной энергии.
Это говорит о важности способности видеть действующие силы в окружении, и умело использовать их.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;В военном деле&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Как говорил Г.К.Жуков, бой - это сухая математика.
Важно обеспечить перегруппировку сил таким образом, чтобы на заданном участке фронта обеспечить силовое превосходство.
Как вариант, это приводило к взятию группировки противника в "клещи", с последующим ее ослаблением в условиях окружения при отсутствии тылового обеспечения.&lt;/p&gt;
&lt;p&gt;При форсированиии водной преграды наступление разворачивается не сразу, а после концентрации сил на плацдарме.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;В спорте&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Приседая со штангой на плечах, мы держим позвоночник ровно, чтобы вес штанги равномерно распределялся по всей площади контактной поверхности позвонка, минимизируя удельную нагрузку таким образом, чтобы обеспечить превосходство предела прочности позвонка над ней.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;В торговле на фондовом рынке&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Главный принцип инвестора - это диверсификация, т.е. распределение рисков таким образом, чтобы каждая категория риска не превосходила допустимый предел финансовой устойчивости.
Это обеспечивает психологическое равновесие инвестора.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;В технике&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Плавучесть судна обеспечивается водонепроницаемыми перегородками, обеспечивающими превосходство гидростатической подъёмной силы над силой тяжести воды на месте пробоины.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;В управленческой психологии&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Изменяя процессы коллектива важно выбрать такую область воздействия, в которой потребность изменений будет превосходить силу сопротивления, см. "&lt;a class="reference internal" href="change-making.html"&gt;&lt;span class="doc"&gt;Как осуществлять изменения в коллективе&lt;/span&gt;&lt;/a&gt;".&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;В психологии&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Всем известен принцип Дейла Карнеги "Живите в отсеке сегодняшнего дня".
Можно сказать, что основная битва человека за свое счастье - это битва с его собственными мыслями.
См. также "&lt;a class="reference internal" href="planning-in-psychology.html"&gt;&lt;span class="doc"&gt;Психологическое значение планирования&lt;/span&gt;&lt;/a&gt;".&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;В природе&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Вода камень точит.
Видели как море режет скалы?
Обязательно посмотрите - вдохновляет.
Стекающие капельки воды прорезают в камне бороздки и углубляют их до тех пор, пока глыба не обрушится.
Капля против скалы!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;В быту&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Разжигая дрова в мангале для шашлыка, мы используем шепки, ветки, бумагу, или горючие жидкости, чтобы энергия пламени спички обладала превосходством над теплоемкостью воспламеняемого материала.
Попытка воспламенить полено спичкой напрямую окажется безуспешной.&lt;/p&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;См.также&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="change-making.html"&gt;&lt;span class="doc"&gt;Как осуществлять изменения в коллективе&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="planning-in-psychology.html"&gt;&lt;span class="doc"&gt;Психологическое значение планирования&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Thu, 06 Jan 2022 00:00:00 </pubDate></item><item><title>Как осуществлять изменения в коллективе</title><link>https://dckms.github.io/system-architecture/emacsway/soft-skills/change-making.html</link><description>&lt;span class="target" id="index-0"/&gt;&lt;div class="section" id="emacsway-change-making-in-psychology"&gt;
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;На протяжении своей практики я регулярно наблюдал одну и ту же картину: кто-то из сотрудников узнал что-то новое, или же был принят на работу сотрудник с новыми знаниями (например, DDD, архитектурные, методологические, процессные подходы и т.п.), но, странное дело, новая идея получает не поддержку, а сопротивление коллектива, хотя и могла бы облегчить жизнь многим.&lt;/p&gt;
&lt;p&gt;Далее одно из двух - либо напряженность нарастает, и наступает разрыв отношений, либо человек смиряется, проявив "&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%BD%D0%BE%D1%81%D1%82%D1%8C"&gt;Внешний конформизм&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;Последний вариант опасен тем, что для человека намного проще согласиться с существующим положением дел, и, чтобы подавить "&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%B3%D0%BD%D0%B8%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B9_%D0%B4%D0%B8%D1%81%D1%81%D0%BE%D0%BD%D0%B0%D0%BD%D1%81"&gt;Когнитивный диссонанс&lt;/a&gt;", человек старается всеми силами преувеличить существенность принятого им решения, одновременно приуменьшая важность отвергнутого.
Вследствие этого альтернатива теряет всякую привлекательность в его глазах.&lt;/p&gt;
&lt;p&gt;Далее наступает "&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%98%D1%81%D0%BA%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_%D0%B2%D0%BE%D1%81%D0%BF%D1%80%D0%B8%D1%8F%D1%82%D0%B8%D0%B8_%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B2%D1%8B%D0%B1%D0%BE%D1%80%D0%B0"&gt;Искажение в восприятии сделанного выбора&lt;/a&gt;" и "&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%98%D1%80%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D1%83%D1%81%D0%B8%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5"&gt;Закон иррационального усиления&lt;/a&gt;", и, из сторонника изменений, человек превращается в реакциониста, находя в этом "&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D1%89%D0%B8%D1%82%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%B7%D0%BC"&gt;Психологическую защиту&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;Наверняка вы слышали в своей практике такие фразы, как "я тоже был таким когда-то...", "юношеский максимализм" и т.п.&lt;/p&gt;
&lt;p&gt;Но бывает и третий вариант - человеку удается изменить среду.
В конце концов, существующая среда была кем-то создана.
Почему одним это удается, а другим нет?&lt;/p&gt;
&lt;p&gt;По моим наблюдениям, условием снижения напряженности является выравнивание уровня знаний.
Вероятность разрыва отношений выше в ригидных коллективах с низкой обучаемостью.
Поэтому, первая задача, которую предстоит решить, - это изменить систему ценностей коллектива, и возвести знания в элемент престижа.&lt;/p&gt;
&lt;p&gt;Никогда не предлагайте внедрения какого-либо нового подхода, например, DDD.
Для коллектива это - еще одна неопределенность, которая может превратиться в еще одну проблему на их шее.
В силу "&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%BD%D0%B5%D0%BE%D0%B4%D0%BD%D0%BE%D0%B7%D0%BD%D0%B0%D1%87%D0%BD%D0%BE%D1%81%D1%82%D0%B8"&gt;Эффекта неоднозначности&lt;/a&gt;" предлагаемые изменения будут отвергнуты.&lt;/p&gt;
&lt;p&gt;Не пытайтесь доказать собеседнику его неправоту, потому что:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D0%BB%D0%B5%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5_%D0%B2%D0%BE%D1%81%D0%BF%D1%80%D0%B8%D1%8F%D1%82%D0%B8%D0%B5"&gt;Селективное восприятие&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BA%D0%BB%D0%BE%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D1%8C_%D0%BA_%D0%BF%D0%BE%D0%B4%D1%82%D0%B2%D0%B5%D1%80%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D1%8E_%D1%81%D0%B2%D0%BE%D0%B5%D0%B9_%D1%82%D0%BE%D1%87%D0%BA%D0%B8_%D0%B7%D1%80%D0%B5%D0%BD%D0%B8%D1%8F"&gt;Склонность к подтверждению своей точки зрения&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%94%D0%B0%D0%BD%D0%BD%D0%B8%D0%BD%D0%B3%D0%B0_%E2%80%94_%D0%9A%D1%80%D1%8E%D0%B3%D0%B5%D1%80%D0%B0"&gt;Эффект Даннинга — Крюгера&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://architectelevator.com/strategy/always-be-right/"&gt;Вы и сами можете ошибаться.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Мне известен только один действенный способ провести изменения, это - &lt;a class="reference external" href="https://less.works/ru/less/principles/systems-thinking.html"&gt;идентифицировать проблемы&lt;/a&gt;, и в ответ на &lt;strong&gt;конкретные проблемы&lt;/strong&gt; предлагать &lt;strong&gt;конкретные решения&lt;/strong&gt;.
Например, если проблему решает один из тактических паттернов DDD, то не нужно настаивать на переходе на DDD полностью.
Если проблему решает "&lt;a class="reference external" href="https://www.pmi.org/disciplined-agile/lifecycle/program"&gt;Program Management&lt;/a&gt;", то &lt;a class="reference external" href="https://www.scrum.org/resources/blog/scaling-scrum-nexus-and-kanban"&gt;не нужно настаивать на переходе на SAFe или DAD полностью&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Также учтите, что &lt;a class="reference external" href="https://www.hindawi.com/journals/np/2009/482696/"&gt;мозгу нужно время&lt;/a&gt;, чтобы осознать решение и рассеять неопределенность.
Поэтому, не спешите.
Вернитесь к вопросу несколько раз через время.
Вода камень точит.
Видели как море режет скалы?
Обязательно посмотрите - вдохновляет.
Стекающие капельки воды прорезают в камне бороздки и углубляют их до тех пор, пока глыба не обрушится.
Капля против скалы!
А вы - больше, чем капля.
Терпенье и труд, как говорится...&lt;/p&gt;
&lt;p&gt;Этот пример учит еще одному - чем меньше гранулярность изменений, тем выше вероятность их принятия.
Это важно, ибо силовое превосходство не на вашей стороне.
Чтобы повысить удельное давление, нужно уменьшить площадь воздействия.
Побеждает не тот, кто сильнее, а тот, кто способен создать силовое превосходство в нужное время в нужном месте.&lt;/p&gt;
&lt;p&gt;В крайнем случае, сработает "&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D1%81%D0%BA%D0%B0%D0%B4_%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%BD%D0%BE%D0%B9_%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D0%B8"&gt;Каскад доступной информации&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;Как говорил Генри Форд, &lt;em&gt;"качество — это делать что-либо правильно, даже когда никто не смотрит"&lt;/em&gt;.
Единственный способ этого достигнуть - это единое понимание и полнота информированности коллектива.
Достигается это проливанием света на недостающие связи между причиной и следствием.
Изменения должны происходить снизу, от самоорганизующегося коллектива, а не спускаться директивно сверху.
Важно уметь не внедрить изменения, а инициировать и подпитывать их.
Больше слушать, спрашивать, меньше говорить.&lt;/p&gt;
&lt;p&gt;Отличная книга по теме:
- "Social psychology" 13th edition by David G. Myers. Перевод: "Социальная психология" / Майерс Д. Пер. с англ. З. Замчук; Зав. ред. кол. Л. Винокуров. — 7-е изд. — СПб.: Питер, 2006.&lt;/p&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;См.также&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"&lt;a class="reference internal" href="icebreaker-principle.html"&gt;&lt;span class="doc"&gt;Принцип ледокола&lt;/span&gt;&lt;/a&gt;"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Sun, 02 Jan 2022 00:00:00 </pubDate></item><item><title>Критерии качества Agile Requirements</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/models/agile/analysis/requirements/requirements-criteria.html</link><description>
&lt;span id="emacsway-agile-requirements-criteria"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Существуют критерии качества к User Story, известные под акронимом INVEST (Independent, Negotiable, Valuable, Estimable, Small, Testable).&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "The acronym INVEST helps to remember a widely accepted set of criteria, or checklist, to assess the quality of a user story."&lt;/p&gt;
&lt;p&gt;📝 "A good user story should be: I.N.V.E.S.T."&lt;/p&gt;
&lt;p class="attribution"&gt;—Официальный сайт Agile Alliance, &lt;a class="reference external" href="https://www.agilealliance.org/glossary/invest/"&gt;glossary&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Первоисточник акронима INVEST можно посмотреть здесь: "&lt;a class="reference external" href="https://xp123.com/articles/invest-in-good-stories-and-smart-tasks/"&gt;INVEST in Good Stories, and SMART&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;В данном первоисточнике упоминается акроним SMART.
Аналитикам он хорошо знаком, потому что он используется при написании требований:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "When writing quality requirements, keep in mind the useful SMART mnemonic—make them Specific, Measurable, Attainable, Relevant, and Time-sensitive."&lt;/p&gt;
&lt;p class="attribution"&gt;—"Software Requirements (Developer Best Practices)" 3rd Edition by Karl Wiegers&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;SMART можно встретить в &lt;a class="reference external" href="https://www.agilealliance.org/wp-content/uploads/2016/01/Adressing-NFR-with-agile-practices-English-dec-16th.pdf"&gt;презентации по оформлению нефункциональных требований&lt;/a&gt; на сайте Agile Alliance.&lt;/p&gt;
</description><pubDate>Sun, 02 Jan 2022 00:00:00 </pubDate></item><item><title>Что такое Prediction</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/uncertainty-management/prediction/prediction.html</link><description>
&lt;span id="emacsway-prediction"/&gt; 
&lt;p&gt;К Prediction (Прогнозированию) относится ряд активностей на основе правил логического вывода, предшествующих производству Системного Инкремента и направленных на заблаговременное разрешение неопределенности.
К ним относятся Business/System Requirements Definition and Analysis, Architecture Definition, Design Definition, разработка макетов UX/UI-Design, Estimation и Planning.&lt;/p&gt;
&lt;p&gt;В Scrum эти активности традиционно выражаются в событиях, предшествующих Definition Of Ready (DOR):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;Со стороны Product Owner:&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Reveal needs of stakeholders&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating PBI&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;Со стороны Team:&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PBR&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Planning&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spike&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Основная проблема Prediction заключается в том, что характер роста стоимости Прогнозирования, в зависимости от его точности, близок к экспоненциальному.
В то время как характер роста бизнес-выгод от точности Прогнозирования близок к логарифмическому.
Пересечение этих графиков образует предел экономической целесообразности разрешения неопределенности путем Прогнозирования.
Здесь подразумевается, что стоимость самой реализации уже вычтена из бизнес-выгод.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;📝 "There is a fundamental truth to work breakdown structure estimation - the only way to estimate using a work breakdown structure to really accurately to get the number right is to implement the project.
Then you'll have the estimate.&lt;/p&gt;
&lt;p&gt;The cost of improving the estimate, the initial work breakdown estimation, the cost of refining that grows exponentially.
With every next layer you want to take it down.
And the benefit of doing that does not grow exponentially.
It grows logarithmically.&lt;/p&gt;
&lt;p&gt;Managers understand there is an extremely high cost involved with refining the estimate."&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://youtu.be/eisuQefYw_o?t=1995"&gt;"YOW! 2016 Robert C. Martin - Effective Estimation (or: How not to Lie)" at 33:15&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Robert C. Martin упомянул о таком способе обработки неопределенности, как реализовать Проект (или Системный Инкремент).
Это уже другой, эмпирический (т.е. опытным путем) способ обработки неопределенности, который называется &lt;a class="reference internal" href="../adaptation/adaptation.html#emacsway-adaptation"&gt;&lt;span class="std std-ref"&gt;Adaptation&lt;/span&gt;&lt;/a&gt; и составляет основу итеративной разработки.
Чем сложнее предметная область Проекта, тем раньше наступает предел экономической целесообразности Prediction.&lt;/p&gt;
</description><pubDate>Sun, 02 Jan 2022 00:00:00 </pubDate></item><item><title>Краткий курс по экономике разработки программного обеспечения</title><link>https://dckms.github.io/system-architecture/emacsway/it/sdlc/adaptation/crash-course-in-software-development-economics.html</link><description>
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Краткий курс по экономике разработки программного обеспечения:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;«Extreme Programming Explained» 1st edition by Kent Beck&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;«Chapter 3. Economics of Software Development»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Chapter 17. Design Strategy»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Chapter 24. What Makes XP Hard»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;«Essential Scrum: A Practical Guide to the Most Popular Agile Process» by Kenneth Rubin&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;«Chapter 3. Agile Principles»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Chapter 8. Technical Debt»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;«Software Engineering: A Practitioner’s Approach» 9th edition by Roger S. Pressman, Bruce Maxim&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;«3.2 Agility and the cost of change»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;«Software Architecture in Practice» 3d edition by Len Bass, Paul Clements, Rick Kazman&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;«Chapter 7. Modifiability»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Chapter 23. Economic analysis of architectures»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;«Refactoring: Improving the Design of Existing Code» 1st (and 2nd) edition by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;«Chapter 2. Principles in Refactoring»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;«Clean Architecture: A Craftsman’s Guide to Software Structure and Design» by Robert C. Martin&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;«Chapter 1. What Is Design and Architecture?»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://martinfowler.com/bliki/Yagni.html"&gt;Yagni&lt;/a&gt;» (хорошо разъясняет виды экономических ущербов: «cost of build», «cost of delay», «cost of carry», «cost of repair», «cost of removing»)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://martinfowler.com/bliki/TechnicalDebt.html"&gt;Technical Debt&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://martinfowler.com/bliki/TechnicalDebtQuadrant.html"&gt;Technical Debt Quadrant&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://architectelevator.com/architecture/architecture-options/"&gt;Architecture: Selling Options&lt;/a&gt;» by Gregor Hohpe. How do you explain the value of architecture to business stakeholders? Deferring to the Nobel-prize winning economists Black and Scholes can work surprisingly well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://martinfowler.com/bliki/DesignPayoffLine.html"&gt;Design Payoff Line&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://martinfowler.com/bliki/DesignStaminaHypothesis.html"&gt;Design Stamina Hypothesis&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://martinfowler.com/articles/is-quality-worth-cost.html"&gt;Is High Quality Software Worth the Cost?&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="http://sergeyteplyakov.blogspot.com/2016/08/yagni.html"&gt;Принцип YAGNI&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://less.works/less/principles/systems-thinking.html"&gt;Systems thinking&lt;/a&gt;» (&lt;a class="reference external" href="https://less.works/ru/less/principles/systems-thinking.html"&gt;на русском&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=8299"&gt;Modifiability&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;См. также: &lt;a class="reference external" href="https://t.me/emacsway_log/125"&gt;https://t.me/emacsway_log/125&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Источник: &lt;a class="reference external" href="https://t.me/emacsway_log/459"&gt;https://t.me/emacsway_log/459&lt;/a&gt;&lt;/p&gt;
</description><pubDate>Fri, 31 Dec 2021 00:00:00 </pubDate></item><item><title>Как осуществлять изменения в коллективе</title><link>https://dckms.github.io/system-architecture/emacsway/soft-skills/how-to-provide-changes.html</link><description>
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;На протяжении своей практики я регулярно наблюдал одну и ту же картину: кто-то из сотрудников узнал что-то новое, или же был принят на работу сотрудник с новыми знаниями (например, DDD, архитектурные, методологические, процессные подходы и т.п.), но, странное дело, новая идея получает не поддержку, а сопротивление коллектива, хотя и могла бы облегчить жизнь многим.&lt;/p&gt;
&lt;p&gt;Далее одно из двух - либо напряженность нарастает, и наступает разрыв отношений, либо человек смиряется, проявив «&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%BD%D0%BE%D1%81%D1%82%D1%8C"&gt;Внешний конформизм&lt;/a&gt;».&lt;/p&gt;
&lt;p&gt;Последний вариант опасен тем, что для человека намного проще согласиться с существующим положением дел, и, чтобы подавить «&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%B3%D0%BD%D0%B8%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B9_%D0%B4%D0%B8%D1%81%D1%81%D0%BE%D0%BD%D0%B0%D0%BD%D1%81"&gt;Когнитивный диссонанс&lt;/a&gt;», человек старается всеми силами преувеличить существенность принятого им решения, одновременно приуменьшая важность отвергнутого.
Вследствие этого альтернатива теряет всякую привлекательность в его глазах.&lt;/p&gt;
&lt;p&gt;Далее наступает «&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%98%D1%81%D0%BA%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_%D0%B2%D0%BE%D1%81%D0%BF%D1%80%D0%B8%D1%8F%D1%82%D0%B8%D0%B8_%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B2%D1%8B%D0%B1%D0%BE%D1%80%D0%B0"&gt;Искажение в восприятии сделанного выбора&lt;/a&gt;» и «&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%98%D1%80%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D1%83%D1%81%D0%B8%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5"&gt;Закон иррационального усиления&lt;/a&gt;», и, из сторонника изменений, человек превращается в реакциониста, находя в этом «&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D1%89%D0%B8%D1%82%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%B7%D0%BC"&gt;Психологическую защиту&lt;/a&gt;».&lt;/p&gt;
&lt;p&gt;Наверняка вы слышали в своей практике такие фразы, как «я тоже был таким когда-то…», «юношеский максимализм» и т.п.&lt;/p&gt;
&lt;p&gt;Но бывает и третий вариант - человеку удается изменить среду.
В конце концов, существующая среда была кем-то создана.
Почему одним это удается, а другим нет?&lt;/p&gt;
&lt;p&gt;По моим наблюдениям, условием снижения напряженности является выравнивание уровня знаний.
Вероятность разрыва отношений выше в ригидных коллективах с низкой обучаемостью.
Поэтому, первая задача, которую предстоит решить, - это изменить систему ценностей коллектива, и возвести знания в элемент престижа.&lt;/p&gt;
&lt;p&gt;Никогда не предлагайте внедрения какого-либо нового подхода, например, DDD.
Для коллектива это - еще одна неопределенность, которая может превратиться в еще одну проблему на их шее.
В силу «&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%BD%D0%B5%D0%BE%D0%B4%D0%BD%D0%BE%D0%B7%D0%BD%D0%B0%D1%87%D0%BD%D0%BE%D1%81%D1%82%D0%B8"&gt;Эффекта неоднозначности&lt;/a&gt;» предлагаемые изменения будут отвергнуты.&lt;/p&gt;
&lt;p&gt;Не пытайтесь доказать собеседнику его неправоту, потому что:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D0%BB%D0%B5%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5_%D0%B2%D0%BE%D1%81%D0%BF%D1%80%D0%B8%D1%8F%D1%82%D0%B8%D0%B5"&gt;Селективное восприятие&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BA%D0%BB%D0%BE%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D1%8C_%D0%BA_%D0%BF%D0%BE%D0%B4%D1%82%D0%B2%D0%B5%D1%80%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D1%8E_%D1%81%D0%B2%D0%BE%D0%B5%D0%B9_%D1%82%D0%BE%D1%87%D0%BA%D0%B8_%D0%B7%D1%80%D0%B5%D0%BD%D0%B8%D1%8F"&gt;Склонность к подтверждению своей точки зрения&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%94%D0%B0%D0%BD%D0%BD%D0%B8%D0%BD%D0%B3%D0%B0_%E2%80%94_%D0%9A%D1%80%D1%8E%D0%B3%D0%B5%D1%80%D0%B0"&gt;Эффект Даннинга — Крюгера&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://architectelevator.com/strategy/always-be-right/"&gt;Вы и сами можете ошибаться.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Мне известен только один действенный способ провести изменения, это - &lt;a class="reference external" href="https://less.works/ru/less/principles/systems-thinking.html"&gt;идентифицировать проблемы&lt;/a&gt;, и в ответ на &lt;strong&gt;конкретные проблемы&lt;/strong&gt; предлагать &lt;strong&gt;конкретные решения&lt;/strong&gt;.
Например, если проблему решает один из тактических паттернов DDD, то не нужно настаивать на переходе на DDD полностью.
Если проблему решает «&lt;a class="reference external" href="https://www.pmi.org/disciplined-agile/lifecycle/program"&gt;Program Management&lt;/a&gt;», то &lt;a class="reference external" href="https://www.scrum.org/resources/blog/scaling-scrum-nexus-and-kanban"&gt;не нужно настаивать на переходе на SAFe или DAD полностью&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Также учтите, что &lt;a class="reference external" href="https://www.hindawi.com/journals/np/2009/482696/"&gt;мозгу нужно время&lt;/a&gt;, чтобы осознать решение и рассеять неопределенность.
Поэтому, не спешите.
Вернитесь к вопросу несколько раз через время.
Вода камень точит.
Видели как море режет скалы?
Обязательно посмотрите - вдохновляет.
Стекающие капельки воды прорезают в камне бороздки и углубляют их до тех пор, пока глыба не обрушится.
Капля против скалы!
А вы - больше, чем капля.
Терпенье и труд, как говорится…&lt;/p&gt;
&lt;p&gt;Этот пример учит еще одному - чем меньше гранулярность изменений, тем выше вероятность их принятия.
Это важно, ибо силовое превосходство не на вашей стороне.
Чтобы повысить удельное давление, нужно уменьшить площадь воздействия.
Побеждает не тот, кто сильнее, а тот, кто способен создать силовое превосходство в нужное время в нужном месте.&lt;/p&gt;
&lt;p&gt;В крайнем случае, сработает «&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D1%81%D0%BA%D0%B0%D0%B4_%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%BD%D0%BE%D0%B9_%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D0%B8"&gt;Каскад доступной информации&lt;/a&gt;».&lt;/p&gt;
&lt;p&gt;Как говорил Генри Форд, &lt;em&gt;«качество — это делать что-либо правильно, даже когда никто не смотрит»&lt;/em&gt;.
Единственный способ этого достигнуть - это единое понимание и полнота информированности коллектива.
Достигается это проливанием света на недостающие связи между причиной и следствием.
Изменения должны происходить снизу, от самоорганизующегося коллектива, а не спускаться директивно сверху.
Важно уметь не внедрить изменения, а инициировать и подпитывать их.
Больше слушать, спрашивать, меньше говорить.&lt;/p&gt;
&lt;p&gt;Отличная книга по теме:
- «Social psychology» 13th edition by David G. Myers. Перевод: «Социальная психология» / Майерс Д. Пер. с англ. З. Замчук; Зав. ред. кол. Л. Винокуров. — 7-е изд. — СПб.: Питер, 2006.&lt;/p&gt;
&lt;p&gt;Источник: &lt;a class="reference external" href="https://t.me/emacsway_log/621"&gt;https://t.me/emacsway_log/621&lt;/a&gt;&lt;/p&gt;
</description><pubDate>Wed, 24 Nov 2021 00:00:00 </pubDate></item><item><title>Список литературы для самообучения разработчика программного обеспечения</title><link>https://dckms.github.io/system-architecture/emacsway/it/self-learning/self-learning-for-software-engineer.html</link><description>
&lt;span id="id1"/&gt; 
&lt;p&gt;&lt;em&gt;Автор раздела: Ivan Zakrevsky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Один из частых вопросов, который я наблюдаю регулярно, - это «посоветуйте список литературы в области разработки программного обеспечения».
В этой статье я изложу свое видение самообучения и приведу список тематической литературы, с учетом моего личного опыта.&lt;/p&gt;
&lt;div class="contents topic" id="id2"&gt;
&lt;p class="topic-title"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#index-0" id="id39"&gt;Список литературы для самообучения разработчика программного обеспечения&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id40"&gt;Предисловие&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id41"&gt;Кандидатский минимум&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id5" id="id42"&gt;Учимся обучению&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id6" id="id43"&gt;Изучаем основную используемую технологию&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id7" id="id44"&gt;Азбука программирования&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id8" id="id45"&gt;Учимся быть эффективным&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id9" id="id46"&gt;Учимся делать команду эффективной&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id10" id="id47"&gt;Изучаем операционную систему&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id11" id="id48"&gt;Изучаем основы алгоритмов и структур данных&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id12" id="id49"&gt;Изучаем математику&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id13" id="id50"&gt;Учимся архитектуре&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id14" id="id51"&gt;Изучаем распределенные системы&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id15" id="id52"&gt;Изучаем распределенные системы. Углубляем навыки.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ddd" id="id53"&gt;Изучаем DDD&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id16" id="id54"&gt;Статьи на частые вопросы по DDD&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#aggregate-domain-modeling" id="id55"&gt;Aggregate &amp;amp; Domain Modeling&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#cqrs-event-sourcing" id="id56"&gt;CQRS &amp;amp; Event Sourcing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#bounded-context-and-microservices" id="id57"&gt;Bounded Context and Microservices&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#domain-events" id="id58"&gt;Domain Events&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#api-design" id="id59"&gt;API-Design&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#event-storming" id="id60"&gt;Event Storming&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#modelling" id="id61"&gt;Modelling&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id17" id="id62"&gt;Дополнительная литература (на выбор)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#sdls" id="id63"&gt;SDLS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#single-team-agile" id="id64"&gt;Single-Team Agile&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#scaled-agile" id="id65"&gt;Scaled Agile&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id18" id="id66"&gt;Стандарты&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id19" id="id67"&gt;Менеджмент&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id20" id="id68"&gt;Развитие личностных профессиональных качеств&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id21" id="id69"&gt;Базы данных&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id22" id="id70"&gt;Изучаем распределенные системы. Третий заход.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id23" id="id71"&gt;API-Design&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#streaming-processing" id="id72"&gt;Streaming Processing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id24" id="id73"&gt;Углубляем DDD&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id25" id="id74"&gt;Изучаем проектирование&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#posa" id="id75"&gt;POSA&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id26" id="id76"&gt;Алгоритмы. Второй заход.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id27" id="id77"&gt;Тестирование&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id28" id="id78"&gt;Компиляторы&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id29" id="id79"&gt;Архитектура&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id30" id="id80"&gt;Аналитика&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id31" id="id81"&gt;Изучаем оценивание задач&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id32" id="id82"&gt;Функциональное программирование&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id33" id="id83"&gt;Справочники&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id34" id="id84"&gt;Справочная информация&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#body-of-knowledge" id="id85"&gt;Body of Knowledge&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id35" id="id86"&gt;ГОСТы&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#online" id="id87"&gt;Online-каталоги&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#code-smell-catalogs" id="id88"&gt;Code Smell catalogs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id36" id="id89"&gt;Другие подборки литературы&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id37" id="id90"&gt;Почтовые рассылки и сообщества&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#reference-applications-ru" id="id91"&gt;Эталонные демонстрационные приложения&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id40"&gt;Предисловие&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Классическая ошибка новичков - жажда к знаниям, нетерпеливость.
Обычно это приводит к тому, что, в погоне за количеством, они надрываются (объем знаний, который предстоит освоить, действительно, огромный), осознают невыполнимость желаемого, впадают в депрессию, а затем и в состояние &lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D1%89%D0%B8%D1%82%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%B7%D0%BC"&gt;психологической защиты&lt;/a&gt; (мол, «академичность» неуместна на практике), и прекращают развиваться.
Решается эта проблема очень просто - жажда должна быть не к знаниям, а к дисциплине.
А уж дисциплина обязательно приведет к обретению знаний.
Дисциплина - это, своего рода, производная знаний.
Она поддерживает постоянную скорость на пути освоения знаний.
Сперва нужно выработать привычку, а затем привычка будет работать на вас.
Как говорится, сохраняйте порядок, и порядок сохранит вас.&lt;/p&gt;
&lt;p&gt;Достаточно читать по 5 страниц в день.
Тут главное - стабильность.
Пусть будет по чуть-чуть, но постоянно.
Дисциплина - мать победы, говорил А.В. Суворов.
Гнаться за количеством не нужно.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;«A little reading goes a long way toward professional advancement. If you read even one
good programming book every two months, roughly 35 pages a week, you’ll soon have
a firm grasp on the industry and distinguish yourself from nearly everyone around you.»&lt;/p&gt;
&lt;p&gt;- «Code Complete» by Steve McConnell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;«We become authorities and experts in the practical and scientific spheres
by so many separate acts and hours of work.
If a person keeps faithfully busy each hour of the working day,
he can count on waking up some morning to find himself one of the competent
ones of his generation.»&lt;/p&gt;
&lt;p&gt;- William James, cited by Steve McConnell in «Code Complete»&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;И, желательно, чтобы читаемая книга совпадала с тематикой текущего проекта, чтобы через практику хорошо легла в память.
Я по этой причине часто изменял свой график чтения.
Обычно я читал в параллели 2-3 книги. Одну - планово, другие - по потребностям проекта.&lt;/p&gt;
&lt;p&gt;Еще одной ошибкой является неудачный выбор литературы.
Сегодня штампуется много литературы, но далеко не каждая книга достойна внимания.
&lt;a class="reference external" href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BA%D0%BE%D0%BD_%D0%9F%D0%B0%D1%80%D0%B5%D1%82%D0%BE"&gt;Закон Парето&lt;/a&gt; работает и здесь.&lt;/p&gt;
&lt;p&gt;Хорошей вещью для систематизации собственных знаний является написание статей и участие в профессиональных дискуссиях.
Ничто так не систематизирует собственные знания, как попытка объяснить что-то другому человеку.
Вы, конечно, будете периодически ошибаться, но для кристализации знаний это лучше, чем ничего не делать.
К тому же, это хорошо развивает сдержанность в аргументации, что немаловажно.&lt;/p&gt;
&lt;p&gt;На первых порах критически важно участвовать в Open Source проектах.
Можно завести свои собственные Open Source проекты.
Можно принимать участие в каких-то существующих проектах с авторитетными комьюнити, которые будут помогать избавляться от ошибок.
В любом случае, не надейтесь на то, что профессиональные проекты предоставят вам достаточную практику для закрепления знаний.
А Open Source проекты - очень даже предоставят.
Я даже считаю, что практика должна предшествовать теории, потому что трудно запомнить какое-то решение, если вам на практике не знакома решаемая проблема.
Потребность в теории должна назреть.
Когда я приступал к теории, то у меня был накоплен уже солидный багаж проблем, решение которых я искал.
Когда я впервые прочитал о мотивации паттерна Bridge, у меня в голове промелькнуло: «так вот, оказывается, как решается та самая проблема».
Когда я читал каталог Code Smells, я частенько вспоминал свой код.
В результате, решения навечно запечатлелись в памяти.&lt;/p&gt;
&lt;p&gt;Очень правильно &lt;a class="reference external" href="https://sergeyteplyakov.blogspot.com/2017/02/reading-books-considered-harmful.html"&gt;сказал&lt;/a&gt; Сергей Тепляков: «Полноценное обучение – это не теория vs. практика. Это комбинация этих вещей, при этом процент одного и другого зависит от человека и изучаемой темы.»&lt;/p&gt;
&lt;p&gt;Ну и, главное, не впадать в фанатизм.
Засасывает.
Нужно себя уравновешивать другими интересами, семья, спорт, физкультура, шашлыки, друзья, путешествия…
Непредвзятый и свободный взгляд намного важнее изобилия знаний.
Путешествие должно быть на легке, как говорил Кент Бек.
По сути, знания нужны только для того, чтобы избавиться от всего лишнего.
Архитектура - это, на самом деле, наука об ограничениях (т.е. о том, как не надо делать).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id41"&gt;Кандидатский минимум&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id42"&gt;Учимся обучению&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Это может показаться немного удивительным, но первая книга будет посвящена не техническим знаниям, а вопросам самоорганизации, управления временем, психологии, методикам работы под стрессом, оцеванию задач по разработке программного обеспечения, вопросам коммуникации и поведению в конфликтных ситуациях, и, самое главное, - науке быть правдивым.
Именно правдивость является важнейшим отличительным признаком настоящего профессионала.
И это не так просто, как может показаться на первый взгляд.
Есть разница между кодером и профессионалом.
И эта книга о том, как стать профессионалом.
Без знаний, изложенных в этой книге, вы просто не сможете изыскать время на самообучение, и список остальных книг вам может просто не понадобиться:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«The Clean Coder» by Robert C. Martin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id43"&gt;Изучаем основную используемую технологию&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Следующая книга должна быть посвящена основной используемой технологии, т.е. синтаксическим возможностям языка программирования.
Для Python-разработчиков хорошим выбором была бы книга:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Learning Python» 5th edition by Mark Lutz&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для Golang интересно выглядят книги:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Hands-On Software Architecture with Golang. Design and architect highly scalable and robust applications using Go» by Jyotiswarup Raiturkar&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Go Programming Language» by Alan A.A. Donovan Google Inc., Brian W. Kernighan Princeton University&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для Erlang:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Programming Erlang: Software for a Concurrent World (Pragmatic Programmers)» 2nd edition by Joe Armstrong&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для frontend-разработчиков, работающих с Angular, имеет смысл обратить внимание на книгу:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«ng-book2. The Complete Book on Angular 6» by Nate Murray, Felipe Coury, Ari Lerner, and Carlos Taborda&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id44"&gt;Азбука программирования&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Подразумевается что вы уже хорошо знаете синтаксис основного языка программирования.
Но, знание букв еще не делает вас поэтом.
Следующие книги являются азбукой программирования.
Я привожу их в таком порядке, в каком я рекомендую их прочтение:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Design Patterns: Elements of Reusable Object-Oriented Software» by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Patterns of Enterprise Application Architecture» by Martin Fowler, David Rice, Matthew Foemmel, Edward Hieatt, Robert Mee, Randy Stafford&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Refactoring: Improving the Design of Existing Code» 1st edition by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Clean Code: A Handbook of Agile Software Craftsmanship» by Robert C. Martin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Code Complete» 2nd edition by Steve McConnell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«UML Distilled. A Brief Guide to the Standard Object Modeling Language» 3d edition by Martin Fowler&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://people.apache.org/~fhanik/kiss.html"&gt;KISS Principles&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id45"&gt;Учимся быть эффективным&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Знаний предыдущих пяти книг достаточно для того, чтобы вы стали работать в разы эффективней.
Но нужно не только знать, а еще и &lt;a class="reference internal" href="../tdd/tdd.html"&gt;&lt;span class="doc"&gt;уметь быть эффективным на практике&lt;/span&gt;&lt;/a&gt;.
Никто не раскрывает этот вопрос лучше, чем Kent Beck:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Test-Driven Development By Example» by Kent Beck&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id46"&gt;Учимся делать команду эффективной&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Следующий барьер - умение сделать команду эффективной.
Вы не сможете быть эффективным в изоляции, поскольку ваша эффективность определяется качеством кодовой базы, а она разрабатывается всей командой.
Или вы сделаете команду эффективной, или ваша эффективность так и останется мечтательством.
Опять же, лучший наставник в этих вопросах - Kent Beck:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Extreme Programming Explained» 1st edition by Kent Beck&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;На данном этапе, этой книги достаточно.
Обратите внимание, я советую именно первое издание, так как оно лучше раскрывает смысл и назначение &lt;a class="reference external" href="https://emacsway.github.io/ru/it/agile/easily-about-agile-way-to-rapid-development/"&gt;Agile разработки&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id47"&gt;Изучаем операционную систему&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Вот по операционным системам я мало что могу посоветовать, так как низкоуровневым программированием я практически не занимался.
Но вам обязательно нужно получить представление о том, как работают регистры процессора, память, и как управлять операционной системой.&lt;/p&gt;
&lt;p&gt;Я в свое время читал эти книги (к сожалению, сегодня они устарели):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«The Linux® Kernel Primer: A Top-Down Approach for x86 and PowerPC Architectures» by Claudia Salzberg Rodriguez, Gordon Fischer, Steven Smolski&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Digital computers and microprocessors» by Aliyev / «Цифровая вычислительная техника и микропроцессоры» М.М.Алиев&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;А вот этот справочник у меня всегда под рукой:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Unix and Linux System Administration Handbook» 5th edition by Evi Nemeth, Garth Snyder, Trent R. Hein, Ben Whaley, Dan Mackin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id48"&gt;Изучаем основы алгоритмов и структур данных&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Алгоритмы хоть и используются редко в прикладной разработке (если вы только не пишете поисковые системы, системные утилиты, языки программирования и операционные системы, системы маршрутизации, биржевые анализаторы и т.п.), но знать хотя бы базовые основы необходимо.
Существует книга, которая за двести с небольшим страниц может дать эти базовые основы в легкой и популярной форме:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Algorithms Unlocked» 3d edition by Thomas H. Cormen&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Данная книга не акцентируется на математике, что, с одной стороны, облегчает освоение материала, но, с другой стороны, оставляет невосполненным важный аспект профессиональных знаний.
К счастью, существует книга, которая обеспечивает легкий вход в алгоритмы, включая их математический анализ:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Introduction to the Design and Analysis of Algorithms» 3d edition by A.Levitin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;При чтении этой книги могут возникать вопросы справочного характера по математике, ответы на которые можно найти в приложении этой книги (Appendix A: Useful Formulas for the Analysis of Algorithms, Appendix B: Short Tutorial on Recurrence Relations), в математических справочниках (например, М.Я. Выгодского, А.А. Гусака) или в справочном разделе по математике «VIII Appendix: Mathematical Background» книги «Introduction to Algorithms» 3d edition by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein.&lt;/p&gt;
&lt;p&gt;В качестве минималистичного ликбеза по теоретическим основам может неплохо подойти книга:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Computer Science Distilled» by Wladston Ferreira Filho&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Она содержит минималистичные основы математики (логика, комбинаторика, вероятность), алгоритмы и структуры данных, основы Баз Данных (RDBMS, NoSQL), описание Парадигм Программирования и основы архитектуры железа.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id49"&gt;Изучаем математику&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Существует монументальная книга, которую стоит упомянуть отдельно (обратите внимание на фамилии авторов, которые в представлении не нуждаются).
Чтобы не тормозить общий процесс обучения, ее лучше читать в параллельно-фоновом режиме.
К тому же математические знания следует всегда поддерживать в актуальном состоянии, и регулярно освежать их в голове в фоновом режиме.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Concrete Mathematics: A Foundation for Computer Science» 2nd edition by Ronald L. Graham, Donald E. Knuth, Oren Patashnik&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Эта книга дает прекрасную математическую базу для функционального программирования.
И хорошо заходит в сочетании с «The Art Of Computer Programming» Volume 1 3d edition by Donald Knuth, поскольку у них многие темы пересекаются и раскрываются с разных точек зрения, что дает полноту понимания.
Справочник математических нотаций в конце книги нередко оказывается полезным.&lt;/p&gt;
&lt;p&gt;Книги по математике и алгоритмам - сложные книги, и я хотел бы поделиться одним советом, который я услышал еще в студенчестве.
Если что-то непонятно - прочитай три раза:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Первый раз просто прочитай, оставив попытки что-то понять, - нужно просто получить обзорность материала.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Второй раз прочитай уже пытаясь слегка вникать.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;И третий раз прочитай уже вникая полностью.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id50"&gt;Учимся архитектуре&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Теперь можно приступить и к архитектуре:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Clean Architecture: A Craftsman’s Guide to Software Structure and Design» by Robert C. Martin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id51"&gt;Изучаем распределенные системы&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«NoSQL Distilled. A Brief Guide to the Emerging World of Polyglot Persistence.» by Pramod J. Sadalage, Martin Fowler&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Building Microservices. Designing Fine-Grained Systems» 2nd edition by Sam Newman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="http://ksat.me/a-plain-english-introduction-to-cap-theorem"&gt;A plain english introduction to CAP Theorem&lt;/a&gt;» (&lt;a class="reference external" href="https://habr.com/ru/post/130577/"&gt;Russian&lt;/a&gt;) by Kaushik Sathupadi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="http://ksat.me/map-reduce-a-really-simple-introduction-kloudo"&gt;Map Reduce: A really simple introduction&lt;/a&gt;» by Kaushik Sathupadi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.allthingsdistributed.com/2008/12/eventually_consistent.html"&gt;Eventually Consistent - Revisited&lt;/a&gt;» by Werner Vogels&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="http://book.mixu.net/distsys/"&gt;Distributed systems: for fun and profit&lt;/a&gt;» (2013). An introduction to distributed systems. (&lt;a class="reference external" href="https://github.com/mixu/distsysbook"&gt;source code&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://martin.kleppmann.com/2020/11/18/distributed-systems-and-elliptic-curves.html"&gt;Lecture notes (PDF) (including exercises)&lt;/a&gt;» by Martin Kleppmann (&lt;a class="reference external" href="https://www.cl.cam.ac.uk/teaching/2021/ConcDisSys/dist-sys-notes.pdf"&gt;download&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/ept/dist-sys"&gt;source code&lt;/a&gt;, &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB"&gt;video&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://github.com/ept/ddia-references"&gt;Literature references for «Designing Data-Intensive Applications»&lt;/a&gt;» by Martin Kleppmann&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://crdt.tech/"&gt;Resources and community around CRDT technology - papers, blog posts, code and more.&lt;/a&gt;» by Martin Kleppmann (&lt;a class="reference external" href="https://github.com/ept/crdt-website"&gt;source code&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id52"&gt;Изучаем распределенные системы. Углубляем навыки.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Книг по этой теме предстоит прочитать слишком много.
Вряд-ли ваша работа будет ждать, пока вы прочитаете их все.
К счастью, сообщество .NET разработчиков подготовило краткий справочник, который заменит вам прочтение десятка книг:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/index"&gt;.NET Microservices: Architecture for Containerized .NET Applications&lt;/a&gt;» edition v2.2.1 (&lt;a class="reference external" href="https://aka.ms/microservicesebook"&gt;mirror&lt;/a&gt;) by Cesar de la Torre, Bill Wagner, Mike Rousos&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;К этой книге существует эталонное приложение, которое наглядно демонстрирует практическое применение изложенной в книге информации:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/dotnet-architecture/eShopOnContainers"&gt;https://github.com/dotnet-architecture/eShopOnContainers&lt;/a&gt; (CQRS, DDD, Microservices)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Еще одно хорошее краткое руководство от Microsoft:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices/"&gt;Building microservices on Azure&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;И можно сюда включить еще и книгу:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-US/previous-versions/msp-n-p/jj554200(v=pandp.10)"&gt;CQRS Journey&lt;/a&gt;» by Dominic Betts, Julián Domínguez, Grigori Melnik, Fernando Simonazzi, Mani Subramanian&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;К ней также существует демонстрационное приложение:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/microsoftarchive/cqrs-journey"&gt;https://github.com/microsoftarchive/cqrs-journey&lt;/a&gt; (Event Sourcing, SAGA transactions)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ddd"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id53"&gt;Изучаем DDD&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Начинать я рекомендовал бы с прекрасного краткого руководства:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.oreilly.com/library/view/what-is-domain-driven/9781492057802/"&gt;What Is Domain-Driven Design?&lt;/a&gt;» by Vladik Khononov&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Или с более новой книги этого же автора:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Learning Domain-Driven Design: Aligning Software Architecture and Business Strategy» 1st Edition by Vlad Khononov&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Затем приступить к классике:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Domain-Driven Design» by Eric Evans&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://kalele.io/books/"&gt;Implementing Domain-Driven Design&lt;/a&gt;» by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Существуют краткие изложения этих двух книг по DDD.&lt;/p&gt;
&lt;p&gt;Краткие изложения «Domain-Driven Design» by Eric Evans:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://domainlanguage.com/ddd/reference/"&gt;Domain-Driven Design Reference&lt;/a&gt;» by Eric Evans&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.infoq.com/books/domain-driven-design-quickly/"&gt;Domain-Driven Design Quickly&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Краткое изложение «Implementing Domain-Driven Design» by Vaughn Vernon:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://kalele.io/books/"&gt;Domain-Driven Design Distilled&lt;/a&gt;» by V.Vernon&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id16"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id54"&gt;Статьи на частые вопросы по DDD&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://martinfowler.com/tags/domain%20driven%20design.html"&gt;Patterns related to Domain Driven Design&lt;/a&gt; by Martin Fowler&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="aggregate-domain-modeling"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id55"&gt;Aggregate &amp;amp; Domain Modeling&lt;/a&gt;&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/what-is-domain-logic/"&gt;What is domain logic?&lt;/a&gt;» by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/domain-vs-application-services/"&gt;Domain services vs Application services&lt;/a&gt;» by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/domain-model-isolation/"&gt;Domain model isolation&lt;/a&gt;» by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/email-uniqueness-as-aggregate-invariant/"&gt;Email uniqueness as an aggregate invariant&lt;/a&gt;» by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/how-to-know-if-your-domain-model-is-properly-isolated/"&gt;How to know if your Domain model is properly isolated?&lt;/a&gt;» by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/domain-model-purity-completeness/"&gt;Domain model purity vs. domain model completeness&lt;/a&gt;» by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/domain-model-purity-lazy-loading/"&gt;Domain model purity and lazy loading&lt;/a&gt;» by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/domain-model-purity-current-time/"&gt;Domain model purity and the current time&lt;/a&gt;» by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/immutable-architecture/"&gt;Immutable architecture&lt;/a&gt;» by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://enterprisecraftsmanship.com/posts/link-to-an-aggregate-reference-or-id/"&gt;Link to an aggregate: reference or Id?&lt;/a&gt;» by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://udidahan.com/2008/02/29/how-to-create-fully-encapsulated-domain-models/"&gt;How to create fully encapsulated Domain Models&lt;/a&gt;» by Udi Dahan&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://dddcommunity.org/library/vernon_2011/"&gt;Effective Aggregate Design&lt;/a&gt;» by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://github.com/ardalis/DDD-NoDuplicates"&gt;Designing a Domain Model to enforce No Duplicate Names&lt;/a&gt; by Steve Smith&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cqrs-event-sourcing"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id56"&gt;CQRS &amp;amp; Event Sourcing&lt;/a&gt;&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://zimarev.com/blog/event-sourcing/myth-busting/2020-07-09-overselling-event-sourcing/"&gt;Overselling Event Sourcing&lt;/a&gt;» by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://zimarev.com/blog/event-sourcing/microservices/"&gt;Event Sourcing and Microservices&lt;/a&gt;» by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://zimarev.com/blog/event-sourcing/projections/"&gt;Projections in Event Sourcing&lt;/a&gt;» by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://zimarev.com/blog/event-sourcing/cqrs/"&gt;Event Sourcing and CQRS&lt;/a&gt;» by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://zimarev.com/blog/event-sourcing/entities-as-streams/"&gt;Entities as event streams&lt;/a&gt;» by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://zimarev.com/blog/event-sourcing/introduction/"&gt;Event Sourcing basics&lt;/a&gt;» by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://eventstore.com/blog/what-is-event-sourcing/"&gt;What is Event Sourcing?&lt;/a&gt;» by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://eventstore.com/blog/event-sourcing-and-cqrs/"&gt;Event Sourcing and CQRS&lt;/a&gt;» by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/"&gt;CQRS, Task Based UIs, Event Sourcing agh!&lt;/a&gt;» by Greg Young&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf"&gt;CQRS Documents&lt;/a&gt;» by Greg Young&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://leanpub.com/esversioning"&gt;Versioning in an Event Sourced System&lt;/a&gt;» by Greg Young («&lt;a class="reference external" href="https://leanpub.com/esversioning/read"&gt;читать online&lt;/a&gt;», «&lt;a class="reference external" href="https://github.com/luque/Notes--Versioning-Event-Sourced-System"&gt;конспект книги&lt;/a&gt;»)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="http://udidahan.com/2009/12/09/clarified-cqrs/"&gt;Clarified CQRS&lt;/a&gt;» by Udi Dahan&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2012/08/22/busting-some-cqrs-myths/"&gt;Busting some CQRS myths&lt;/a&gt;» by Jimmy Bogard&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="bounded-context-and-microservices"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id57"&gt;Bounded Context and Microservices&lt;/a&gt;&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://vladikk.com/2018/01/21/bounded-contexts-vs-microservices/"&gt;Bounded Contexts are NOT Microservices&lt;/a&gt;» by Vladik Khononov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://vladikk.com/2018/02/28/microservices/"&gt;Tackling Complexity in Microservices&lt;/a&gt;» by Vladik Khononov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://youtu.be/Z0RgR9xIQE4"&gt;DDDDD: Bounded Contexts, Microservices, and Everything In Between&lt;/a&gt;» by Vladik Khononov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://kalele.io/reactive-microservices/"&gt;Reactive Microservices&lt;/a&gt;» by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://kalele.io/microservices-and-microservices/"&gt;Microservices and [Micro]services&lt;/a&gt;» by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://blog.avanscoperta.it/2020/06/11/about-bounded-contexts-and-microservices/"&gt;About Bounded Contexts and Microservices&lt;/a&gt;» by Alberto Brandolini&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices/model/domain-analysis"&gt;Using domain analysis to model microservices&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices/model/microservice-boundaries"&gt;Identifying microservice boundaries&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://medium.com/nick-tune-tech-strategy-blog/domains-subdomain-problem-solution-space-in-ddd-clearly-defined-e0b49c7b586c"&gt;Domain, Subdomain, Bounded Context, Problem/Solution Space in DDD: Clearly Defined&lt;/a&gt;» by Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://medium.com/@kentbeck_7670/monolith-services-theory-practice-617e4546a879"&gt;Monolith -&amp;gt; Services: Theory &amp;amp; Practice&lt;/a&gt;» by Kent Beck&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://martinfowler.com/articles/break-monolith-into-microservices.html#GoMacroFirstThenMicro"&gt;How to break a Monolith into Microservices :: Go Macro First, then Micro&lt;/a&gt;» by Zhamak Dehghani&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="domain-events"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id58"&gt;Domain Events&lt;/a&gt;&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference internal" href="../ddd/tactical-design/domain-model/domain-events/domain-events-in-ddd.html"&gt;&lt;span class="doc"&gt;Domain Events in DDD&lt;/span&gt;&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="api-design"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id59"&gt;API-Design&lt;/a&gt;&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices/design/api-design"&gt;Designing APIs for microservices&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design"&gt;Web API design&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-implementation"&gt;Web API implementation&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://github.com/Microsoft/api-guidelines"&gt;Microsoft REST API Guidelines&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/graph/query-parameters#filter-parameter"&gt;Microsoft Graph API&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752358"&gt;OData protocol&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://google.aip.dev/general"&gt;Google REST API Guidelines&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://microservice-api-patterns.org/"&gt;Microservice API Patterns&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://w3ctag.github.io/capability-urls/"&gt;Good Practices for Capability URLs&lt;/a&gt;», W3C Draft&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf"&gt;Web API Design - Crafting Interfaces that Developers Love&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://goodapi.co/blog/rest-vs-graphql"&gt;REST vs. GraphQL: A Critical Review&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://blog.logrocket.com/5-reasons-you-shouldnt-be-using-graphql-61c7846e7ed3/?gi=f67074d77004"&gt;5 reasons you shouldn’t be using GraphQL&lt;/a&gt;» (&lt;a class="reference external" href="https://medium.com/devschacht/esteban-herrera-5-reasons-you-shouldnt-use-graphql-bae94ab105bc"&gt;перевод на Русский&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.openapis.org/"&gt;OpenAPIs&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.asyncapi.com/"&gt;AsyncAPI&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="http://www.persvr.org/rql/"&gt;Resource Query Language (RQL)&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://jsonapi.org/"&gt;JSON:API&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://goessner.net/articles/JsonPath/"&gt;JSONPath specification - XPath for JSON&lt;/a&gt;», «&lt;a class="reference external" href="https://www.baeldung.com/guide-to-jayway-jsonpath"&gt;Introduction to JsonPath&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://netflix.github.io/falcor/starter/what-is-falcor.html"&gt;Falcor&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://microservice-api-patterns.org/cheatsheet"&gt;Cheat Sheet a.k.a. API Design Heuristics&lt;/a&gt;» - шпаргалка по «Microservices API Patterns»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling"&gt;REST API Design - Resource Modeling&lt;/a&gt;» by Prakash Subramaniam, WhoughtWorks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2016/06/01/cqrs-and-rest-the-perfect-match/"&gt;CQRS and REST: the perfect match&lt;/a&gt;» by Jimmy Bogard&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://lostechies.com/jimmybogard/2016/05/12/entities-arent-resources-resources-arent-representations/"&gt;Entities aren’t resources, resources aren’t representations&lt;/a&gt;» by Jimmy Bogard&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="event-storming"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id60"&gt;Event Storming&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;By Alberto Brandolini (&lt;a class="reference external" href="https://twitter.com/ziobrando"&gt;twitter&lt;/a&gt;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Domain-Driven Design: The First 15 Years», chapter «Discovering Bounded Contexts with EventStorming» by Alberto Brandolini&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="http://ziobrando.blogspot.com/2013/11/introducing-event-storming.html"&gt;Introducing Event Storming&lt;/a&gt;» by Alberto Brandolini&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://blog.avanscoperta.it/2020/03/26/remote-eventstorming/"&gt;Remote EventStorming&lt;/a&gt;» by Alberto Brandolini&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://blog.avanscoperta.it/2020/03/26/eventstorming-in-covid-19-times/"&gt;EventStorming in COVID-19 times&lt;/a&gt;» by Alberto Brandolini&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://leanpub.com/introducing_eventstorming"&gt;Leanpub: Introducing EventStorming&lt;/a&gt;» by Alberto Brandolini&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.eventstorming.com/"&gt;EventStorming.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Others:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Domain-Driven Design Distilled» by Vaughn Vernon, chapter «Chapter 7 Acceleration and Management Tools :: Event Storming»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.oreilly.com/library/view/what-is-domain-driven/9781492057802/"&gt;What is Domain-Driven Design?&lt;/a&gt;» by Vladik Khononov, chapter «Chapter 8: Event Storming»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://ddd-crew.github.io/eventstorming-glossary-cheat-sheet/"&gt;EventStorming Glossary &amp;amp; Cheat sheet&lt;/a&gt;» by Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Open Agile Architecture», chapter «&lt;a class="reference external" href="https://ddd-crew.github.io/eventstorming-glossary-cheat-sheet/"&gt;19. Event Storming&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="http://agilemindset.ru/event-storming-%D0%BD%D0%B0-%D0%BF%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85-%D0%BA%D0%B5%D0%B9%D1%81%D0%B0%D1%85/"&gt;Event Storming на практических кейсах&lt;/a&gt;», Сергей Баранов (&lt;a class="reference external" href="https://www.youtube.com/watch?v=kJjuTuviZ-E"&gt;видео&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://developer.ibm.com/tutorials/reactive-in-practice-1/"&gt;Reactive in practice, Unit 1: Event storming the stock trader domain&lt;/a&gt;» by Kevin Webber, Dana Harrington&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.ibm.com/cloud/architecture/architecture/practices/event-storming-methodology-architecture/"&gt;Event storming at ibm.com&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://ibm-cloud-architecture.github.io/refarch-eda/methodology/event-storming/"&gt;Event driven solution implementation methodology&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://github.com/mariuszgil/awesome-eventstorming"&gt;Awesome EventStorming&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tools:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/tmorin/plantuml-libs/blob/master/dist/eventstorming/README.md"&gt;EventStorming для PlantUML&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://miro.com/"&gt;miro.com&lt;/a&gt;, см. &lt;a class="reference external" href="https://miro.com/miroverse/category/ideation-and-brainstorming/event-storming"&gt;Event Storming template&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;EventStorming для ArchiMate:&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;см. «&lt;a class="reference external" href="https://nicea.nic.in/download-files.php?nid=247"&gt;Figure 13: Event Storming Model&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://community.opengroup.org/archimate-user-community/home/-/issues/8"&gt;Model used by Jean-Baptiste Sarrodie for presentation «Enterprise Architecture Modelling with ArchiMate in an Agile at Scale Programme»&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="modelling"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id61"&gt;Modelling&lt;/a&gt;&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://github.com/ddd-crew/welcome-to-ddd"&gt;Getting started with DDD. Definitions of DDD and fundamental concepts to reduce the learning curve and confusion.&lt;/a&gt;» by Nick Tune &amp;amp; DDD-Crew&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://github.com/ddd-crew/ddd-starter-modelling-process"&gt;Domain-Driven Design Starter Modelling Process. If you’re new to DDD and not sure where to start, this process will guide you step-by-step.&lt;/a&gt;» by Nick Tune &amp;amp; DDD-Crew&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://medium.com/nick-tune-tech-strategy-blog/legacy-architecture-modernisation-with-strategic-domain-driven-design-3e7c05bb383f"&gt;Legacy Architecture Modernisation With Strategic Domain-Driven Design&lt;/a&gt;» by Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Собственно, этих знаний достаточно для того, чтобы стать зрелым специалистом.
Своего рода - кандидатский минимум.
Далее - порядок чтения может быть произвольным.
Читать весь список необязательно.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id62"&gt;Дополнительная литература (на выбор)&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="sdls"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id63"&gt;SDLS&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="single-team-agile"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id64"&gt;Single-Team Agile&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Extreme Programming Explained» 2nd edition by Kent Beck&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Planning Extreme Programming» by Kent Beck, Martin Fowler&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«More Effective Agile: A Roadmap for Software Leaders» by Steve McConnell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Clean Agile: Back to Basics» by Robert C. Martin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Agile! The Good, the Hype and the Ugly» by Bertrand Meyer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Scrum and XP from the Trenches: How We Do Scrum» 2nd edition by Henrik Kniberg&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Essential Scrum: A Practical Guide to the Most Popular Agile Process» by Kenneth Rubin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Succeeding with Agile: Software Development Using Scrum» by Mike Cohn&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«User Stories Applied: For Agile Software Development» by Mike Cohn&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="scaled-agile"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id65"&gt;Scaled Agile&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Scaling Software Agility: Best Practices for Large Enterprises» by Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise» by Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«SAFe® 5.0: The World’s Leading Framework for Business Agility» by Richard Knaster, Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Large-Scale Scrum: More with LeSS» by Craig Larman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://less.works/less/framework/introduction"&gt;LeSS&lt;/a&gt;» (&lt;a class="reference external" href="https://less.works/ru/less/framework/introduction"&gt;перевод на Русский&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.pmi.org/pmbok-guide-standards/practice-guides/agile"&gt;Agile Practice Guide&lt;/a&gt;» by Project Management Institute&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id66"&gt;Стандарты&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«ISO/IEC/IEEE 12207:2017 Systems and software engineering — Software life cycle processes»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«ISO/IEC/IEEE 15288:2015 Systems and software engineering — System life cycle processes»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«ISO/IEC/IEEE 29148:2011 Systems and software engineering — Life cycle processes — Requirements engineering»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«ISO/IEC/IEEE 15289:2019 Systems and software engineering — Content of life-cycle information items (documentation)»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«ISO/IEC/IEEE 24765:2017 Systems and software engineering — Vocabulary»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«ISO 9000:2005 Quality management systems — Fundamentals and vocabulary»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«ISO/IEC 33001:2015 Information technology — Process assessment — Concepts and terminology»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«ГОСТ Р ИСО/МЭК 12207-2010 Информационная технология. Системная и программная инженерия. Процессы жизненного цикла программных средств.»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«ГОСТ Р 57193-2016 Системная и программная инженерия. Процессы жизненного цикла систем.»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id19"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id67"&gt;Менеджмент&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«The Mythical Man-Month Essays on Software Engineering Anniversary Edition» by Frederick P. Brooks, Jr.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://less.works/less/principles/systems-thinking.html"&gt;Systems Thinking&lt;/a&gt;» by Craig Larman (&lt;a class="reference external" href="https://less.works/ru/less/principles/systems-thinking.html"&gt;перевод на Русский&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Art of Project Management» by Scott Berkun&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Менеджмент: Учебник для вузов.» 3-е изд. Глухов В. В.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Оргуправленческое мышление. Идеология, методология, технология» / Щедровицкий Георгий Петрович&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id20"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id68"&gt;Развитие личностных профессиональных качеств&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«The Pragmatic Programmer: From Journeyman to Master» 1st edition by David Thomas, Andrew Hunt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Pragmatic Programmer: your journey to mastery, 20th Anniversary Edition» 2nd edition by David Thomas, Andrew Hunt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«A Mind for Numbers: How to Excel at Math and Science» by Barbara Ann Oakley&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Systems Thinking. Quality Software Management. New York: Dorset House.» by Gerald M. Weinberg, 1992,  ISBN: 0932633226&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«An Introduction to General Systems Thinking» by Gerald M. Weinberg&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Becoming a Technical Leader» by Gerald M. Weinberg&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Harvard Business Review on Decision Making» by Harvard Business School Press&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Software Architect Elevator: Redefining the Architect’s Role in the Digital Enterprise 1st Edition» by Gregor Hohpe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Fundamentals of Software Architecture: An Engineering Approach» 1st edition by Mark Richards, Neal Ford&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Software Architecture: The Hard Parts: Modern Trade-Off Analyses for Distributed Architectures» 1st Edition by Neal Ford, Mark Richards, Pramod Sadalage, Zhamak Dehghani&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Book: 37 Things One Architect Knows About IT Transformation» by Gregor Hohpe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Eat or Be Eaten!: Jungle Warfare for the Corporate Master Politician» by Phil Porter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Presentation patterns: techniques for crafting better presentations» by Neal Ford, Matthew McCullough, Nathaniel Schutta&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Technology Strategy Patterns: Architecture as Strategy» 1st edition by Eben Hewitt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Thinking in Systems: A Primer» by Donella H. Meadows, Diana Wright&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Social psychology» 13th edition by David G. Myers. Перевод: «Социальная психология» / Майерс Д. Пер. с англ. З. Замчук; Зав. ред. кол. Л. Винокуров. — 7-е изд. — СПб.: Питер, 2006.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Never split the difference: negotiating as if life depended on it» by Chris Voss. Перевод: «Договориться не проблема. Как добиваться своего без конфликтов и ненужных уступок.» / Крис Восс&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Искусство спора. О теории и практике спора.» / Поварнин С.И.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Эристика, или Искусство побеждать в спорах» / Шопенгауэр Артур. English: «The Art of Being Right: 38 Ways to Win an Argument» by Arthur Schopenhauer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Как читать книги» / Поварнин С.И.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://ruxpert.ru/%D0%98%D1%81%D0%BA%D1%83%D1%81%D1%81%D1%82%D0%B2%D0%BE_%D1%81%D0%BF%D0%BE%D1%80%D0%B0_(%D0%BE%D0%B1%D1%83%D1%87%D0%B0%D1%8E%D1%89%D0%B8%D0%B5_%D0%BC%D0%B0%D1%82%D0%B5%D1%80%D0%B8%D0%B0%D0%BB%D1%8B)"&gt;Искусство спора (обучающие материалы)&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://m.vk.com/wall-56611080_127534"&gt;Книги по риторике&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id21"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id69"&gt;Базы данных&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Mastering PostgreSQL In Application Development» by Dimitri Fontaine&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Art of PostgreSQL» 2nd edition by Dimitri Fontaine - is the new title of «Mastering PostgreSQL in Application Development»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«SQL Antipatterns. Avoiding the Pitfalls of Database Programming.» by Bill Karwin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Refactoring Databases. Evolutionary Database Design» by Scott J Ambler and Pramod J. Sadalage&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«An Introduction to Database Systems» by C.J. Date&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«PostgreSQL 10 High Performance» by Ibrar Ahmed, Gregory Smith, Enrico Pirozzi&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PostgresPro представил &lt;a class="reference external" href="https://postgrespro.ru/education/books"&gt;три книги&lt;/a&gt; для трех разных уровней подготовленности читателей, от совершенно неосведомленного человека до разработчика баз данных.
Книги дают комплексные знания в лаконичной форме.
Все книги доступны для скачивания в свободном доступе:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://postgrespro.ru/education/books/introbook"&gt;Postgres: первое знакомство&lt;/a&gt;» / Л.П. Вениаминович, Р.Е. Валерьевич, Л.И. Викторович&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://postgrespro.ru/education/books/sqlprimer"&gt;PostgreSQL. Основы языка SQL: учеб. пособие&lt;/a&gt;»  / Е.П. Моргунов; под ред. Е.В. Рогова, П.В. Лузанова.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://postgrespro.ru/education/books/dbtech"&gt;Основы технологий баз данных: учеб. пособие&lt;/a&gt;» / Б. А. Новиков, Е. А. Горшкова, Н. Г. Графеева; под ред. Е. В. Рогова.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Так же доступны &lt;a class="reference external" href="https://postgrespro.ru/education/courses"&gt;учебные материалы курсов&lt;/a&gt;: слайды, видео, руководства. Скачать можно все материалы каждого курса одним архивом.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://postgrespro.ru/education/where"&gt;Видеозаписи курсов&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Превосходная подборка статей с фундаментальной информацией простым языком о внутреннем устройстве PostgreSQL, от разработчиков PostgresPro:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://m.habr.com/ru/company/postgrespro/blog/442804/"&gt;MVCC-1. Изоляция&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://m.habr.com/ru/company/postgrespro/blog/458186/"&gt;WAL в PostgreSQL: 1. Буферный кеш&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id22"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id70"&gt;Изучаем распределенные системы. Третий заход.&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions» by Gregor Hohpe, Bobby Woolf&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Service Design Patterns: Fundamental Design Solutions for SOAP/WSDL and RESTful Web Services» by Robert Daigneau&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Microsoft .NET: Architecting Applications for the Enterprise» 2nd edition by Dino Esposito, Andrea Saltarello&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/"&gt;Cloud Design Patterns&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn568099(v=pandp.10)"&gt;Cloud Design Patterns. Prescriptive architecture guidance for cloud applications&lt;/a&gt;» by Alex Homer, John Sharp, Larry Brader, Masashi Narumoto, Trent Swanson. (&lt;a class="reference external" href="http://aka.ms/cloud-design-patterns-sample"&gt;Code Samples&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices"&gt;Build Microservices on Azure&lt;/a&gt;» by Microsoft Corporation and community&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/"&gt;Cloud Best Practices&lt;/a&gt;» by Microsoft Corporation and community&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/antipatterns"&gt;Performance Antipatterns&lt;/a&gt;» by Microsoft Corporation and community&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/guide/"&gt;Azure Application Architecture Guide&lt;/a&gt;» by Microsoft Corporation and community&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/data-guide/"&gt;Azure Data Architecture Guide&lt;/a&gt;» by Microsoft Corporation and community&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Release It! Design and Deploy Production-Ready Software» 2nd edition by Michael Nygard&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.manning.com/books/microservice-patterns"&gt;Microservices Patterns: With examples in Java&lt;/a&gt;» 1st edition by Chris Richardson (&lt;a class="reference external" href="https://microservices.io/book"&gt;more info&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Monolith to Microservices Evolutionary Patterns to Transform Your Monolith» by Sam Newman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Microservices AntiPatterns and Pitfalls» by Mark Richards&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Microservices vs. Service-Oriented Architecture» by Mark Richards&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://landing.google.com/sre/books/"&gt;Site Reliability Engineering: How Google runs production systems&lt;/a&gt;» edited by Betsy Beyer, Chris Jones, Jennifer Petoff &amp;amp; Niall Richard Murphy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://landing.google.com/sre/books/"&gt;The Site Reliability Workbook: Practical Ways to Implement SRE.&lt;/a&gt;» by Betsy Beyer, Niall Richard Murphy, David K. Rensin, Kent Kawahara &amp;amp; Stephen Thorne&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://landing.google.com/sre/books/"&gt;Building Secure &amp;amp; Reliable Systems: Best Practices for Designing, Implementing and Maintaining Systems.&lt;/a&gt;» by Heather Adkins, Betsy Beyer, Paul Blankinship, Ana Oprea, Piotr Lewandowski, Adam Stubblefield&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Database Reliability Engineering. Designing and Operating Resilient Database Systems.» by Laine Campbell and Charity Majors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Designing Data-Intensive Applications. The Big Ideas Behind Reliable, Scalable, and Maintainable Systems» by Martin Kleppmann&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Database Internals: A Deep Dive into How Distributed Data Systems Work» by Alex Petrov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.distributed-systems.net/index.php/books/ds3/"&gt;Distributed systems: principles and paradigms&lt;/a&gt;» 3d edition by Andrew S. Tanenbaum, Maarten Van Steen&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="http://books.ifmo.ru/file/pdf/1551.pdf"&gt;Введение в распределенные вычисления&lt;/a&gt;» / Косяков М. С. — СПб: НИУ ИТМО, 2014. — С. 75-82. — 155 с.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Service-Oriented Architecture Analysis and Design for Services and Microservices» by Thomas Erl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Workflow patterns: the definitive guide» by Aalst, Wil van der, Russell, Nick, Ter Hofstede, Arthur&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Real-Life BPMN (4th edition): Includes an introduction to DMN» by Jakob Freund, Bernd Rücker&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Practical Process Automation» by Bernd Ruecker&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id23"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id71"&gt;API-Design&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«REST in Practice: Hypermedia and Systems Architecture» by Savas Parastatidis, Jim Webber, Ian Robinson&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«RESTful Web APIs: Services for a Changing World» by Leonard Richardson, Sam Ruby, Mike Amundsen&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Web API Design Crafting Interfaces that Developers Love» by Brian Mulloy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«REST API Design Rulebook» by Mark Massé&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Principles of Web API Design: Delivering Value with APIs and Microservices» by James Higginbotham&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="streaming-processing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id72"&gt;Streaming Processing&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Streaming Data: Understanding the real-time pipeline» 1st edition by Andrew Psaltis&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Big Data: Principles and best practices of scalable realtime data systems» 1st edition by Nathan Marz, James Warren&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Kafka Streams in Action: Real-time apps and microservices with the Kafka Streams API» 1st edition by Bill Bejeck&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Enterprise Big Data Lake: Delivering the Promise of Big Data and Data Science» 1st edition by Alex Gorelik&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id24"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id73"&gt;Углубляем DDD&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka» by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Patterns, Principles, and Practices of Domain-Driven Design» by Scott Millett, Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Hands-On Domain-Driven Design with .NET Core: Tackling complexity in the heart of software by putting DDD principles into practice» by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Balancing Coupling in Software Design: Successful Software Architecture in General and Distributed Systems» by Vladislav Khononov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.informit.com/imprint/series_detail.aspx?ser=7937178"&gt;The Addison-Wesley Signature Series: Vaughn Vernon&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://leanpub.com/dddwithpython"&gt;Event Sourced Building Blocks for Domain-Driven Design with Python&lt;/a&gt;» by John Bywater&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id25"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id74"&gt;Изучаем проектирование&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Agile Software Development. Principles, Patterns, and Practices.» by Robert C. Martin, James W. Newkirk, Robert S. Koss&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Analysis Patterns. Reusable Object Models» by Martin Fowler&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Implementation Patterns» by Kent Beck&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Smalltalk Best Practice Patterns» by Kent Beck&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://martinfowler.com/eaaDev/"&gt;Development of Further Patterns of Enterprise Application Architecture&lt;/a&gt;» by Martin Fowler&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Domain Specific Languages» by Martin Fowler (with Rebecca Parsons)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Pattern Hatching: Design Patterns Applied» by John Vlissides&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff650706(v=pandp.10)?redirectedfrom=MSDN"&gt;Microsoft Application Architecture Guide&lt;/a&gt;» 2nd edition (Patterns &amp;amp; Practices) by Microsoft Corporation (J.D. Meier, David Hill, Alex Homer, Jason Taylor, Prashant Bansode, Lonnie Wall, Rob Boucher Jr., Akshay Bogawat)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development» by Craig Larman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Object-Oriented Software Construction» 2nd edition by Bertrand Meyer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Working Effectively with Legacy Code» by Michael C. Feathers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Refactoring To Patterns» by Joshua Kerievsky&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Structure and Interpretation of Computer Programs» (aka SICP) 2nd edition (MIT Electrical Engineering and Computer Science) by Harold Abelson, Gerald Jay Sussman, Julie Sussman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Object Oriented Software Engineering: A Use Case Driven Approach» by Ivar Jacobson&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Object-Oriented Analysis and Design with Applications» 3rd edition by Grady Booch, Robert A. Maksimchuk, Michael W. Engle, Bobbi J. Young Ph.D., Jim Conallen, Kelli A. Houston&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="posa"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id75"&gt;POSA&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Pattern-Oriented Software Architecture: A System of Patterns, Volume 1» by Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, Michael Stal&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Pattern-Oriented Software Architecture: Patterns for Concurrent and Networked Objects, Volume 2» by Douglas C. Schmidt, Michael Stal, Hans Rohnert, Frank Buschmann&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Pattern-Oriented Software Architecture: Patterns for Resource Management, Volume 3» by Michael Kircher, Prashant Jain&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Pattern-Oriented Software Architecture: A Pattern Language for Distributed Computing, Volume 4» by Frank Buschmann, Kevin Henney, Douglas C. Schmidt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Pattern-Oriented Software Architecture: On Patterns and Pattern Languages, Volume 5» by Frank Buschmann, Kevin Henney, Douglas C. Schmidt&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id26"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id76"&gt;Алгоритмы. Второй заход.&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Introduction to Algorithms» 3d edition by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Algorithms and Data Structures» (Oberon version: August 2004) by N.Wirth&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Donald E. Knuth:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«The Art of Computer Programming, Volume 1: Fundamental Algorithms» 3d edition by Donald Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Art of Computer Programming, Volume 1, Fascicle 1: MMIX; A RISC Computer for the New Millennium» 1st edition by Donald Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Art of Computer Programming, Volume 2, Seminumerical Algorithms» 3rd edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Art of Computer Programming, Volume 3, Sorting and Searching» 2nd edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Art of Computer Programming, Volume 4, Fascicle 0: Introduction to Combinatorial Algorithms and Boolean Functions» 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Art of Computer Programming, Volume 4, Fascicle 1: Bitwise Tricks &amp;amp; Techniques; Binary Decision Diagrams» 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Art of Computer Programming, Volume 4, Fascicle 2: Generating All Tuples and Permutations» 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Art of Computer Programming, Volume 4, Fascicle 3: Generating All Combinations and Partitions Paperback» 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Art of Computer Programming, Volume 4, Fascicle 4: Generating All Trees; History of Combinatorial Generation 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Art of Computer Programming» Volume 4, Fascicle 5: Mathematical Preliminaries Redux; Introduction to Backtracking; Dancing Links» 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Art of Computer Programming, Volume 4, Fascicle 6: Satisfiability» 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Art of Computer Programming, Volume 4A, Combinatorial Algorithms, Part 1» 1st edition by Donald E. Knuth&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Хорошая подборка книг по алгоритмам: &lt;a class="reference external" href="http://e-maxx.ru/bookz/"&gt;http://e-maxx.ru/bookz/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id27"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id77"&gt;Тестирование&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«xUnit Test Patterns. Refactoring Test Code.» by Gerard Meszaros&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Unit Testing Principles, Practices, and Patterns: Effective testing styles, patterns, and reliable automation for unit testing, mocking, and integration testing with examples in C#» 1st Edition by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Growing Object-Oriented Software, Guided by Tests» by Steve Freeman, Nat Pryce&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Agile Testing: A Practical Guide for Testers and Agile Teams» by Lisa Crispin, Janet Gregory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«More Agile Testing: Learning Journeys for the Whole Team» by Lisa Crispin, Janet Gregory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«ATDD by Example: A Practical Guide to Acceptance Test-Driven Development» by Markus Gärtner&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation» by Jez Humble, David Farley&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Continuous Integration: Improving Software Quality and Reducing Risk» by Paul M. Duvall, Steve Matyas, Andrew Glover&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id28"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id78"&gt;Компиляторы&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Compiler Construction» by N.Wirth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Compilers: Principles, Techniques, and Tools» 2nd edition by Alfred V. Aho, Monica S. Lam, Ravi Sethi, Jeffrey D. Ullman&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id29"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id79"&gt;Архитектура&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Software Architecture in Practice» 4th edition by Len Bass, Paul Clements, Rick Kazman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Documenting Software Architectures: Views and Beyond» 2nd edition by Paul Clements, Felix Bachmann, Len Bass, David Garlan, James Ivers, Reed Little, Paulo Merson, Robert Nord, Judith Stafford&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Software Systems Architecture: Working With Stakeholders Using Viewpoints and Perspectives» 2nd edition by Nick Rozanski, Eóin Woods&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Designing Software Architectures: A Practical Approach (SEI Series in Software Engineering)» 1st edition by Humberto Cervantes, Rick Kazman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Fundamentals of Software Architecture: An Engineering Approach» 1st edition by Mark Richards, Neal Ford&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Introduction to Solution Architecture Paperback» by Alan McSweeney&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Systems Analysis and Design» 7th edition by Alan Dennis, Barbara Haley Wixom, Roberta M. Roth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Design of Design: Essays from a Computer Scientist» by Frederick P. Brooks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Living Documentation: Continuous Knowledge Sharing by Design» by Cyrille Martraire&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Just Enough Software Architecture: A Risk-Driven Approach» by George H. Fairbanks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Book: 37 Things One Architect Knows About IT Transformation» by Gregor Hohpe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«The Software Architect Elevator: Redefining the Architect’s Role in the Digital Enterprise 1st Edition» by Gregor Hohpe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Cloud Strategy: A Decision-based Approach to Successful Cloud Migration» by Gregor Hohpe, Michele Danieli, Jean-Francois Landreau, Tahir Hashmi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Architecting for Scale» 2nd Edition by Lee Atchison&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Software Engineering: A Practitioner’s Approach» 9th edition by Roger S. Pressman, Bruce Maxim&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Presentation patterns: techniques for crafting better presentations» by Neal Ford, Matthew McCullough, Nathaniel Schutta&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Team Topologies: Organizing Business and Technology Teams for Fast Flow» by Matthew Skelton, Manuel Pais&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Technology Strategy Patterns: Architecture as Strategy» 1st edition by Eben Hewitt&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Архитектура в Agile:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Building Evolutionary Architectures: Support Constant Change» 1st Edition by Neal Ford, Rebecca Parsons, Patrick Kua&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Agile Software Architecture: Aligning Agile Processes and Software Architectures» by Muhammad Ali Babar, Alan W. Brown, Kai Koskimies, Ivan Mistrík&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Continuous Architecture: Sustainable Architecture in an Agile and Cloud-Centric World» by Murat Erder, Pierre Pureur&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Стандарты:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://pubs.opengroup.org/architecture/o-aa-standard/"&gt;Open Agile Architecture: A Standard of The Open Group&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.iso.org/standard/50508.html"&gt;ISO/IEC/IEEE 42010:2011(en) Systems and software engineering — Architecture description&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.iso.org/standard/68982.html"&gt;ISO/IEC/IEEE 42020:2019 Software, systems and enterprise — Architecture processes&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.iso.org/standard/73436.html"&gt;ISO/IEC/IEEE 42030:2019 Software, systems and enterprise — Architecture evaluation framework&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://allgosts.ru/35/080/gost_r_57100-2016"&gt;ГОСТ Р 57100-2016 Системная и программная инженерия. Описание архитектуры&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id30"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id80"&gt;Аналитика&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Software Requirements (Developer Best Practices)» 3rd Edition by Karl Wiegers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«INCOSE Guide for Writing Requirements» by INCOSE&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Аналитика в Agile:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise» by Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Whitepaper «&lt;a class="reference external" href="https://scalingsoftwareagility.files.wordpress.com/2007/03/a-lean-and-scalable-requirements-information-model-for-agile-enterprises-pdf.pdf"&gt;A Lean and Scalable Requirements Information Model for the Agile Enterprise&lt;/a&gt;» by Dean Leffingwell with Juha‐Markus Aalto&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://scalingsoftwareagility.wordpress.com/2010/03/05/an-agile-architectural-epic-kanban-system-part-2-%E2%80%93-the-model/"&gt;An Agile Architectural Epic Kanban System: Part 2 – The Model&lt;/a&gt;» by Dean Leffingwell&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Другие подборки литературы по аналитике:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://systems.education/books"&gt;Литература по аналитике на сайте Systems.Education&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.volere.org/resources/books/"&gt;Литература по аналитике на сайте Volere Requirements Resources&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Смотрите также список инструментов для управления требованиями:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.volere.org/tools/"&gt;Tools&lt;/a&gt; on Volere Requirements Resources&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.volere.org/requirements-tools/"&gt;Requirements Tools&lt;/a&gt; on Volere Requirements Resources&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id31"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id81"&gt;Изучаем оценивание задач&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Software Estimation: Demystifying the Black Art (Developer Best Practices)» by Steve McConnell (я встречал в интернете &lt;a class="reference external" href="http://igorshevchenko.ru/blog/entries/software-estimation"&gt;краткий конспект&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Agile Estimating and Planning» by Mike Cohn&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id32"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id82"&gt;Функциональное программирование&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://se.ethz.ch/~meyer/publications/functional/meyer_functional_oo.pdf"&gt;«Software architecture: object-oriented vs functional&lt;/a&gt;» by Bertrand Meyer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"&gt;Category Theory for Programmers&lt;/a&gt;» by Bartosz Milewski (&lt;a class="reference external" href="https://github.com/hmemcpy/milewski-ctfp-pdf"&gt;unofficial PDF and LaTeX source&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://fsharpforfunandprofit.com/books/"&gt;Domain Modeling Made Functional. Tackle Software Complexity with Domain-Driven Design and F#&lt;/a&gt;» by Scott Wlaschin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://fsharpforfunandprofit.com/"&gt;F# for Fun and Profit&lt;/a&gt;» by Scott Wlaschin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Functional Programming for the Object-Oriented Programmer» by Brian Marick&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Functional Thinking» by Neal Ford&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://en.wikibooks.org/wiki/Haskell"&gt;Haskell&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://github.com/winitzki/sofp/blob/master/sofp-src/sofp.pdf"&gt;The Science of Functional Programming. A Tutorial, with Examples in Scala.&lt;/a&gt;» by Sergei Winitzki, Ph.D.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Microservices with Clojure. Develop event-driven, scalable, and reactive microservices with real-time monitoring» by Anuj Kumar&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для Golang-разработчиков:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Learning Functional Programming in Go: Change the way you approach your applications using functional programming in Go» by Lex Sheehan&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id33"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id83"&gt;Справочники&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«Computing Handbook. Computer Science and Software Engineering.» 3d edition by Allen Tucker, Teofilo Gonzalez, Jorge Diaz-Herrera&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id34"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id84"&gt;Справочная информация&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="body-of-knowledge"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id85"&gt;Body of Knowledge&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.sebokwiki.org/wiki/Download_SEBoK_PDF"&gt;Guide to the Systems Engineering Body of Knowledge (SEBoK)&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://itabok.iasaglobal.org/"&gt;The Information Technology Architecture Body of Knowledge (ITABoK)&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.mitre.org/publications/technical-papers/guide-to-the-evolving-enterprise-architecture-body-of-knowledge"&gt;The Enterprise Architecture Body of Knowledge (EABoK)&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.mitre.org/publications/technical-papers/the-mitre-systems-engineering-guide"&gt;MITRE Systems Engineering Guide&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.businessarchitectureguild.org/page/BIZBOK"&gt;A Guide to the Business Architecture Body of Knowledge(R) (BIZBOK(R) Guide)&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.iiba.org/career-resources/a-business-analysis-professionals-foundation-for-success/babok/"&gt;A Guide to the Business Analysis Body of Knowledge (BABOK®)&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.iiba.org/career-resources/business-analysis-resources/iiba-bookstore/"&gt;Agile Extension to the BABOK® Guide&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.dama.org/content/what-data-management"&gt;DAMA-DMBOK: Data Management Body of Knowledge&lt;/a&gt;» 2nd edition by DAMA International&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.pmi.org/pmbok-guide-standards/foundational/pmbok"&gt;The Project Management Body of Knowledge (PMBoK)&lt;/a&gt;» by Project Management Institute (PMI)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.pmi.org/pmbok-guide-standards/practice-guides/agile"&gt;Agile Practice Guide&lt;/a&gt;» by Project Management Institute (PMI), 2017&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://book4cio.ru/"&gt;Учебник 4CIO. Настольная книга ИТ-Директора&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://4cio.ru/pages/570"&gt;Учебник 4CDTO. Настольная книга руководителя цифровой трансформации&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://www.incose.org/products-and-publications/se-handbook"&gt;Systems engineering handbook. A guide for System Life Cycle Processes and activities.&lt;/a&gt;» by INCOSE&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://sfia-online.org/en"&gt;The global skills and competency framework for a digital world&lt;/a&gt;» by SFIA Foundation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://sfia-online.org/en/tools-and-resources/bodies-of-knowledge/list-of-bodies-of-knowledge"&gt;List of Bodies of Knowledge&lt;/a&gt;» by SFIA Foundation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id35"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id86"&gt;ГОСТы&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://allgosts.ru/35/"&gt;База ГОСТов allgosts.ru - 35. ИНФОРМАЦИОННЫЕ ТЕХНОЛОГИИ. МАШИНЫ КОНТОРСКИЕ&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://standartgost.ru/0/753-informatsionnye_tehnologii_mashiny_kontorskie"&gt;StandartGOST.ru - бесплатные ГОСТы и магазин документов. Информационные технологии. Машины конторские&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="online"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id87"&gt;Online-каталоги&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.refactoring.com/catalog/"&gt;Catalog of Refactorings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://c2.com/cgi/wiki?CodeSmell"&gt;Code Smell&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://c2.com/cgi/wiki?AntiPatternsCatalog"&gt;Anti Patterns Catalog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://martinfowler.com/eaaCatalog/"&gt;Catalog of Patterns of Enterprise Application Architecture&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.martinfowler.com/dslCatalog/"&gt;List of DSL Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.enterpriseintegrationpatterns.com/"&gt;Enterprise Integration Patterns&lt;/a&gt; (&lt;a class="reference external" href="https://www.enterpriseintegrationpatterns.com/download/EIPTutorialReferenceChart.pdf"&gt;шпаргалка по EIP&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://verraes.net/2019/05/ddd-msg-arch/"&gt;DDD and Messaging Architectures&lt;/a&gt; - an overview of different series on patterns in distributed systems by Mathias Verraes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://servicedesignpatterns.com/"&gt;Service Design Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://patterns.arcitura.com/soa-patterns"&gt;SOAPatterns.org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://patterns.arcitura.com/cloud-computing-patterns"&gt;CloudPatterns.org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://patterns.arcitura.com/big-data-patterns"&gt;BigDataPatterns.org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/"&gt;Cloud Design Patterns | Microsoft Docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://workflowpatterns.com/patterns/"&gt;Workflow Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://microservices.io/patterns/"&gt;Microservices Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.manning.com/books/microservice-patterns"&gt;Microservices Patterns (book)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://samnewman.io/patterns/"&gt;Microservices Patterns from Sam Newman&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://ddd.fed.wiki.org/"&gt;About DDD on the site of Ward Cunningham&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.databaserefactoring.com/"&gt;Refactoring Databases&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://xunitpatterns.com/"&gt;XUnit Test Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://databaserefactoring.com/"&gt;Refactoring Databases&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.agiledata.org/essays/databaseRefactoringCatalog.html"&gt;Catalog of Database Refactorings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.extremeprogramming.org/rules.html"&gt;Extreme Programming Rules&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://jepsen.io/consistency"&gt;Consistency Models - a clickable map&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.agilealliance.org/agile101/subway-map-to-agile-practices/"&gt;Subway Map to Agile Practices - a clickable map&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://patterns.arcitura.com/"&gt;The Arcitura Education Patterns, Mechanisms and Metrics Master Catalog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://microservice-api-patterns.org/"&gt;Microservice API Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.openapis.org/"&gt;OpenAPIs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.asyncapi.com/"&gt;AsyncAPI&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nocomplexity.com/documents/arplaybook/"&gt;Architecture Playbook&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/nocomplexity/ArchitecturePlaybook"&gt;source&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.viewpoints-and-perspectives.info/"&gt;Software Systems Architecture&lt;/a&gt; - This web site contains a selection of supporting material for the book («Software Systems Architecture: Working With Stakeholders Using Viewpoints and Perspectives» 2nd edition by Nick Rozanski, Eóin Woods), including sample chapters, references and white papers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="code-smell-catalogs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id88"&gt;Code Smell catalogs&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Chapter 17: «Smells and Heuristics» of the book «Clean Code: A Handbook of Agile Software Craftsmanship» by Robert C. Martin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Chapter 3. «Bad Smells in Code» of the book «Refactoring: Improving the Design of Existing Code» by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://c2.com/cgi/wiki?CodeSmell"&gt;Code Smell&lt;/a&gt; catalog on the site of Ward Cunningham&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«Refactoring To Patterns» by Joshua Kerievsky&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id36"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id89"&gt;Другие подборки литературы&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/sindresorhus/awesome"&gt;Awesome lists&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/heynickc/awesome-ddd"&gt;Awesome Domain-Driven Design&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/valignatev/ddd-dynamic"&gt;Domain Driven Design in Python, Ruby and other dynamic languages resources&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/mfornos/awesome-microservices"&gt;Awesome Microservices&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/unlight/solution-architecture"&gt;Solution Architecture links, articles, books, video lessons, etc.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/tayllan/awesome-algorithms"&gt;Awesome Algorithms&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/gaerae/awesome-algorithms-education"&gt;Awesome Algorithms Education&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/prakhar1989/awesome-courses"&gt;List of awesome university courses for learning Computer Science&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://e-maxx.ru/bookz/"&gt;MAXimal :: bookz - электронные версии различных книг по алгоритмам&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.kamilgrzybek.com/programming-and-design-resources/"&gt;Programming and design learning resources by Kamil Grzybek&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://sergeyteplyakov.blogspot.com/2013/08/blog-post.html"&gt;Список книг от Сергея Теплякова&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://handbookofsoftwarearchitecture.com/books/"&gt;Список книг от Grady Booch&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.luxoft-training.ru/about/experts/answers/302/30945/"&gt;Книги по направлению Архитектура и проектирование ПО от эксперта luxoft&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://architectelevator.com/architecture/architect-path/"&gt;The Architect’s Path (Part 1 - Model)&lt;/a&gt; by Gregor Hohpe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://architectelevator.com/architecture/architect-bookshelf/"&gt;The Architect’s Path (Part 2 - Implementation)&lt;/a&gt; by Gregor Hohpe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.developertoarchitect.com/books.html"&gt;Software Architecture Book References&lt;/a&gt; by Mark Richards&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://apolomodov.medium.com/software-design-books-743be52e4c71"&gt;Как прокачаться в проектировании программного обеспечения — список книг&lt;/a&gt; by Alexander Polomodov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ruxpert.ru/%D0%98%D1%81%D0%BA%D1%83%D1%81%D1%81%D1%82%D0%B2%D0%BE_%D1%81%D0%BF%D0%BE%D1%80%D0%B0_(%D0%BE%D0%B1%D1%83%D1%87%D0%B0%D1%8E%D1%89%D0%B8%D0%B5_%D0%BC%D0%B0%D1%82%D0%B5%D1%80%D0%B8%D0%B0%D0%BB%D1%8B)"&gt;Искусство спора (обучающие материалы)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://m.vk.com/wall-56611080_127534"&gt;Книги по риторике&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id37"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id90"&gt;Почтовые рассылки и сообщества&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://dddcommunity.org/"&gt;Domain Driven Design Community&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://dddweekly.com/"&gt;Domain Driven Design Weekly&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://microserviceweekly.com/"&gt;Microservice Weekly&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reference-applications-ru"&gt;
&lt;span id="id38"/&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id91"&gt;Эталонные демонстрационные приложения&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/dotnet-architecture/eShopOnContainers"&gt;eShopOnContainers&lt;/a&gt; (CQRS, DDD, Microservices)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/microsoftarchive/cqrs-journey"&gt;Microsoft patterns &amp;amp; pratices CQRS Journey sample application&lt;/a&gt; (CQRS, DDD, Event Sourcing, SAGA transactions)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;«A perfect example of this [you can see] if you go look at the CQRS and Event Sourcing by Microsoft Patterns and Practices, which is heavily focused on doing this inside of Azure using their toolkits.»&lt;/p&gt;
&lt;p&gt;- Greg Young, «&lt;a class="reference external" href="https://youtu.be/LDW0QWie21s?t=1092"&gt;A Decade of DDD, CQRS, Event Sourcing&lt;/a&gt;» at 18:15&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/kgrzybek/modular-monolith-with-ddd"&gt;Full Modular Monolith application with Domain-Driven Design approach&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/kgrzybek/sample-dotnet-core-cqrs-api"&gt;Sample .NET Core REST API CQRS implementation with raw SQL and DDD using Clean Architecture&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/kgrzybek/refactoring-from-anemic-to-rich-domain-model-example"&gt;Refactoring from anemic to rich Domain Model example&lt;/a&gt; by Kamil Grzybek&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/VaughnVernon/IDDD_Samples_NET"&gt;Sample Bounded Contexts for C#.NET from the book «Implementing Domain-Driven Design»&lt;/a&gt; by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/VaughnVernon/IDDD_Samples"&gt;Sample Bounded Contexts from the book «Implementing Domain-Driven Design»&lt;/a&gt; by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vlingo/xoom-examples"&gt;xoom-examples&lt;/a&gt; - the VLINGO XOOM examples demonstrating features and functionality available in the reactive components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implementation of samples from the book «Domain-Driven Design» by Eric Evans in &lt;a class="reference external" href="https://github.com/citerus/dddsample-core"&gt;Java&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/SzymonPobiega/DDDSample.Net"&gt;C#&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/paulrayner/ddd_sample_app_ruby"&gt;Ruby&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/marcusolsson/goddd"&gt;Golang&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/go-kit/kit/tree/master/examples/shipping"&gt;yet another Golang&lt;/a&gt;). See also &lt;a class="reference external" href="https://www.citerus.se/go-ddd"&gt;the article&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://goa.design/"&gt;Goa&lt;/a&gt; provides a holistic approach for developing remote APIs and microservices in Go.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/gregoryyoung/m-r"&gt;Simple CQRS example&lt;/a&gt; by Greg Young (приложение так же реализует Event Sourcing)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/thinkbeforecoding/m-r"&gt;Greg Young’s Simple CQRS in F#&lt;/a&gt; by Jérémie Chassaing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example"&gt;Complete serverless application to show how to apply DDD, Clean Architecture, and CQRS by practical refactoring of a Go project&lt;/a&gt; (&lt;a class="reference external" href="https://threedots.tech/post/serverless-cloud-run-firebase-modern-go-application/"&gt;more info&lt;/a&gt;) by Robert Laszczak&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/ThreeDotsLabs/monolith-microservice-shop"&gt;Clean Monolith Shop&lt;/a&gt; by Robert Laszczak - Source code for &lt;a class="reference external" href="https://threedots.tech/post/microservices-or-monolith-its-detail/"&gt;Why using Microservices or Monolith can be just a detail?&lt;/a&gt; article&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonStoeckl/go-iddd"&gt;go-iddd - showcase project for implementing DDD in Go&lt;/a&gt; by Anton Stöckl (see more info &lt;a class="reference external" href="https://medium.com/@TonyBologni/implementing-domain-driven-design-and-hexagonal-architecture-with-go-1-292938c0a4d4"&gt;here&lt;/a&gt; and &lt;a class="reference external" href="https://medium.com/@TonyBologni/implementing-domain-driven-design-and-hexagonal-architecture-with-go-2-efd432505554"&gt;here&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/asynkron/realtimemap-go"&gt;Real-time Map&lt;/a&gt; displays real-time positions of public transport vehicles in Helsinki. It’s a showcase for &lt;a class="reference external" href="https://proto.actor/"&gt;Proto.Actor&lt;/a&gt; - an ultra-fast distributed actors solution for Go, C#, and Java/Kotlin. See also &lt;a class="reference external" href="https://github.com/asynkron/realtimemap-dotnet"&gt;realtimemap-dotnet&lt;/a&gt; implementation in .NET.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/johnbywater/es-example-taxi-demo"&gt;Demo taxi system, using eventsourcing library&lt;/a&gt; by John Bywater&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/johnbywater/es-example-bank-accounts"&gt;Example «bank accounts» application using the Python eventsourcing library&lt;/a&gt; by John Bywater&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/johnbywater/es-example-cargo-shipping"&gt;Example «cargo shipping» application using the Python eventsourcing library&lt;/a&gt; by John Bywater&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/johnbywater/eventsourcing/tree/main/eventsourcing/examples"&gt;Examples of using eventsourcing library&lt;/a&gt; by John Bywater&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/microservices-patterns/ftgo-application"&gt;FTGO example application. Example code for the book Microservice patterns&lt;/a&gt; by Chris Richardson&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/eventuate-tram/eventuate-tram-examples-customers-and-orders/"&gt;Eventuate Tram Customers and Orders&lt;/a&gt; by Chris Richardson&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/eventuate-examples/eventuate-tram-core-dotnet-examples-customers-and-orders"&gt;Eventuate Tram Customers and Orders - .NET version&lt;/a&gt; by Chris Richardson&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/eventuate-examples"&gt;eventuate-examples&lt;/a&gt; by Chris Richardson&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/elbandit/PPPDDD"&gt;Sample code for the book Principles, Practices and Patterns of Domain-Driven Design&lt;/a&gt; by Scott Millett, Nick Tune&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/PacktPublishing/Hands-On-Domain-Driven-Design-with-.NET-Core"&gt;Hands-On Domain-Driven Design with .NET Core, published by Packt&lt;/a&gt; by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;«&lt;a class="reference external" href="https://github.com/Eventuous/dotnet-sample"&gt;dotnet-sample&lt;/a&gt;» - Sample application using Eventuous .NET by Alexey Zimarev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/swlaschin/DomainModelingMadeFunctional"&gt;Extended code samples related to the book «Domain Modeling Made Functional»&lt;/a&gt; by Scott Wlaschin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/swlaschin/Railway-Oriented-Programming-Example"&gt;Railway-Oriented-Programming-Example&lt;/a&gt; by Scott Wlaschin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/VaughnVernon/DDDwithActors"&gt;DDD with Actors&lt;/a&gt; by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/VaughnVernon/ReactiveMessagingPatterns_ActorModel"&gt;The examples for the book «Reactive Messaging Patterns with the Actor Model»&lt;/a&gt; by Vaughn Vernon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/VaughnVernon/reactive-stock-trader"&gt;A Stock Trader system to demonstrate reactive systems development&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/RedElastic/reactive-stock-trader"&gt;source&lt;/a&gt; by RedElastic)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/jbogard/ContosoUniversityDotNetCore-Pages"&gt;ContosoUniversityDotNetCore-Pages&lt;/a&gt; by Jimmy Bogard&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/RedElastic/reactive-stock-trader"&gt;RedElastic: reactive-stock-trader&lt;/a&gt; - A reference architecture for stock trading to demonstrate the concepts of reactive systems development. Based on the original Stock Trader by IBM and implemented with Lagom by Lightbend. «&lt;a class="reference external" href="https://developer.ibm.com/series/reactive-in-practice/"&gt;Reactive in practice: A complete guide to event-driven systems development in Java.&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/IBMStockTrader"&gt;IBM Stock Trader&lt;/a&gt; - Org containing a repository per microservice in the IBM Stock Trader cloud-native sample application. «&lt;a class="reference external" href="https://developer.ibm.com/blogs/introducing-stocktrader/"&gt;Introduction to the IBM Stock Trader sample.&lt;/a&gt;»&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/AnemicDomainModel"&gt;Refactoring from Anemic Domain Model Towards a Rich One&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/DddInAction"&gt;DDD in Practice&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/DddAndEFCore"&gt;DDD and EF Core&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/CqrsInPractice"&gt;CQRS in Practice&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/FuntionalPrinciplesCsharp"&gt;Applying Functional Principles in C#&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/SpecPattern"&gt;Specification Pattern in C#&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/SpecificationPattern"&gt;Specification pattern implementation in C#&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/vkhorikov/ValidationInDDD"&gt;Validation in DDD course&lt;/a&gt; by Vladimir Khorikov&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Варианты реализации OO/Functional Aggregates на примере Reference Applications by Chris Richardson:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/cer/event-sourcing-examples/tree/master/java-spring"&gt;Traditional OO mutable Domain Objects&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/cer/event-sourcing-using-scala-typeclasses"&gt;Functional Scala witn immutable Domain Objects&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/cer/event-sourcing-examples/tree/master/scala-spring"&gt;Hybrid OO/Functional Scala with immutable Domain Objects&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Others:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/heynickc/awesome-ddd#sample-projects"&gt;DDD Sample Projects&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><pubDate>Tue, 23 Nov 2021 00:00:00 </pubDate></item></channel></rss>