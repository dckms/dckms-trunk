:canonical-base-url: https://dckms.github.io/system-architecture

.. index:: Soft Skills

.. index::
   single: Planning; in Self-education
   :name: emacsway-success-roadmap


================================
Как стать успешным разработчиком
================================

.. sectionauthor:: Ivan Zakrevsky

..

    "My career mission is to help geeks feel safe in the world."

    -- Kent Beck, description of his Linkedin profile

.. contents:: Содержание

По поводу "`Эффекта Самозванца <https://ru.m.wikipedia.org/wiki/%D0%A1%D0%B8%D0%BD%D0%B4%D1%80%D0%BE%D0%BC_%D1%81%D0%B0%D0%BC%D0%BE%D0%B7%D0%B2%D0%B0%D0%BD%D1%86%D0%B0>`__" (ощущение того, что человек не заслуживает профессиональной позиции, полагая, что окружающие ошибочно думают иначе).
Видно, что эта тема многих беспокоит.
Мне даже известны люди, которые не выдержали напряжения и бросили разработку.

Хотя этот термин здесь не совсем корректно употреблен, и означает он немного другую проблему, но в индустрии этот термин хорошо закрепился и многим понятен.

Наверное, каждого разработчика волнует вопрос его эффективности.
Чаще всего собственная недооценка провоцируется хронической неуспеваемостью, о чем и пойдет речь далее.

Нужно учитывать, что через "Долину Отчаяния" на графике `Даннинга-Крюгера <https://ru.m.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%94%D0%B0%D0%BD%D0%BD%D0%B8%D0%BD%D0%B3%D0%B0_%E2%80%94_%D0%9A%D1%80%D1%8E%D0%B3%D0%B5%D1%80%D0%B0>`__ проходят все.
Если вы относите причины неуспеваемости на свой счет, то, вероятно, в вашей компании что-то не так с процессами, которые искажают это восприятие.
Впрочем, подобный уровень организации процессов является, скорее, правилом на рынке труда, чем исключением.


1. Учимся писать экономически эффективный код
=============================================

Первым важным навыком на пути к обретению успеваемости является умение писать :doc:`экономически эффективный код </emacsway/it/sdlc/uncertainty-management/adaptation/crash-course-in-software-development-economics>` с :ref:`пологим характером роста стоимости его изменения <emacsway-agile-development>`.
На эту тему было написано :doc:`немало книг <self-education-for-software-engineer>`.
Не понимая истинных причин снижения velocity, человек склонен относить это на свой счет, что препятствует их обнаружению и устранению.


2. Обучаем команду
==================

Второй важный навык выводится исходя из модели коллективного владения кодом.
Вы работаете по большей части с кодом, написанным другими участниками команды.
Вы тратите на его чтение, понимание и изменение основную часть времени.
От его качества зависит и ваша персональная успеваемость.

Здесь есть несколько вариантов:

1. Попасть в струю коллектива, которая работает с качественным кодом. Для этого нужно уметь их собой заинтересовать, поэтому см. п.1.
2. Изолироваться от командного legacy и начать формировать новую кодовую базу под себя (вариант кажется фантастическим, но, тем не менее, вполне реальнен).
3. Влиять на коллектив, и вместе с коллективом изменять код. Этот вариант тоже возможен, но требует обладания совокупностью качеств. Больше всего мне в этом вопросе помогла книга "Extreme Programming Explained" 1st edition by Kent Beck.

Полученные знания нужно умело применять.
Здесь важно понять, с какой стороны начать.
Этот вопрос хорошо освещает статья "`Системное мышление <https://less.works/ru/less/principles/systems-thinking.html>`__ by Craig Larman.


3. Организовываем процессы
==========================

Итак. Теперь вы можете писать высокоэффективный код вместе с командой.
Но это еще не победа.
Успешность во многом зависит от качества организации процессов.
Одно неверное управленческое решение, и команда демотивирована, уходят ключевые специалисты, возникают разногласия и конфликты.

Попасть работать к хорошему менедженту хотя и возможно, но это сложнее, чем попасть работать в хорошую команду.
А это значит, что вы можете рассчитывать только на себя.

Наиболее частые проблемы исходят из-за неверного распределения обязанностей, например, когда продакт занимается не требованиями, а реализацией.
Или методика оценивания задач не соответствует уровню культуры коллектива - индивидуальная оценка задачи может повысить точность планирования в зрелом коллективе, а может напрочь убить взаимопомощь и распространение знаний в развивающемся коллективе, и разогнать комплекс неполноценности до уровня психологического предела (см. "Agile Estimating and Planning" by Mike Cohn), особенно, если при этом еще и путают оценку с обязательством.
Непонимание того, чем является макет UX/UI дизайна (problem vs. solution space) приводит конфликту между продактом и командой.
Неудачная топология заблокирует автономность команд, и команды будут бОльшую часть времени потопать в дискуссиях.
Список можно продолжать.
Вообще, по моим наблюдением, качество организации процессов является основной причиной увольнения значимых специалистов.

Собственно, даже Steve McConnell советовал в некоторых случаях "голосовать ногами".
Вот только вероятность того, что на новом месте менеджмент будет поставлен получше, не сильно высокая.

Поскольку процессы влияют на вас, то вы можете изменить свое положение, влияя на процессы.
Поэтому, грамотный специалист должен уметь :doc:`разбираться в процессах </emacsway/it/sdlc/sdlc-reference>`.


4. Изменяем коллектив
=====================

И, наконец, мы подходим к самой сложной карьерной проблеме - это :doc:`осуществление изменений в коллективе </emacsway/soft-skills/change-making>` с точки зрения :doc:`коммуникативной, социальной и управленческой психологии </emacsway/soft-skills/cognitive-biases>`.
Мало знать, что нужно изменить, нужно еще иметь понимание как это осуществить.

.. seealso::

   - ":doc:`./self-education-for-software-engineer`"
   - ":ref:`emacsway-planning-in-psychology`"
   - ":ref:`emacsway-learning-in-psychology`"
   - ":doc:`/README`"
