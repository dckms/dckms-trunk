:canonical-base-url: https://dckms.github.io/system-architecture

.. index::
   single: Encapsulation; in Golang
   :name: emacsway-golang-encapsulation

====================================================
–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ê–≥—Ä–µ–≥–∞—Ç –≤ –ë–î –Ω–µ —Ä–∞–∑—Ä—É—à–∞—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏?
====================================================

.. sectionauthor:: Ivan Zakrevsky

–ò–Ω–≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–∏—à–µ–Ω—ã —Å–º—ã—Å–ª–∞ —Å–≤–æ–µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ —É—Å–ª–æ–≤–∏—è—Ö –¥—ã—Ä—è–≤–æ–π, –∫–∞–∫ —Ä–µ—à–µ—Ç–æ, –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏.
–í–æ–ø—Ä–æ—Å –≤ —Ç–æ–º, –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—é –ê–≥—Ä–µ–≥–∞—Ç–æ–≤ –≤ Golang, –∫–æ–≥–¥–∞ –Ω–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞, –∏–ª–∏, –Ω–∞–æ–±–æ—Ä–æ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ê–≥—Ä–µ–≥–∞—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞.

.. contents:: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ


Memento pattern
===============

Memento –æ–∫–∞–∑–∞–ª—Å—è –±–ª–∏–∑–∫–æ, –Ω–æ –Ω–µ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é. –°—É—Ç—å Memento –≤ —Ç–æ–º, —á—Ç–æ –æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∏–∫–æ–º—É, –∫—Ä–æ–º–µ —Å–≤–æ–µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è:

    1. Preserving encapsulation boundaries. Memento avoids exposing information that only an originator should manage but that must be stored nevertheless outside the originator.
       The pattern shields other objects from potentially complex Originator internals, thereby preserving encapsulation boundaries.

    -- "Design Patterns: Elements of Reusable Object-Oriented Software" by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides

–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, —ç—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏, —Å–º. `–∑–¥–µ—Å—å <https://github.com/microsoftarchive/cqrs-journey/blob/6ffd9a8c8e865a9f8209552c52fa793fbd496d1f/source/Conference/Registration/SeatsAvailability.cs#L237>`__ –∏ `–∑–¥–µ—Å—å <https://github.com/microsoftarchive/cqrs-journey/blob/6ffd9a8c8e865a9f8209552c52fa793fbd496d1f/source/Infrastructure/Azure/Infrastructure.Azure/EventSourcing/AzureEventSourcedRepository.cs#L31>`__.

    üí¨ The event is stored using some form of serialization, for the rest of this discussion the mechanism will assumed to be built in serialization although the use of the memento pattern can be highly advantageous.

    <...>

    Many use the default serialization package available with their platform with good results though the Memento pattern is quite useful when dealing with snapshots. The Memento pattern (or custom serialization) better insulates the domain over time as the structure of the domain objects change. The default serializer has versioning problems when the new structure is released (the existing snapshots must either deleted and recreated or updated to match the new schema). The use of the Memento pattern allows the separated versioning of the snapshot schema from the domain object itself.

    -- "`CQRS Documents by Greg Young <https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf>`__"


Walker
======

Walker –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Visitor —Å —Ü–µ–ª—å—é —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—é –ê–≥—Ä–µ–≥–∞—Ç–æ–≤. –ö —á–∏—Å–ª—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Visitor –æ—Ç–Ω–æ—Å–∏—Ç—Å—è:

    6. Breaking encapsulation. Visitor's approach assumes that the ConcreteElement interface is powerful enough to let visitors do their job.
    As a result, the pattern often forces you to provide public operations that access an element's internal state, which may compromise its encapsulation.

    -- "Design Patterns: Elements of Reusable Object-Oriented Software" by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides

–ß—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å Walker –≤ —Å–ª—É—á–∞–µ –æ–±—Ö–æ–¥–∞ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ê–≥—Ä–µ–≥–∞—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –°—É—â–Ω–æ—Å—Ç—è–º–∏?
–í–µ—Ä–æ—è—Ç–Ω–æ, —ç—Ç–æ –±—É–¥–µ—Ç –±—É–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —Ç.–µ. –Ω–µ–∫–∏–π –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç, –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–π –Ω–µ–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö.
–≠—Ç–æ –ª–∏—à–∞–µ—Ç —Å–º—ã—Å–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Visitor, –µ—Å–ª–∏ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏—á–µ–º, –∞–±—Å—Ç—Ä–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ç SQL.

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫:

.. code-block:: go

    type Walkable interface {
        Accept(Walker)
    }

    type Walker interface {
        SetField(string)
        WalkWalkable(Walkable)
        WalkUint8(uint8)
        WalkUint64(uint64)
        WalkUint(uint)
        WalkTime(time.Time)
    }


.. code-block:: go

    func (e Endorsement) Accept(walker interfaces.Walker) {
        walker.SetField("endorserId")
        walker.WalkWalkable(e.endorserId)
        walker.SetField("endorserGrade")
        walker.WalkWalkable(e.endorserGrade)
        // ...
    }

.. code-block:: go

    func (id EndorserId) Accept(walker interfaces.Walker) {
        walker.WalkUint64(id.Value())
    }


–ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–º –ø–æ–∫–∞ –µ—â–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –ê–≥—Ä–µ–≥–∞—Ç–æ–≤, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –≤ SQL-–∑–∞–ø—Ä–æ—Å—ã –∏—Ö –°—É—â–Ω–æ—Å—Ç–µ–π.

–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑–º–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–µ–∂–¥—É Walkers –∏ Repositories, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç "–†–∞–∑–ª–µ—Ç –î—Ä–æ–±–∏" (Code Smell) –≤ —Å–ª—É—á–∞–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è SQL (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å–ª—É—á–∞–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∏–∞–ª–µ–∫—Ç–∞ –ë–î –∏–ª–∏ –≤ —Å–ª—É—á–∞–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ QueryBuilder).
Walker –Ω–∞—á–∏–Ω–∞–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–º –æ –¥–µ—Ç–∞–ª—è—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Repository.

–í —Ü–µ–ª—è—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è DRY –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å –≤–æ–∑–ª–æ–∂–∏—Ç—å –Ω–∞ Walker –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–∏ SQL, –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –µ–≥–æ –æ—Ç –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∑–Ω–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –ë–î, —á—Ç–æ –±—É–¥–µ—Ç —Ä–∞–∑—Ä—ã–≤–∞—Ç—å –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ SQL –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø–æ–¥—Ä—ã–≤–∞—Ç—å Cohesion.


Valuer & Scanner
================

- `Valuer <https://pkg.go.dev/database/sql/driver#Valuer>`__
- `Scanner <https://pkg.go.dev/database/sql#Scanner>`__

–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Scanner –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–≤–µ—Ä—å –∫ –∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç–∏ ValueObject, —á—Ç–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –µ–≥–æ —Å—É—Ç–∏.
–ê —Ç–∞–∫ –∂–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–µ—à—å –≤ –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ –ê–≥—Ä–µ–≥–∞—Ç–∞.
–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ —Ä–∞–¥–∏, —Å—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –º–æ–∂–Ω–æ –µ–≥–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –º—É—Ç–∏—Ä—É–µ–º—ã–º, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—è, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ.

–ù–æ –µ—Å—Ç—å –µ—â–µ –æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç - –º–µ—Ç–æ–¥ ``Scan(src any) error`` –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞, —á—Ç–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞—Ç—Ç–µ—Ä–Ω–∞, –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–∞–∫ `Special Case <https://martinfowler.com/eaaCatalog/specialCase.html>`__ –∏–ª–∏ `Null Object <https://refactoring.com/catalog/introduceSpecialCase.html>`__.
–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏.
–í–æ–ø—Ä–æ—Å –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–ª—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "4. Validating historical data" —Å—Ç–∞—Ç—å–∏ "`Always-Valid Domain Model <https://enterprisecraftsmanship.com/posts/always-valid-domain-model/>`__" by Vladimir Khorikov –∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "6. The use of ORMs within and outside of the always-valid boundary" —Å—Ç–∞—Ç—å–∏ "`Database and Always-Valid Domain Model <https://enterprisecraftsmanship.com/posts/database-always-valid-domain-model/>`__" by Vladimir Khorikov.

–° –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, Valuer –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã, –∞ –∑–Ω–∞—á–∏—Ç, –æ–Ω –Ω–µ –ø—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –ê–≥—Ä–µ–≥–∞—Ç–∞:


    It is either nil, a type handled by a database driver's NamedValueChecker interface, or an instance of one of these types:

    - int64
    - float64
    - bool
    - []byte
    - string
    - time.Time

    -- `–ò—Å—Ç–æ—á–Ω–∏–∫ <https://pkg.go.dev/database/sql/driver#Value>`__


Reflection
==========

–í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ `–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç <https://pkg.go.dev/reflect#Value.FieldByName>`__ –∫–∞–∫–∏–µ-–ª–∏–±–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —Ä–µ—Ñ–ª–µ–∫—Ü–∏–∏.

–ú–æ–∂–µ—Ç –±—ã—Ç—å —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ –±—ã - —è –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª.
–ù–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –≤ production –¥–ª—è —Ç–∞–∫–∏—Ö —Ü–µ–ª–µ–π –∫–∞–∫-—Ç–æ –Ω–µ —Å–∏–ª—å–Ω–æ —Ö–æ—á–µ—Ç—Å—è, –≤ —Ç.—á. –∏ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
–ö —Ç–æ–º—É –∂–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —è–≤–ª—è–µ—Ç—Å—è, –ø–æ —Å—É—Ç–∏, –µ—â–µ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º –ø—Ä–æ–±–∏—Ç—å –±—Ä–µ—à—å –≤ –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏.

–ü–æ—Ö–æ–∂–∏–π —Ç—Ä—é–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `–∑–¥–µ—Å—å <https://stackoverflow.com/a/25405485>`__:

.. code-block:: go
   :caption: `How to marshal struct when some members are protected/inner/hidden <https://stackoverflow.com/a/25405485>`__

   package main

   import (
       "fmt"
       "reflect"

       "github.com/bitly/go-simplejson"
   )

   type A struct {
       name string `json:"name"`
       code string `json:"code"`
   }

   func marshal(a A) ([]byte, error) {
       j := simplejson.New()
       va := reflect.ValueOf(&a)
       vt := va.Elem()
       types := reflect.TypeOf(a)
       for i := 0; i < vt.NumField(); i++ {
           j.Set(types.Field(i).Tag.Get("json"), fmt.Sprintf("%v", reflect.Indirect(va).Field(i)))
       }
       return j.MarshalJSON()
   }

   func main() {
       a := A{name: "jessonchan", code: "abc"}
       b, _ := marshal(a)
       fmt.Println(string(b))
   }


Exporter
========

1. Accepting interface (Mediator)
---------------------------------

–¢–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –≤ –∫–Ω–∏–≥–µ "`Implementing Domain-Driven Design <https://kalele.io/books/>`__" by Vaughn Vernon:

    Use a Mediator to Publish Aggregate Internal State

    To work around the problem of tight coupling between the model and its clients, you may choose to design Mediator
    [Gamma et al.] (aka Double-Dispatch and Callback) interfaces to which the Aggregate publishes its internal state.
    Clients would implement the Mediator interface, passing the implementer‚Äôs object reference to the Aggregate as a method argument.
    The Aggregate would then double-dispatch to that Mediator to publish the requested state, all without revealing its shape or structure.
    The trick is to not wed the Mediator‚Äôs interface to any sort of view specification, but to keep it focused on rendering
    Aggregate states of interest:

    .. code-block:: java

       public class BacklogItem ... {
           ...
           public void provideBacklogItemInterest(BacklogItemInterest anInterest) {
               anInterest.informTenantId(this.tenantId().id());
               anInterest.informProductId(this.productId().id());
               anInterest.informBacklogItemId(this.backlogItemId().id());
               anInterest.informStory(this.story());
               anInterest.informSummary(this.summary());
               anInterest.informType(this.type().toString());
           ...
           }
           public void provideTasksInterest(TasksInterest anInterest) {
               Set<Task> tasks = this.allTasks();
               anInterest.informTaskCount(tasks.size());
               for (Task task : tasks) {
               ...
               }
           }
           ...
       }

    The various interest providers may be implemented by other classes, much the same way that Entities (5) describe the way
    validation is delegated to separate validator classes.

    Be aware that some will consider this approach completely outside the responsibility of an Aggregate. Others will consider
    it a completely natural extension of a well-designed domain model.
    As always, such trade-offs must be discussed by your technical team members.

–°—Å—ã–ª–∫–∏ –ø–æ —Ç–µ–º–µ:

- "`More on getters and setters <https://www.infoworld.com/article/2072302/more-on-getters-and-setters.html>`__" by Allen Holub
- "`Save and load objects without breaking encapsulation <https://stackoverflow.com/questions/24921227/save-and-load-objects-without-breaking-encapsulation>`__" at Stackoverflow

–ò–¥–µ—é —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ:

.. code-block:: java
   :caption: `Example by Allen Holub <https://www.infoworld.com/article/2072302/more-on-getters-and-setters.html>`__
   :name: emacsway-code-exporter-example-1

    import java.util.Locale;

    public class Employee
    {   private Name        name;
        private EmployeeId  id;
        private Money       salary;

        public interface Exporter
        {   void addName    ( String name   );
            void addID      ( String id     );
            void addSalary  ( String salary );
        }

        public interface Importer
        {   String provideName();
            String provideID();
            String provideSalary();
            void   open();
            void   close();
        }

        public Employee( Importer builder )
        {   builder.open();
            this.name   = new Name      ( builder.provideName()     );
            this.id     = new EmployeeId( builder.provideID()       );
            this.salary = new Money     ( builder.provideSalary(),
                                          new Locale("en", "US")    );
            builder.close();
        }

        public void export( Exporter builder )
        {   builder.addName  ( name.toString()   );
            builder.addID    ( id.toString()     );
            builder.addSalary( salary.toString() );
        }

        //...
    }

–ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:

.. literalinclude:: _media/aggregate-encapsulation/exporter_1.go
   :language: go

–ò–ª–∏ –Ω–∞ –±–æ–ª–µ–µ –ª–∞–∫–æ–Ω–∏—á–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ:

.. code-block:: java
   :caption: `Example from Stackoverflow <https://stackoverflow.com/questions/24921227/save-and-load-objects-without-breaking-encapsulation>`__
   :name: emacsway-code-exporter-example-2

    interface PersonImporter {

        public int getAge();

        public String getId();
    }

    interface PersonExporter {

        public void setDetails(String id, int age);

    }

    class Person {

        private int age;
        private String id;

        public Person(PersonImporter importer) {
            age = importer.getAge();
            id = importer.getId();
        }

        public void export(PersonExporter exporter) {
            exporter.setDetails(id, age);
        }

    }

–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Ñ–µ–π—Å—ã, –∏ —ç—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω–æ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–∫–ª–∞—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º —Ç–∏–ø (—Å—Ç—Ä—É–∫—Ç—É—Ä—É), –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Å–µ—Ç—Ç–µ—Ä—ã.
–í—Ä—è–¥ –ª–∏ –∫—Ç–æ-—Ç–æ –±—É–¥–µ—Ç —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ–±—è–∑–∞—Ç—å –ê–≥—Ä–µ–≥–∞—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.

    üí¨Ô∏è "–¶–µ–ª—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è ‚Äî —É–º–µ–Ω—å—à–∏—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã.

    The goal of software architecture is to minimize the human resources required to build and maintain the required system."

    -- "Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin, –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"

:ref:`–í—Ç–æ—Ä–æ–π <emacsway-code-exporter-example-2>` –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ç—Ç–µ—Ä, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–Ω–µ–µ –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–º.
–≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —É—Å—Ç—É–ø–∞–µ—Ç –ø–µ—Ä–≤–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É —Ç–µ–º, —á—Ç–æ –≤ —Å–ª—É—á–∞–µ –æ–¥–Ω–æ–∏–º–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ ``setDetails`` –Ω–µ–ª—å–∑—è –æ–±–æ–π—Ç–∏ –æ–¥–Ω–∏–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–º —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–≥—Ä–µ–≥–∞—Ç –∏ –µ–≥–æ –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–æ–±–Ω—ã–º –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ SQL-–∑–∞–ø—Ä–æ—Å–∞.
–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏–¥–µ—Ç—Å—è –∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è, —á—Ç–æ –ª–∏—à–∞–µ—Ç –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º.
–¢–∞–∫–∂–µ –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–±–ª–∞–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ–ª—å—à–µ–π —Ö—Ä—É–ø–∫–æ—Å—Ç—å—é –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π, –ª–∏–±–æ –∏—Ö —É–¥–∞–ª–µ–Ω–∏–∏.

–ù–µ–º–Ω–æ–≥–æ —Å–º—É—â–∞–µ—Ç —Å–º–µ—à–∏–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–¥–∏–≥–º FP –∏ OOP –¥–ª—è ValueObject.
–•–æ—Ç—è ValueObject –∏ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–º, –Ω–æ —Å–∞–º —Ñ–∞–∫—Ç —Ç–æ–≥–æ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç –≤—ã–∑—ã–≤–∞–µ—Ç –º—É—Ç–∏—Ä—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥—Ä—É–≥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–µ —Å–º—É—â–µ–Ω–∏–µ.
–í–æ–∑–Ω–∏–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å - –ø–æ—á–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –≤–∑—è—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç?
–ï—Å–ª–∏ –±—ã Golang –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å Generics –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, —Ç–æ–≥–¥–∞ –º–æ–≥–ª–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å—Å—è —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ ``Endorser.Export[T](exporterFactory function(attr1, attr2, attr3) T) T``.
–û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å —ç—Ç—É –º—ã—Å–ª—å, —Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–º, —á—Ç–æ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –æ–±—Ö–æ–¥–∞ –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–≤–∞–Ω–∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º OOP.

–ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª Michael Feathers:

    üí¨Ô∏è "OO makes code understandable by encapsulating moving parts.
    FP makes code understandable by minimizing moving parts."
    -- `Michael Feathers <https://twitter.com/mfeathers/status/29581296216>`__

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–µ–π—Å–∞—Ö –¥–µ–ª–∞–µ—Ç –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ–ª–µ–µ –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–º–∏.

–ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º :ref:`—á–µ—Ä–Ω–æ–≥–æ —è—â–∏–∫–∞ <emacsway-tdd-black-box>`, —Ç.–µ. —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ, –Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–æ –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ê–≥—Ä–µ–≥–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î.

    üí¨Ô∏è "–î–∞–≤–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–æ–º —Ö–æ—Ä–æ—à–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
    –®–∞–±–ª–æ–Ω ¬´–°–∫—Ä–æ–º–Ω—ã–π –æ–±—ä–µ–∫—Ç¬ª ‚Äî —Ö–æ—Ä–æ—à–∏–π –ø—Ä–∏–º–µ—Ä, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ä–∞–∑–¥–µ–ª –º–µ–∂–¥—É –ª–µ–≥–∫–æ –∏ —Ç—è–∂–µ–ª–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–º–∏ —á–∞—Å—Ç—è–º–∏ —á–∞—Å—Ç–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏.
    –†–∞–∑–¥–µ–ª –º–µ–∂–¥—É –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ç–æ—Ä–∞–º–∏ –∏ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏ -- –æ–¥–Ω–∞ –∏–∑ —Ç–∞–∫–∏—Ö –≥—Ä–∞–Ω–∏—Ü, –Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö.

    It has long been known that testability is an attribute of good architectures.
    The Humble Object pattern is a good example, because the separation of the behaviors into testable and non-testable parts often defines an architectural boundary.
    The Presenter/View boundary is one of these boundaries, but there are many others."

    -- "Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin, –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"


2. Returning structure
----------------------

–í–æ–∑–Ω–∏–∫–∞–µ—Ç —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å –æ–±–ª–µ–≥—á–∏—Ç—å –º–µ—Ç–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–∏–¥–∞–≤ –µ–º—É —Å–∏–≥–Ω–∞—Ç—É—Ä—É ``Endorser.Export() EndorserState`` –≤–º–µ—Å—Ç–æ ``Endorser.ExportTo(ex EndorserExporter)``.
–í Python –¥–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å –¥–∞–∂–µ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã \__getstate\__() –∏ \__setstate\__().
–ü–æ–ª—É—á–∏—Ç—Å—è —á—Ç–æ-—Ç–æ —Ç–∏–ø–∞ DTO —Å —Ç–µ–º –ª–∏—à—å –æ—Ç–ª–∏—á–∏–µ–º, —á—Ç–æ –æ–Ω –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –Ω–µ —Å–µ—Ç–µ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã, –∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ –ê–≥—Ä–µ–≥–∞—Ç–∞.
–í Golang —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–≥–ª—è–¥–∏—Ç —á—É—Ç—å –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º, —Ö–æ—Ç—è –∏ –º–µ–Ω–µ–µ OOP, –Ω–æ –∑–∞—Ç–æ –Ω–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∏—Ä—É–µ—Ç —Å FP –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ Value Object.

–û —Ç–∞–∫–æ–º –∂–µ –ø—Ä–∏–Ω—Ü–∏–ø–µ —ç—Ç–æ–º –ø–∏—Å–∞–ª Robert C. Martin:

    üí¨Ô∏è "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ç–æ—Ä—ã —è–≤–ª—è—é—Ç—Å—è —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å—é —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ¬´–°–∫—Ä–æ–º–Ω—ã–π –æ–±—ä–µ–∫—Ç¬ª (Humble Object), –ø–æ–º–æ–≥–∞—é—â–µ–≥–æ –≤—ã—è–≤–ª—è—Ç—å –∏ –∑–∞—â–∏—â–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã.

    Presenters are a form of the Humble Object pattern, which helps us identify and protect architectural boundaries."

    üí¨Ô∏è "–û–±—ã—á–Ω–æ —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ –ø—Ä–æ—Å—Ç—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä.
    –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–µ–π—à–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–ª–∏ –æ–±—ä–µ–∫—Ç—ã –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö (Data Transfer Objects; DTO).
    –î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
    –ò–ª–∏ —É–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å –∏—Ö –≤ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –∏–ª–∏ –æ–±—ä–µ–∫—Ç—ã.
    –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏—Å—å –ø—Ä–æ—Å—Ç—ã–µ, –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö.
    –ù–µ –Ω—É–∂–Ω–æ —Ö–∏—Ç—Ä–∏—Ç—å –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.

    –ù–∞–ø—Ä–∏–º–µ—Ä, –º–Ω–æ–≥–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    –ò—Ö –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å ¬´–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–µ–π¬ª.
    –¢–∞–∫–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—ã –≤–Ω—É—Ç—Ä—å.
    –≠—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥ –∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –æ –≤–Ω–µ—à–Ω–µ–º –∫—Ä—É–≥–µ.
    –ò—Ç–∞–∫, –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—É –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–æ—Ä–º—É, –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫—Ä—É–≥–∞.

    Typically the data that crosses the boundaries consists of **simple data structures**.
    You can use **basic structs or simple data transfer objects** if you like.
    Or the data can simply be arguments in function calls.
    Or you can pack it into a hashmap, or construct it into an object.
    The important thing is that isolated, **simple data structures** are passed across the boundaries.
    We don't want to cheat and pass Entity objects or database rows.
    We don't want the data structures to have any kind of dependency that violates the Dependency Rule.

    For example, many database frameworks return a convenient data format in response to a query.
    We might call this a "row structure."
    We don't want to pass that row structure inward across a boundary.
    Doing so would violate the Dependency Rule because it would force an inner circle to know something about an outer circle.

    Thus, when we pass data across a boundary, it is always in the form that is most convenient for the inner circle."

    üí¨Ô∏è "–û–Ω —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Database –≤ –ø–∞–º—è—Ç—å —Å—É—â–Ω–æ—Å—Ç–µ–π Entities —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å DataAccessInterface.
    –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ UseCaseInteractor –∑–∞–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π Entities –∏ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ—Ç –∏–∑ –Ω–∏—Ö –¥—Ä—É–≥–æ–π –ø—Ä–æ—Å—Ç–æ–π Java-–æ–±—ä–µ–∫—Ç OutputData.
    –ó–∞—Ç–µ–º –æ–±—ä–µ–∫—Ç OutputData –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å OutputBoundary –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–æ—Ä—É Presenter.

    It also uses the DataAccessInterface to bring the data used by those Entities into memory from the Database.
    Upon completion, the UseCaseInteractor gathers data from the Entities and constructs the OutputData as another **plain old Java object**.
    The OutputData is then passed through the OutputBoundary interface to the Presenter."

    -- "Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin, –ø–µ—Ä–µ–≤–æ–¥ –û–û–û –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ "–ü–∏—Ç–µ—Ä"

–≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ `Golang DDD ES/CQRS Reference Application <https://github.com/EventStore/training-advanced-go/blob/9cc2b5a4f3484dc643757c88480c4b6e371149fd/domain/doctorday/day.go#L225>`__ –æ—Ç –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤ EventStore.

–ò —Ç–∞–∫–æ–π –∂–µ –ø–æ–¥—Ö–æ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç Nick Tune –≤ `–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º –∫–æ–¥–µ <https://github.com/elbandit/PPPDDD/blob/4d9d864fa6d9dfc0bad323ae21e949be1808b460/21%20-%20Repositories/DDDPPP.Chap21.EFExample/DDDPPP.Chap21.EFExample.Application/Model/Auction/Auction.cs#L48>`__ –∫ —Å–≤–æ–µ–π –∫–Ω–∏–≥–µ.
–ü—Ä–∏—á–µ–º, –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ–Ω –µ–≥–æ –¥–∞–∂–µ `–¥–ª—è Value Object <https://github.com/elbandit/PPPDDD/blob/4d9d864fa6d9dfc0bad323ae21e949be1808b460/21%20-%20Repositories/DDDPPP.Chap21.EFExample/DDDPPP.Chap21.EFExample.Application/Model/Auction/Money.cs#L58>`__.

.. literalinclude:: _media/aggregate-encapsulation/exporter_2.go
   :language: go

–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º —Ç–∞–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —è —É—Å–ø–µ–ª –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è —Ç–æ, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–º–µ–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –≤ –æ—Ç–ª–∏—á–∏–∏ –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
–≠—Ç–æ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±–æ–±—â–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, `–æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ <https://martinfowler.com/eaaCatalog/identityField.html>`__.
–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–ª–æ–¥—è—Ç—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ç–µ–º –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –∫ –Ω—É–∂–Ω–æ–º—É –≤–∏–¥—É.

–í–º–µ—Å—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏ –∏–µ—Ä–∞—Ä—Ö–∏—è –¥–∞–Ω–Ω—ã—Ö, —Ç.–µ. –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–≥—Ä–µ–≥–∞—Ç–∞. –ê –∑–Ω–∞—á–∏—Ç, –∑–∞ –æ–±—Ö–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —É–∂–µ –Ω–µ –∞–≥—Ä–µ–≥–∞—Ç –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –º–µ—Å—Ç–µ, –∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ –º–Ω–æ–¥–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö, —á—Ç–æ —É–¥–æ—Ä–æ–∂–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.

–ó–∞—Ç—Ä—É–¥–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, —Ç.–∫. —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ, –∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ, —á—Ç–æ –∑–Ω–∞—á–∏—Ç - –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä—É–µ–º–æ.

–ó–Ω–∞–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ç–∏–ø–µ –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–µ—Ç –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é generics —Ç–∞–º, –≥–¥–µ —ç—Ç–æ–≥–æ –Ω–µ—Å–ª–æ–∂–Ω–æ –∏–∑–±–µ–∂–∞—Ç—å.

–í–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –µ–µ —Ç–∏–ø–∏–∑–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –∏–∑–±—ã—Ç–æ—á–Ω—ã–º –∑–Ω–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–±–æ–±—â–µ–Ω–∏—é (–∞–±—Å—Ç—Ä–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—é) –∫–ª–∏–µ–Ω—Ç–∞ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏—é –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Repository.
–ì–æ—Ä–∞–∑–¥–æ —É–¥–æ–±–Ω–µ–π –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –±—ã–ª –±—ã –º–∞—Å—Å–∏–≤/—Å—Ä–µ–∑ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ç–∏–ø–æ–º `driver.Value <https://pkg.go.dev/database/sql/driver#Value>`__.
–≠—Ç–æ –µ—â–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –ø–æ–ª—å–∑—É –ø–µ—Ä–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–µ—Ç—Ç–µ—Ä–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –ê–≥—Ä–µ–≥–∞—Ç–∞.

–ü–æ–ø—Ä–æ–±–æ–≤–∞–≤ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, —è –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –≤—Å–µ-—Ç–∞–∫–∏, –Ω–∞ –ø–µ—Ä–≤–æ–º, –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º, –¥–∞–∂–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –µ–≥–æ –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω–æ—Å—Ç—å.


–ò–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
================

–í Golang –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º—É –ø–∞–∫–µ—Ç—É, –ø–æ—ç—Ç–æ–º—É –Ω–µ—Ç –±–æ–ª—å—à–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å Importer/Provider - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å Reconstitutor –≤ —Ç–æ—Ç –∂–µ –ø–∞–∫–µ—Ç.

–í –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–µ–ª–∞—Ç—å Importer/Provider, —á—Ç–æ –æ–±—Ä–∞–∑—É–µ—Ç –±—Ä–µ—à—å –≤ –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏.
–ü–æ—ç—Ç–æ–º—É –∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ–ª–∞—é—Ç –ª–∏–±–æ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è (overloading), –ª–∏–±–æ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∫–ª–∞—Å—Å–∞ - —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞—Ç—å, –Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å.
–ü—Ä–∞–≤–¥–∞, –ø—Ä–∏ —ç—Ç–æ–º –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ IdentityMap –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (commit), –≤–µ–¥—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∏—Ç—å IdentityMap –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

