:canonical-base-url: https://dckms.github.io/system-architecture

.. index::
   single: CanExecute pattern; in Golang
   :name: emacsway-golang-can-execute

=============================================
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ CanExecute pattern?
=============================================

.. sectionauthor:: Ivan Zakrevsky

CanExecute pattern –±—ã–ª –æ–ø–∏—Å–∞–Ω –≤ —Å—Ç–∞—Ç—å–µ "`Validation and DDD <https://enterprisecraftsmanship.com/posts/validation-and-ddd/>`__" by Vladimir Khorikov.

Vladimir Khorikov - –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, —Å–º–µ–ª–æ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –Ω–∞ —Å–µ–±—è –≤—Å–µ —Ä–∏—Å–∫–∏ –ø–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥—Ü–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø–æ–≤–ª–∏—è–ª –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –º–æ–µ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –∑–∞ —á—Ç–æ —è –µ–º—É –æ—á–µ–Ω—å –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª–µ–Ω.

CanExecute pattern, –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –í–ª–∞–¥–∏–º–∏—Ä–æ–º, —è–≤–ª—è–µ—Ç—Å—è, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, –æ—á–µ–Ω—å —É–¥–æ–±–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º, –±–µ–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å —Ç–∞–º, –≥–¥–µ —ç—Ç–æ –≤—ã–∑–≤–∞–Ω–æ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é:

1. –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö (–ø—Ä–æ—Ü–µ—Å—Å–∞—Ö);
2. —Ç–∞–º, –≥–¥–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω–æ-–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, —Ç.–µ. –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å —Ü–µ–ª—å—é –æ—Å—É—â–µ—Å—Ç–≤–∏–º–æ—Å—Ç–∏ –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.

–í —ç—Ç–æ–º —è —É–±–µ–¥–∏–ª—Å—è –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ.

–í –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö, –∫–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CanExecute pattern, –ø—Ä–∏–≤–æ–¥–∏–º—ã–π –≤ —Å—Ç–∞—Ç—å–µ, —Å–≤–æ–¥–∏—Ç—Å—è –∫ CQS principle.

–Ø –æ–±—Å—É–¥–∏–ª —Å –Ω–∏–º —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –∏ –æ–Ω —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å —Ç–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–≤—Å–µ–º –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π.

–í —ç—Ç–æ–º –ø–æ–¥—Ö–æ–¥–µ –º–µ–Ω—è —Å–º—É—â–∞–µ—Ç —Ç–æ—Ç —Ñ–∞–∫—Ç, —á—Ç–æ –æ–±—Ä–∞–∑—É–µ—Ç—Å—è –ª–æ–≥–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å - –∫–ª–∏–µ–Ω—Ç –∫–ª–∞—Å—Å–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∏—Å—Ö–æ–¥—è –∏–∑ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –æ–±–∞ –º–µ—Ç–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç.

–í –∑–∞–º–µ—Ç–∫–µ ":ref:`emacsway-cqs-command-status-code`" —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–ª—Å—è, –ø–æ—ç—Ç–æ–º—É, –ø–æ–≤—Ç–æ—Ä—é—Å—å:

    üí¨Ô∏è "It is important here two deal with two common objections to the side-effect-free style.

    The first has to do with error handling.
    Sometimes a function with side effects is really a procedure, which in addition to doing its job returns a status code indicating how things went.
    But there are better ways to do this; roughly speaking, the proper O-O technique is to **enable the client, after an operation on an object, to perform a query on the status, represented for example by an attribute of the object**, as in

    target.some_operation(...)

    how_did_it_go := target.status

    Note that the technique of returning a status as function result is lame anyway.
    It transforms a procedure into a function by adding the status as a result;
    **but it does not work if the routine was already a function, which already has a result of its own**.
    It is also problematic if you need more than one status indicator.
    In such cases the C approach is either to return a "structure" (the equivalent of an object) with several components, which is getting close to the above scheme, or to use global variables ‚Äî which raises a whole set of new problems, especially in a large system where many modules can trigger errors."

    -- "Object-Oriented Software Construction" 2nd edition by Bertrand Meyer, chapter "23.1 SIDE EFFECTS IN FUNCTIONS"

–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π Bertrand Meyer –∏–∑–±–µ–≥–∞–ª –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—à–∏–±–æ–∫ –≤ —Ç–æ –≤—Ä–µ–º—è, –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ —Ç–æ–≥–¥–∞ –±—ã–ª–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏ –æ—à–∏–±–∫—É.
–°–µ–≥–æ–¥–Ω—è —Ç–∞–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç.
–í Golang —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —è–∑—ã–∫–∞, –∞ –≤ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç Result.

–ù–æ –¥–∞–∂–µ –µ—Å–ª–∏ –∏ —Ä–∞–∑–¥–µ–ª—è—Ç—å, —Ç–æ Bertrand Meyer —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏, –∞ –Ω–µ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π.

