:canonical-base-url: https://dckms.github.io/system-architecture

.. index:: Incremental Development
   :name: emacsway-incremental-development


=======================
Incremental Development
=======================

.. sectionauthor:: Ivan Zakrevsky

..

    üìù "The "incremental development" model includes initial planning, initial requirements analysis, initial architectural definition, and initial validation, but allocates design, implementation, verification (and sometimes delivery) activities to a series of stages, each of which provides a portion of the intended functionality.
    The approach provides for some flexibility to respond to inaccurate cost or schedule estimates by moving functionality to later increments."

    -- "ISO/IEC/IEEE 12207:2017 Systems and software engineering - Software life cycle processes"

.. figure:: _media/incremental/incrementing.jpg
   :alt: Incremental Development. The image source is "Don't Know What I Want, But I Know How to Get It" by Jeff Patton & Associates https://www.jpattonassociates.com/dont_know_what_i_want/
   :align: left
   :width: 90%

   Incremental Development. The image source is "`Don't Know What I Want, But I Know How to Get It <https://www.jpattonassociates.com/dont_know_what_i_want/>`__" by Jeff Patton & Associates

..

    üìù "–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π

    –ö–∞–∫ —É–∫–∞–∑–∞–ª –≠–¥—Å–≥–µ—Ä –î–µ–π–∫—Å—Ç—Ä–∞, –Ω–∏–∫—Ç–æ –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç —É–º–æ–º, —Å–ø–æ—Å–æ–±–Ω—ã–º –≤–º–µ—Å—Ç–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ —Å–ª–æ–∂–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    –¢–æ –∂–µ –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å –∏ –æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.
    –†–∞–∑–¥–µ–ª–∏—Ç–µ –ø—Ä–æ–ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ —Ä–∞–∑–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∏ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π—Ç–µ –∏—Ö –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.
    –ï—Å–ª–∏, —Ä–∞–±–æ—Ç–∞—è –Ω–∞–¥ –æ–¥–Ω–æ–π –∏–∑ –æ–±–ª–∞—Å—Ç–µ–π, –≤—ã –ø–æ–ø–∞–¥–µ—Ç–µ –≤ —Ç—É–ø–∏–∫, –≤—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –∏—Ç–µ—Ä–∞—Ü–∏—é!
    –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ ‚Äî –º–æ—â–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é.
    –í—Å–ø–æ–º–Ω–∏—Ç–µ, –∫–∞–∫ –ü–æ–ª—å—è —Å–æ–≤–µ—Ç–æ–≤–∞–ª —Ä–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏: –ø–æ–π–º–∏—Ç–µ –∑–∞–¥–∞—á—É, —Å–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è, –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ –ø–ª–∞–Ω –∏ –æ–≥–ª—è–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏ –∫–∞–∫ –≤—ã —Å–¥–µ–ª–∞–ª–∏ [Polya, 1957].

    Divide and Conquer

    As Edsger Dijkstra pointed out, no one's skull is big enough to contain all the details of a complex program, and that applies just as well to design.
    Divide the program into different areas of concern, and then tackle each of those areas individually.
    If you run into a dead end in one of the areas, iterate!
    Incremental refinement is a powerful tool for managing complexity.
    As Polya recommended in mathematical problem solving, understand the problem, devise a plan, carry out the plan, and then look back to see how you did [Polya 1957].

    Polya 1957.
        Polya, G. 1957. How to Solve It: A New Aspect of Mathematical Method, 2d ed. Princeton, NJ: Princeton University Press."

    -- "Code Complete" 2nd edition by Steve McConnell, –ø–µ—Ä–µ–≤–æ–¥: –ò–∑–¥–∞—Ç–µ–ª—å—Å–∫–æ-—Ç–æ—Ä–≥–æ–≤—ã–π –¥–æ–º "–†—É—Å—Å–∫–∞—è –†–µ–¥–∞–∫—Ü–∏—è"

