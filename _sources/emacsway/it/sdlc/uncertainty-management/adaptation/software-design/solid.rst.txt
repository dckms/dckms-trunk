:canonical-base-url: https://dckms.github.io/system-architecture

.. index::
   single: SOLID; in Agile
   :name: emacsway-agile-solid


=================================
Role of SOLID principles in Agile
=================================

.. sectionauthor:: Ivan Zakrevsky

.. contents:: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ


.. index::
   single: SOLID; in misunderstanding
   :name: emacsway-agile-solid-misunderstanding


–û—à–∏–±–æ—á–Ω–∞—è —Ç—Ä–∞–∫—Ç–æ–≤–∫–∞ SRP
=======================

SRP is not do just one thing
----------------------------

–°—É—â–µ—Å—Ç–≤—É—é—Ç –¥–≤–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–∞ SRP:

1. SRP —è–∫–æ–±—ã –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –≤–µ—â—å.
2. SRP —è–∫–æ–±—ã –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º.

–î–∞–≤–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥—É–µ–º —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.

–í —Å–≤–æ–µ–π –∫–Ω–∏–≥–µ "Clean Architecture: A Craftsman's Guide to Software Structure and Design", Robert C. Martin —Å–æ–∂–∞–ª–µ–µ—Ç, —á—Ç–æ –≤—ã–±—Ä–∞–ª —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (SRP):

    üìù "Of all the SOLID principles, the Single Responsibility Principle (SRP) might be **the least well understood**.
    That's likely because it has a particularly **inappropriate name**. 
    It is too easy for programmers **to hear the name and then assume that it means that every module should do just one thing**.

    Make no mistake, there is a principle like that.
    A function should do one, and only one, thing.
    We use that principle when we are refactoring large functions into smaller functions; we use it at the lowest levels.
    **But it is not one of the SOLID principles‚Äîit is not the SRP**.

    Historically, the SRP has been described this way:

        *A module should have one, and only one, reason to change.*

    Software systems are changed to satisfy users and stakeholders; those users and stakeholders are the "reason to change" that the principle is talking about.
    Indeed, we can rephrase the principle to say this:

        *A module should be responsible to one, and only one, user or stakeholder.*

    Unfortunately, the words "user" and "stakeholder" aren't really the right words to use here.
    There will likely be more than one user or stakeholder who wants the system changed in the same way.
    Instead, we're really referring to a group‚Äîone or more people who require that change.
    We'll refer to that group as an actor.

    Thus the final version of the SRP is:

        *A module should be responsible to one, and only one, actor.*

    Now, what do we mean by the word "module"? The simplest definition is just a source file.
    Most of the time that definition works fine.
    Some languages and development environments, though, don't use source files to contain their code.
    In those cases a module is just a cohesive set of functions and data structures.

    That word "cohesive" implies the SRP.
    Cohesion is the force that binds together the code responsible to a single actor.

    Perhaps the best way to understand this principle is by looking at the symptoms of violating it..."

    -- "Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin


SRP is about Cohesion
---------------------

–ê –≤ —Å–≤–æ–µ–π –∫–Ω–∏–≥–µ 2002 –≥–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—à–ª–∞ –≤ —Å–≤–µ—Ç —á–µ—Ä–µ–∑ –≥–æ–¥ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è Agile Manifesto (–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –æ–Ω –∂–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª), Robert C. Martin –≤—ã–≤–æ–¥–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SRP –∏–∑ –ø–æ–Ω—è—Ç–∏—è "—Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏" (cohesion) –∫–ª–∞—Å—Å–∞:

    üìù "SRP: The Single-Responsibility Principle

    **This principle was described in the work of Tom DeMarco [1] and Meilir Page-Jones [2].**
    **They called it cohesion.**
    They defined cohesion as the functional relatedness of the elements of a module.
    In this chapter we'll shift that meaning a bit and relate cohesion to the forces that cause a module, or a class, to change.

    A class should have only one reason to change.

    1. [DeMarco79], p. 310.
    2. [Page-Jones88], Chapter 6, p. 82.

    1. DeMarco, Tom. Structured Analysis and System Specification. Yourdon Press Computing Series. Englewood Cliff, NJ: 1979.
    2. Page-Jones, Meilir. The Practical Guide to Structured Systems Design, 2d ed. Englewood Cliff, NJ: Yourdon Press Computing Series, 1988."

    -- "Agile Software Development. Principles, Patterns, and Practices." by Robert C. Martin, James W. Newkirk, Robert S. Koss

–ú–Ω–æ–≥–æ–µ –≤—Å—Ç–∞–µ—Ç –Ω–∞ —Å–≤–æ–µ –º–µ—Å—Ç–æ, –µ—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ Cohesion, —Ç.–µ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø "`Low Coupling & High Cohesion <http://wiki.c2.com/?CouplingAndCohesion>`__".

–ß–∞—Å—Ç–æ –º–æ–∂–Ω–æ —Å–ª—ã—à–∞—Ç—å, —á—Ç–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID –≤–µ–¥–µ—Ç –∫ –ø–æ—è–≤–ª–µ–Ω–∏—é –Ω–µ—á–∏—Ç–∞–µ–º–æ–≥–æ –∫–æ–¥–∞.
–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –ø–æ–¥–æ–±–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –≤—ã—Ä–∞–∑–∏–ª Eric Evans (–ø—Ä–∞–≤–¥–∞, –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏—á–∏–Ω–∞–º):

    üìù "–ï—Å–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π —Å—Ä–µ–¥—ã –∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π —Ç–∞–∫–æ–≤—ã, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–µ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏, —Ç–æ –∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–µ–ª—å.

    –ù–µ–ª—å–∑—è —Ä–∞–∑–¥–µ–ª—è—Ç—å –¥–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏, —É —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —É–º–∞ –µ—Å—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–µ–ª—ã, –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω –µ—â–µ —Å–ø–æ—Å–æ–±–µ–Ω —Å–æ–µ–¥–∏–Ω—è—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ; –µ—Å–ª–∏ —Å—Ä–µ–¥–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —ç—Ç–∏ –ø—Ä–µ–¥–µ–ª—ã, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ç–µ—Ä—è—é—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞—Å—á–ª–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã.

    If the framework's partitioning conventions pull apart the elements implementing the conceptual objects, the code no longer reveals the model.

    There is only so much partitioning a mind can stitch back together, and if the framework uses it all up, the domain developers lose their ability to chunk the model into meaningful pieces."

    -- "Domain-Driven Design: Tackling Complexity in the Heart of Software" by Eric Evans, –ø–µ—Ä–µ–≤–æ–¥ –í.–õ. –ë—Ä–æ–¥–æ–≤–æ–≥–æ

–û —Ç–æ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID –º–æ–∂–Ω–æ –ø–µ—Ä–µ—É—Å–ª–æ–∂–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–∏—à–µ—Ç –∏ –≤–µ—Å—å–º–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –°–µ—Ä–≥–µ–π –¢–µ–ø–ª—è–∫–æ–≤:

- "`–ü—Ä–∏–Ω—Ü–∏–ø YAGNI <http://sergeyteplyakov.blogspot.com/2016/08/yagni.html>`__"
- "`–ö—Ä–∏—Ç–∏–∫–∞ –∫–Ω–∏–≥–∏ –ë–æ–±–∞ –ú–∞—Ä—Ç–∏–Ω–∞ "–ü—Ä–∏–Ω—Ü–∏–ø—ã, –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –º–µ—Ç–æ–¥–∏–∫–∏ –≥–∏–±–∫–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —è–∑—ã–∫–µ C#" <http://sergeyteplyakov.blogspot.com/2013/12/about-agile-principles-patterns-and.html>`__"
- "`–ò–¥–µ–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ <http://sergeyteplyakov.blogspot.com/2011/11/blog-post_23.html>`__"
- "`–®–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ SOLID –ø—Ä–∏–Ω—Ü–∏–ø–∞–º <http://sergeyteplyakov.blogspot.com/2014/10/solid.html>`__"
- "`–û –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è <http://sergeyteplyakov.blogspot.com/2014/10/about-design-principles.html>`__"
- "`–û –¥–∏–∑–∞–π–Ω–µ <http://sergeyteplyakov.blogspot.com/2012/07/blog-post.html>`__"
- "`–û –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–¥–∞ <http://sergeyteplyakov.blogspot.com/2012/04/blog-post_19.html>`__"

–õ–∏—á–Ω–æ –º–Ω–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –Ω–µ –¥–æ–≤–æ–¥–∏–ª–æ—Å—å –Ω–∞–±–ª—é–¥–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID, —Ä–∞–∑–≤–µ —á—Ç–æ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Redux.
–ö—Å—Ç–∞—Ç–∏, —É Udi Dahan –µ—Å—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Å—Ç–∞—Ç—å—è "`Clarified CQRS <http://udidahan.com/2009/12/09/clarified-cqrs/>`__" –æ —Ç–æ–º, –∫–∞–∫ –≥—Ä–∞–º–æ—Ç–Ω–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏ –ª–æ–≥–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ CQRS-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–∞ `Redux —Ä–µ–∞–ª–∏–∑–∞—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã CQRS <https://redux.js.org/understanding/thinking-in-redux/motivation>`__), —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏.

–Ø –æ–±–Ω–∞—Ä—É–∂–∏–ª –µ—â–µ –æ–¥–Ω—É –ø—Ä–∏—á–∏–Ω—É —Å—Ç–æ–ª—å —à–∏—Ä–æ–∫–æ–≥–æ –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞.
–í –ø–µ—Ä–µ–≤–æ–¥–µ –∫–Ω–∏–≥–∏ "Clean Code" —Ç–µ—Ä–º–∏–Ω "Single" –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ "–ï–¥–∏–Ω—ã–π".
–ê –≤ –∫–Ω–∏–≥–µ "Clean Architecture" - –∫–∞–∫ "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π".

–≠—Ç–∏ —Ç–µ—Ä–º–∏–Ω—ã –ø–æ—Ö–æ–∂–∏, –Ω–æ –Ω–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã.
–¢–∞–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ï–¥–∏–Ω–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ" –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–æ, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ-—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –Ω–µ –º–æ–≥—É—Ç –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ.
–ù–æ –ø—Ä–∏ —ç—Ç–æ–º, –≥—Ä–∞–∂–¥–∞–Ω–µ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –¥–≤–æ–π–Ω–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ.
–ê –≤–æ—Ç "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ" —É–∂–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –∑–∞–ø—Ä–µ—Ç –Ω–∞ –¥–≤–æ–π–Ω–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ.

–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Ç–µ—Ä–º–∏–Ω "–ï–¥–∏–Ω—ã–π" –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç "–°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π" –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ, —Ç.–µ. –Ω–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.
–ò–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —Ä–µ—á—å –∏–¥–µ—Ç –æ "High Cohesion", —á—Ç–æ –≤–æ—Å—Ö–æ–¥–∏—Ç –∫ Constantine's Law - "Low Coupling & High Cohesion", –æ —á–µ–º –ø—Ä—è–º–æ –≥–æ–≤–æ—Ä–∏—Ç Robert C. Martin –ø–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–º –≤—ã—à–µ —Å—Å—ã–ª–∫–∞–º.

    üìù "**That word "cohesive" implies the SRP.**
    Cohesion is the force that binds together the code responsible to a single actor."

    -- "Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin

–¢–∞–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ—Ç–æ–¥ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ "`Inline Class <https://refactoring.com/catalog/inlineClass.html>`__" –Ω–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç SRP, —Ö–æ—Ç—è –∫–ª–∞—Å—Å –∏ –æ—Ç–±–∏—Ä–∞–µ—Ç –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å —É –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –µ—ë –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è.

–° –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –µ—Å–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å, –ø–æ–Ω–∏–∂–∞—è –µ–≥–æ Cohesion, —Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—É SRP, —Ö–æ—Ç—è –º—ã –∏ –ø–æ–ª—É—á–∏–º –∫–ª–∞—Å—Å—ã —Å –¥–∏—Å—Ç–∏–ª–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º–∏ –±–µ–∑ –ø—Ä–∏–º–µ—Å–µ–π.

–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π Software Design –¥–æ–ª–∂–µ–Ω –æ–±–ª–µ–≥—á–∞—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–¥–∞, –∞ –Ω–µ –∑–∞—Ç—Ä—É–¥–Ω—è—Ç—å.

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–µ—Ä–µ–¥–∫–æ.
–¢–∞–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ—Ç –µ–¥–∏–Ω–æ–≥–æ –º–Ω–µ–Ω–∏—è –æ —Ç–æ–º, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã "Coupling" –∏ "Cohesion", –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞—é—Ç –ø—Ä—è–º–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.


SRP and "Conway's law"
----------------------

–ê –∑–¥–µ—Å—å Robert C. Martin –≤—ã–≤–æ–¥–∏—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ SRP –∏—Å—Ö–æ–¥—è –∏–∑ "Conway's law":

    üìù "SRP: The Single Responsibility Principle

    An active **corollary to Conway's law**: The best structure for a software system is heavily influenced by the social structure of the organization that uses it so that each software module has one, and only one, reason to change."

    -- "Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin


Common Closure Principle (CCP)
------------------------------

–ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø–æ—Ö–æ–∂–∏–π, –Ω–æ –¥—Ä—É–≥–æ–π, –ø—Ä–∏–Ω—Ü–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "Common Closure Principle (CCP)":

    üìù "THE COMMON CLOSURE PRINCIPLE

    Gather into components those classes that change for the same reasons and at the same times.
    Separate into different components those classes that change at different times and for different reasons.

    This is the Single Responsibility Principle restated for components.
    Just as the SRP says that a class should not contain multiples reasons to change, so the Common Closure Principle (CCP) says that a component should not have multiple reasons to change.

    For most applications, maintainability is more important than reusability.
    If the code in an application must change, you would rather that all of the changes occur in one component, rather than being distributed across many components. [1]
    If changes are confined to a single component, then we need to redeploy only the one changed component.
    Other components that don't depend on the changed component do not need to be revalidated or redeployed.

    The CCP prompts us to gather together in one place all the classes that are likely to change for the same reasons.
    If two classes are so tightly bound, either physically or conceptually, that they always change together, then they belong in the same component.
    This minimizes the workload related to releasing, revalidating, and redeploying the software.

    This principle is closely associated with the Open Closed Principle (OCP).
    Indeed, it is "closure" in the OCP sense of the word that the CCP addresses.
    The OCP states that classes should be closed for modification but open for extension.
    Because 100% closure is not attainable, closure must be strategic.
    We design our classes such that they are closed to the most common kinds of changes that we expect or have experienced.

    The CCP amplifies this lesson by gathering together into the same component those classes that are closed to the same types of changes.
    Thus, when a change in requirements comes along, that change has a good chance of being restricted to a minimal number of components."

    1. See the section on "The Kitty Problem" in Chapter 27, "Services: Great and Small."

    -- "Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin

–ù—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –ø–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º Robert C. Martin –ø–æ–Ω–∏–º–∞–µ—Ç –µ–¥–∏–Ω–∏—Ü—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (–≤ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —ç—Ç–æ—Ç —Ç–µ—Ä–º–∏–Ω –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ):

    üìù "Components are the units of deployment.
    They are the smallest entities that can be deployed as part of a system.
    In Java, they are jar files.
    In Ruby, they are gem files.
    In .Net, they are DLLs.
    In compiled languages, they are aggregations of binary files.
    In interpreted languages, they are aggregations of source files.
    In all languages, they are the granule of deployment."

    -- "Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin


SRP and complexity
------------------

–ï—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ–µ –º–Ω–µ–Ω–∏–µ, —á—Ç–æ SOLID —É–º–µ–Ω—å—à–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã.

    üìù —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        1. –°–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å—Ç–µ–π; –º–Ω–æ–≥–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å –ø–æ —Å–æ—Å—Ç–∞–≤—É –≤—Ö–æ–¥—è—â–∏—Ö —á–∞—Å—Ç–µ–π –∏ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –Ω–∏–º–∏.
        2. –¢—Ä—É–¥–Ω–æ—Å—Ç—å, –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å. –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ—Ç–∞.

    -- "`–°–ª–æ–≤–∞—Ä—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ <https://psychology.academic.ru/2331/%D1%81%D0%BB%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D1%8C>`__". ‚Äî –ú.: –ê–°–¢, –•–∞—Ä–≤–µ—Å—Ç. –°. –Æ. –ì–æ–ª–æ–≤–∏–Ω. 1998.

..

    üìù —Å–ª–æ–∂–Ω—ã–π
        1. –°–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å—Ç–µ–π, —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –æ—Ç —Ç. –ø–µ—Ä–µ–Ω. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∏–π—Å—è –º–Ω–æ–≥–∏–º–∏ –ø–µ—Ä–µ–ø–ª–µ—Ç–∞—é—â–∏–º–∏—Å—è —è–≤–ª–µ–Ω–∏—è–º–∏, –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏.
        2. –ø–µ—Ä–µ–Ω. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Ç—Ä—É–¥–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è; —Ç—Ä—É–¥–Ω—ã–π.
        3. –ø–µ—Ä–µ–Ω. –û–±–ª–∞–¥–∞—é—â–∏–π –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏, —Å–≤–æ–π—Å—Ç–≤–∞–º–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏.

    -- "`–¢–æ–ª–∫–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –ï—Ñ—Ä–µ–º–æ–≤–æ–π <https://dic.academic.ru/dic.nsf/efremova/246102/%D1%81%D0%BB%D0%BE%D0%B6%D0%BD%D1%8B%D0%B9>`__". –¢. –§. –ï—Ñ—Ä–µ–º–æ–≤–∞. 2000.

..

    üìù Complex

    Com"plex (k≈èm"plƒïks), a. [L. complexus, p. p. of complecti to entwine around, comprise; com- + plectere to twist, akin to plicare to fold. See Plait, n.]

    1. Composed of two or more parts; composite; not simple; as, a complex being; a complex idea.

        Ideas thus made up of several simple ones put together, I call complex; such as beauty, gratitude, a man, an army, the universe.
        Locke.

    2. Involving many parts; complicated; intricate.

        When the actual motions of the heavens are calculated in the best possible way, the process is difficult and complex.
        Whewell.

    Complex fraction. See Fraction. -- Complex number (Math.), in the theory of numbers, an expression of the form a + b‚àö-1, when a and b are ordinary integers.

    Syn. -- See Intricate.

    Com"plex, n. [L. complexus] Assemblage of related things; collection; complication.

        This parable of the wedding supper comprehends in it the whole complex of all the blessings and privileges exhibited by the gospel.
        South.

    Complex of lines (Geom.), all the possible straight lines in space being considered, the entire system of lines which satisfy a single relation constitute a complex; as, all the lines which meet a given curve make up a complex. The lines which satisfy two relations constitute a congruency of lines; as, the entire system of lines, each one of which meets two given surfaces, is a congruency.

    -- `webster's 1913 <http://www.websters1913.com/words/Complex>`__. Connoisseur's reference to American English - a dictionary for writers and wordsmiths

–ï—Å–ª–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ "–ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è", —Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID, –Ω–∞–æ–±–æ—Ä–æ—Ç, –æ–±–ª–µ–≥—á–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ.

–ï—Å–ª–∏ –∂–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ "–º–Ω–æ–≥–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å –ø–æ —Å–æ—Å—Ç–∞–≤—É –≤—Ö–æ–¥—è—â–∏—Ö —á–∞—Å—Ç–µ–π", —Ç–æ —Å–æ–≤–æ–∫—É–ø–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã (–≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏) –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è, –∞ –Ω–∞–æ–±–æ—Ä–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç.
–ó–∞–¥–∞—á–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Å–≤–æ–¥–∏—Ç—Å—è –Ω–µ –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –∞ –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é.
–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ –µ—ë —á–∞—Å—Ç–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è—è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö `–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ <https://ru.m.wikipedia.org/wiki/%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D1%87%D0%B8%D1%81%D0%BB%D0%BE_%D1%81%D0%B5%D0%BC%D1%8C_%D0%BF%D0%BB%D1%8E%D1%81-%D0%BC%D0%B8%D0%BD%D1%83%D1%81_%D0%B4%D0%B2%D0%B0>`__.

–û—Ç—Å—é–¥–∞ –≤—ã–≤–æ–¥ - –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏–ª–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞, –≤–Ω–æ—Å—è—â–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º—É –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å (accidental complexity), –¥–æ–ª–∂–Ω–æ —Å–µ–±—è –æ–∫—É–ø–∞—Ç—å, —Ç.–µ. –ø–æ–∑–≤–æ–ª—è—Ç—å —É–ø—Ä–∞–≤–ª—è—Ç—å –µ—â–µ –±–æ–ª—å—à–∏–º —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
–¢–æ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, —Ö–æ—Ç—è –∏ –±—É–¥–µ—Ç (–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏) —É—Å–ª–æ–∂–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –Ω–æ –±—É–¥–µ—Ç —É–ø—Ä–æ—â–∞—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Ñ–æ—Ä–º–∏—Ä—É—è —Ç–∞–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ —Å–º–æ–∂–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ.

–ú–µ—Ç–æ–¥–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –£—Ä–æ–±–æ—Ä–æ—Å.

–ù–æ –µ—Å—Ç—å –µ—â–µ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞:

    üìù "Structural Complexity looks at the system elements and relationships.
    In particular, structural complexity looks at how many different ways system elements can be combined.
    Thus, it is related to the potential for the system to adapt to external needs."

    -- "`Guide to the Systems Engineering Body of Knowledge (SEBoK) <https://www.sebokwiki.org/wiki/Complexity>`__"

–ï—Å–ª–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω –≤ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏, —Ç–æ SOLID —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –Ω–æ —ç—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–∏—Å—Ç–µ–º—ã.


Ad hominem
----------

–ï—â–µ –æ–¥–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ–µ –º–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —á–∞—Å—Ç–æ –º–æ–∂–Ω–æ —É—Å–ª—ã—à–∞—Ç—å, –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ Robert C. Martin - –æ—Ç–æ—Ä–≤–∞–Ω–Ω—ã–π –æ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ç–µ–æ—Ä–µ—Ç–∏–∫, –ø—Ä–∏–¥—É–º—ã–≤–∞—é—â–∏–π –≤ —Å–≤–æ–µ–º –∏–ª–ª—é–∑–æ—Ä–Ω–æ–º –º–∏—Ä–∫–µ –≤—Å—è–∫–∏–µ –Ω–µ–∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –≤—Ä–æ–¥–µ SOLID, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —Ç–æ–ª—å–∫–æ —É—Ö—É–¥—à–∞—é—Ç –∫–æ–¥.

–ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, –∏–º–µ—é—Ç –ø–æ–¥ —Å–æ–±–æ–π —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ, —Ç–æ–ª—å–∫–æ —ç—Ç–∞ —Ç–µ–æ—Ä–∏—è –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å Robert C. Martin.
–ê –≤–æ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, Bertrand Meyer, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, —è–≤–ª—è–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω—ã–º –Ω–∞—É—á–Ω—ã–º —Ç–µ–æ—Ä–µ—Ç–∏–∫–æ–º, –∏ –µ–≥–æ –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ Robert C. Martin –Ω–µ —Å–∫—Ä—ã–≤–∞–ª –≤ —Å–≤–æ–µ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç—å–µ "`The Open-Closed Principle <https://web.archive.org/web/20060822033314/http://www.objectmentor.com/resources/articles/ocp.pdf>`__".

–ò—Ç–∞–∫, –≤—ã–≤–æ–¥ –ø–µ—Ä–≤—ã–π - –µ—Å–ª–∏ –∫—Ç–æ –∏ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–æ—Ä–µ—Ç–∏–∫–æ–º, —Ç–æ —ç—Ç–æ –Ω–µ Robert C. Martin. –û–Ω-—Ç–æ –∫–∞–∫ —Ä–∞–∑ –ø—Ä–∞–∫—Ç–∏–∫.

–í –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—Å–∫–∏—Ö –∫—Ä—É–≥–∞—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ Robert C. Martin –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å, –º—è–≥–∫–æ –≥–æ–≤–æ—Ä—è, –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–º.
–ó–∞—Ç–æ –∫ Gregor Hohpe –æ—Ç–Ω–æ—à–µ–Ω–∏–µ - –ø–æ—á—Ç–∏ –µ–¥–∏–Ω–æ–¥—É—à–Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ.

–ù–æ, —Å—Ç—Ä–∞–Ω–Ω–æ–µ –¥–µ–ª–æ, –ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞ –≤ `—Å–ø–∏—Å–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã Gregor Hohpe <https://architectelevator.com/architecture/architect-bookshelf/>`__ - —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –∫–Ω–∏–≥–∞ "Clean Code" by Robert C. Martin.

–ú–æ–µ –∂–µ –º–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–∏—Ç—Å—è –∫ —Ç–æ–º—É, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å –æ –≤–ª–∏—è–Ω–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ—Å—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ - –Ω—É–∂–Ω–æ.
–ò–º–µ–Ω–Ω–æ —ç—Ç–∏–º –∏ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è Robert C. Martin.
–ò —ç—Ç–æ `–≤–∞–∂–Ω–µ–µ –º–∞–Ω–µ—Ä—ã –¥–æ–Ω–µ—Å–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ <https://en.m.wikipedia.org/wiki/Ad_hominem>`__.
–ü–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ - –æ–¥–∏–Ω –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏:

- https://t.me/emacsway_log/458
- https://t.me/emacsway_log/462


SOLID and Agile
===============

–ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID –≤–ø–µ—Ä–≤—ã–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ —Å—Ç–∞—Ç—å–µ "Design Principles and Design Patterns" 2000 –≥–æ–¥–∞:

- "`–ò—Å—Ç–æ—á–Ω–∏–∫ 1 <https://sites.google.com/site/unclebobconsultingllc/getting-a-solid-start>`__"
- "`–ò—Å—Ç–æ—á–Ω–∏–∫ 2 <https://web.archive.org/web/20150906155800/http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf>`__"
- "`–ò—Å—Ç–æ—á–Ω–∏–∫ 3 <https://fi.ort.edu.uy/innovaportal/file/2032/1/design_principles.pdf>`__"

–í—ã—à–ª–∞ —ç—Ç–∞ —Å—Ç–∞—Ç—å—è –∑–∞ –≥–æ–¥ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ —Ç–æ—Ç –∂–µ Robert C. Martin –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª –≤—Å—Ç—Ä–µ—á—É 17-—Ç–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª –ø—Ä–∏–Ω—è—Ç Agile-Manifesto.
–ö–∞–∫ –º–µ–∂–¥—É —Å–æ–±–æ–π —Å–≤—è–∑–∞–Ω—ã –¥–≤–∞ —ç—Ç–∏—Ö —Å–æ–±—ã—Ç–∏—è?

–í—Å–µ –ø—Ä–æ—Å—Ç–æ.
Agile - —ç—Ç–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –º–µ—Ç–æ–¥–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∏–º–µ–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ :ref:`—Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–∏–∂–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (BDUF) <emacsway-agile-development>`.

–ê —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–π –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–æ–±—â–µ –æ–±—Ä–µ—Ç–∞–µ—Ç —Å–º—ã—Å–ª, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º —Ä–æ—Å—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞.
–ê —ç—Ç–æ —É–∂–µ :ref:`–∑–∞–¥–∞—á–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è <emacsway-agile-software-design>`, –∏ —ç—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç, –ø–æ—á–µ–º—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏ Agile-manifesto –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–æ —Å—Ç–æ–ª—å–∫–æ –ª—é–¥–µ–π –∏–∑ –º–∏—Ä–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
–ö—Å—Ç–∞—Ç–∏, –Ω–∞ —ç—Ç–æ–π –≤—Å—Ç—Ä–µ—á–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–ª–æ—Å—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∏ Grady Booch, –Ω–æ, –Ω–µ –≤—ã—à–ª–æ.

–ò —ç—Ç–æ —Ç–∞–∫ –∂–µ –æ–±—ä—è—Å–Ω—è–µ—Ç, –ø–æ—á–µ–º—É –ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã–ø—É—Å—Ç–∏–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –≤—Å—Ç—Ä–µ—á–∏ Agile-Manifesto –ø–æ—Å–ª–µ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è, –±—ã–ª–∞ –ø–æ—Å–≤—è—â–µ–Ω–∞ –Ω–µ —Å—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º, —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è (–≥–∏–±–∫–æ–≥–æ) –∫–æ–¥–∞, –æ–±–ª–∞–¥–∞—é—â–µ–≥–æ –Ω–∏–∑–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–∏—è.
–≠—Ç–æ –ª–∏—à–Ω–∏–π —Ä–∞–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç :ref:`–≤–∞–∂–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π –≤ Agile (–≥–∏–±–∫–æ–π) —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ <emacsway-agile-development-difficulties>`.

–ò—Ç–∞–∫, —Å–ª–µ–¥—É—é—â–∏–π –≤–∞–∂–Ω—ã–π –≤—ã–≤–æ–¥: –µ—Å–ª–∏ –±—ã –ø—Ä–∏–Ω—Ü–∏–ø—ã –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–±–∫–æ–≥–æ –∫–æ–¥–∞, –≤–∫–ª—é—á–∞—è SOLID, –Ω–µ –∏–º–µ–ª–∏ –±—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Ç–æ–≥–¥–∞ Robert C. Martin —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–º–æ–≥ –±—ã –¥–æ–∫–∞–∑–∞—Ç—å –±–∏–∑–Ω–µ—Å—É, —á—Ç–æ Agile –æ–±–ª–∞–¥–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ–º –ø–µ—Ä–µ–¥ BDUF, –∏ —Ä—ã–Ω–æ–∫ –ø—Ä–æ—Å—Ç–æ –µ–≥–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –±—ã.


–ë–∞–ª–∞–Ω—Å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
=============================================

`Quality Attributes <https://en.m.wikipedia.org/wiki/List_of_system_quality_attributes>`__ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã –º–µ–∂–¥—É —Å–æ–±–æ–π, –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –∏—Ö –≤—Å–µ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω—ã–º.
–ü–æ—ç—Ç–æ–º—É, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—É—á—à–µ –∏–ª–∏ —Ö—É–∂–µ - –æ–Ω–æ –º–æ–∂–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–º –∞—Ç—Ä–∏–±—É—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞.

–ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞ `Modifiability <https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=8299>`__ (—Å–º. "Software Architecture in Practice" 3d edition by Len Bass, Paul Clements, Rick Kazman) –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ.
–¢.–µ. –æ–Ω–∏ –ø—Ä–∏–∑–≤–∞–Ω—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–ª–æ–≥–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ—Å—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π –∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∞—Å–∏–º–ø—Ç–æ—Ç–µ.
–ù–∞–ø–æ–º–Ω—é, –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Agile —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –≥–¥–µ —ç—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞ Agile-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ BDUF.

–ß—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π, —Ç–∞–∫ –∏ –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ, –Ω—É–∂–Ω–æ —Å–æ—á–µ—Ç–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID —Å –ø—Ä–∏–Ω—Ü–∏–ø–æ–º YAGNI (–∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ), –æ —á–µ–º –ø–∏—Å–∞–ª –°–µ–≥–µ–π –¢–µ–ø–ª—è–∫–æ–≤ –≤ —Å—Ç–∞—Ç—å—è—Ö:

- "`–ü—Ä–∏–Ω—Ü–∏–ø YAGNI <http://sergeyteplyakov.blogspot.com/2016/08/yagni.html>`__"
- "`–û –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–¥–∞ <http://sergeyteplyakov.blogspot.com/2012/04/blog-post_19.html>`__"

–°–∞–º Robert Martin –¥–∞–µ—Ç —Ç–∞–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤—É –¥–∏–∑–∞–π–Ω–∞:

    üìù "The measure of design quality is simply the measure of the effort required to meet the needs of the customer.
    If that effort is low, and stays low throughout the lifetime of the system, the design is good.
    If that effort grows with each new release, the design is bad.
    It's as simple as that."

    -- "Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin

–ö–ª—é—á–µ–≤—ã–º –∑–¥–µ—Å—å —è–≤–ª—è–µ—Ç—Å—è "stays low throughout the lifetime of the system" (—Ç.–µ. –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ), –ø–æ—Å–∫–æ–ª—å–∫—É —Å—É—â–µ—Å—Ç–≤—É–µ—Ç `Design Payoff Line <https://martinfowler.com/bliki/DesignPayoffLine.html>`__.

–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–¥–∏ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, –∫–æ–≥–¥–∞ –∑–∞ –¥–µ—Ä–µ–≤—å—è–º–∏ –ª–µ—Å–∞ –Ω–µ –≤–∏–¥–Ω–æ.
–ï—Å–ª–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è, –∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç, –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ª–∏–±–æ –Ω–µ —Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã, –ª–∏–±–æ –Ω–µ —Ç–∞–∫.
–ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª Craig Larman:

    üìù "–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–Ω—è—Ç–∏—è –∫–∞–∫ "–ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏" - –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏–∫–∏, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
    –ü—Ä–∞–∫—Ç–∏–∫–∏ —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã, –∏ –±–µ—Å–ø–µ—á–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏—Ö "–ª—É—á—à–∏–º–∏" –æ—Ç—Ä—ã–≤–∞–µ—Ç –∏—Ö –æ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    –û–Ω–∏ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ —Ä–∏—Ç—É–∞–ª—ã, –∏ –Ω–∞–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã—Ö "best practices" —É–±–∏–≤–∞–µ—Ç –∫—É–ª—å—Ç—É—Ä—É –æ–±—É—á–µ–Ω–∏—è, –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤, –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π.
    –ó–∞—á–µ–º –ª—é–¥—è–º –∏—Å–∫–∞—Ç—å —á–µ–≥–æ-—Ç–æ –ª—É—á—à–µ–≥–æ, –µ—Å–ª–∏ –≤—Å–µ —É–∂–µ –ø—Ä–∏–¥—É–º–∞–Ω–æ –∑–∞ –Ω–∏—Ö?"

    -- "`–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å LeSS <https://less.works/ru/less/framework/introduction>`__"

    üìù "There are no such things as best practices in product development.
    There are only practices that are adequate within a certain context.
    Practices are situational; blithely claiming they are "best" disconnects them from motivation and context.
    They become rituals. And pushing so-called best practices kills a culture of learning, questioning, engagement, and continuous improvement.
    Why would people challenge best?"

    -- "`Introduction to LeSS <https://less.works/ru/less/framework/introduction>`__"

–ò–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω—É–∂–Ω–æ –æ—Å–æ–∑–Ω–∞–≤–∞—Ç—å, –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞–∫–æ–≥–æ –∏–º–µ–Ω–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ—Ç –∏–ª–∏ –∏–Ω–æ–π –ø—Ä–∏–Ω—Ü–∏–ø, —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ñ–∏–¥–±—ç–∫–æ–º –æ—Ç –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è. –ë–µ–∑ —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –º–æ–∂–µ—Ç –ª–µ–≥–∫–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ `–ö–∞—Ä–≥–æ-–ö—É–ª—å—Ç <http://sergeyteplyakov.blogspot.com/2013/09/blog-post_24.html>`__.


SOLID –∏ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∏
======================

–û—Å—Ç–∞–µ—Ç—Å—è –µ—â–µ –æ–¥–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ–µ –º–Ω–µ–Ω–∏–µ - Robert C. Martin –∏—Å–∫–∞–∑–∏–ª –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–º—ã—Å–ª –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
–ì–¥–µ-—Ç–æ –≤ —á–µ–º-—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –∏ –æ—à–∏–±—Å—è, –¥–∞ –æ–Ω –∏ —Å–∞–º –æ–± —ç—Ç–æ–º –≥–æ–≤–æ—Ä–∏–ª.
–ù–æ –æ–Ω –Ω–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–ª —Å–µ–±–µ —á—É–∂–∏–µ –∏–¥–µ–∏, –∏ –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç–æ –æ—Ç—Å—ã–ª–∞–ª –∫ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø—Ä–∏–≤–ª–µ–∫–∞—è –∫ –Ω–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ.

OCP
---

–í–æ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–Ω–æ–≥–∏–µ –∏–∑ –≤–∞—à–∏—Ö –∫–æ–ª–ª–µ–≥ —É–∑–Ω–∞–ª–∏ –±—ã –æ–± OCP –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –≤ –∏–∑–ª–æ–∂–µ–Ω–∏–∏ Bertrand Meyer?
–î–∞–∂–µ Martin Fowler –≥–æ–≤–æ—Ä–∏–ª, —á—Ç–æ:

    üìù "the second  edition [of "Object Oriented Software Construction"] is good but you'll need several months in a gym before you  can lift it."

    -- M.Fowler, `Command Query Separation <https://martinfowler.com/bliki/CommandQuerySeparation.html>`__

–ü—Ä–∏ —ç—Ç–æ–º, Robert C. Martin, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–ª–∞–≥–∞–ª –Ω–∞ —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏, –∏—Å—Ö–æ–¥—è –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—å–µ "`OCP vs YAGNI <https://enterprisecraftsmanship.com/posts/ocp-vs-yagni/>`__" by Vladimir Khorikov.

    üìù "There are two interpretations of the Open/Closed Principle:

        1. The original Bertrand Meyer's one is about backward compatibility. You need to close the API of your module/library/service if it's meant for external use. Not implementation but exactly the API part of it. And only when it's used by external teams.
        2. The Bob Martin's one is about avoiding ripple effects: you need to be able to extend the software behavior with modifying little or no original code. This is achieved by putting extension points to your code base."

    -- "`OCP vs YAGNI <https://enterprisecraftsmanship.com/posts/ocp-vs-yagni/>`__" by Vladimir Khorikov

SRP
---

–í –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —ç—Ç–æ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞, Robert C. Martin –≤ —Å–≤–æ–µ–π –∫–Ω–∏–≥–µ "Agile Software Development. Principles, Patterns, and Practices." —É–∫–∞–∑—ã–≤–∞–µ—Ç:

    1. DeMarco, Tom. Structured Analysis and System Specification. Yourdon Press Computing Series. Englewood Cliff, NJ: 1979.
    2. Page-Jones, Meilir. The Practical Guide to Structured Systems Design, 2d ed. Englewood Cliff, NJ: Yourdon Press Computing Series, 1988.

    -- "Agile Software Development. Principles, Patterns, and Practices." by Robert C. Martin

–ê –∑–¥–µ—Å—å –æ–Ω –¥–∞–µ—Ç –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é:

    üìù "The 1970s and 1980s were a fertile time for principles of software architecture.
    Structured Programming and Design were all the rage.
    During that time the notions of Coupling and Cohesion were introduced by Larry Constantine, and amplified by Tom DeMarco, Meilir Page-Jones and many others."

    -- "`The Single Responsibility Principle <https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html>`__" by Robert C. Martin

–¢.–µ. –æ–Ω –æ—Ç—Å—ã–ª–∞–µ—Ç –∫ `Constantine's Law <http://wiki.c2.com/?CouplingAndCohesion>`__.

–≠—Ç–æ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ OOP, —Ö–æ—Ç—è –∏ –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ OOP, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ –≤ –∫–Ω–∏–≥–∞—Ö:

- "Code Complete" by Steve McConnell
- "Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development" by Craig Larman, –≥–¥–µ —ç—Ç–æ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –∏–∑–≤–µ—Å—Ç–µ–Ω –ø–æ–¥ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π GRASP

–ò —ç—Ç–æ—Ç –ø—Ä–∏–Ω—Ü–∏–ø —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ü–û.
–û–Ω –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, –≤ OOP, –≤ DDD –ø—Ä–∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤, –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞—Ö –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä–∞–Ω–∏—Ü –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Ç.–ø.

–ê Kent Beck –Ω–∞–∑–≤–∞–ª –µ–≥–æ –≤ –æ–¥–Ω–æ–π –∏–∑ —Å–≤–æ–∏—Ö –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π

    üìù "the basic forces acting on software design.
    These were elucidated in the mid-70s by Yourdon & Constantine in `Structured Design <https://amzn.to/2GsuXvQ>`__ and haven't changed."

    -- "`Monolith -> Services: Theory & Practice <https://medium.com/@kentbeck_7670/monolith-services-theory-practice-617e4546a879>`__" by Kent Beck

–ö–∞–∫–∏–º –±—ã –æ–±—Ä–∞–∑–æ–º —ç—Ç–æ –Ω–∏ —Å–¥–µ–ª–∞–ª Robert C. Martin, –Ω–æ –æ–Ω –¥–æ—Å—Ç–∏–≥ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–ª–∏ - –ø—Ä–∏–≤–ª–µ–∫ –º–∞—Å—Å–æ–≤–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º, –∏–º–µ—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Agile —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.


No Silver Bullet
----------------

–ù–æ –ø—Ä–∞–≤–¥–∞ –∏ –≤ —Ç–æ–º, —á—Ç–æ `—Å–µ—Ä–µ–±—Ä—è–Ω–æ–π –ø—É–ª–∏ –Ω–µ—Ç <https://en.m.wikipedia.org/wiki/No_Silver_Bullet>`__.
–ù–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –ø—è—Ç–∏ –±—É–∫–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ª—à–µ–±–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å–¥–µ–ª–∞—é—Ç –∫–æ–¥ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º, –æ—Å–æ–±–µ–Ω–Ω–æ, –µ—Å–ª–∏ –ø—Ä–æ –Ω–∏—Ö —É–∑–Ω–∞–ª–∏ –Ω–µ –∏–∑ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∞, –∞ –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏.
–ó–∞–π–¥–∏—Ç–µ –Ω–∞ github, –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ –æ–≥—Ä–æ–º–Ω–æ–µ –º–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–µ –≤–∑–∞–∏–º–Ω–æ-–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (reference applications), –∏ –∫–∞–∂–¥–æ–µ –∏–∑ –Ω–∏—Ö –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç –Ω–∞ —Ä–æ–ª—å —Å–∞–º–æ–π —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Clean Architecture (—ç—Ç–æ —É–∂–µ –Ω–µ —Å–æ–≤—Å–µ–º SOLID, –Ω–æ –∏–∑ —ç—Ç–æ–π –∂–µ –æ–±–ª–∞—Å—Ç–∏).
–ö—Ç–æ –≤ –ª–µ—Å, –∫—Ç–æ –ø–æ –¥—Ä–æ–≤–∞.
–ò —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä–Ω–µ–π, –æ–±–ª–∞–¥–∞—é—â–∏—Ö `—à–∏—Ä–æ–∫–∏–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º –∫—Ä—É–≥–æ–∑–æ—Ä–æ–º –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º –±—ç–∫–≥—Ä–∞—É–Ω–¥–æ–º <http://www.kamilgrzybek.com/programming-and-design-resources/>`__, —Ç–∞–∫–∏—Ö, –∫–∞–∫ `Kamil Grzybek <https://github.com/kgrzybek>`__, –º–æ–≥—É—Ç –ø—Ä–µ—Ç–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞ —Ä–æ–ª—å —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:

- `Full Modular Monolith application with Domain-Driven Design approach <https://github.com/kgrzybek/modular-monolith-with-ddd>`__ by Kamil Grzybek
- `Sample .NET Core REST API CQRS implementation with raw SQL and DDD using Clean Architecture <https://github.com/kgrzybek/sample-dotnet-core-cqrs-api>`__ by Kamil Grzybek

–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, SOLID —É–∂–µ –Ω–µ –º–µ—à–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (`—Ä–∞–∑ <http://www.kamilgrzybek.com/design/clean-domain-model-attributes/>`__ –∏ `–¥–≤–∞ <http://www.kamilgrzybek.com/design/grasp-explained/>`__).

–ï—â–µ –æ–¥–Ω–æ, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —Å–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ reference application - `eShopOnContainers <https://github.com/dotnet-architecture/eShopOnContainers>`__, –±—ã–ª–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º —É—á–∞—Å—Ç–∏–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Cesar De La Torre, –∫–æ—Ç–æ—Ä—ã–π –≤ —Å–≤–æ–µ–º `–±–ª–æ–≥-–ø–æ—Å—Ç–µ <https://devblogs.microsoft.com/cesardelatorre/free-ebookguide-on-net-microservices-architecture-for-containerized-net-applications/>`__ –ø–∏—à–µ—Ç:

    "Using SOLID principles and Dependency Injection"

–†–µ—á—å –∏–¥–µ—Ç –æ–± `—ç—Ç–æ–º –º–µ—Å—Ç–µ –≥–∞–π–¥–∞ <https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/microservice-application-layer-web-api-design>`__.

–í –∫–∞—á–µ—Å—Ç–≤–µ –∏—Ç–æ–≥–∞ –º–æ–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–∞ —Å–∞–º–æ–≥–æ Robert C. Martin:

    üìù "**Following the rules on the paint can won't teach you how to paint.**
    This is an important point.
    Principles will not turn a bad programmer into a good programmer.
    Principles have to be applied with judgement.
    If they are applied by rote it is just as bad as if they are not applied at all.
    Having said that, if you want to paint well, I suggest you learn the rules on the paint can.
    You may not agree with them all.
    You may not always apply the ones you do agree with.
    But you'd better know them.
    Knowledge of the principles and patterns gives you the justification to decide when and where to apply them.
    If you don't know them, your decisions are much more arbitrary."

    -- "`Getting a SOLID start. <https://sites.google.com/site/unclebobconsultingllc/getting-a-solid-start>`__" by Robert C. Martin

–°–º. —Ç–∞–∫–∂–µ:

- "`Getting a SOLID start <https://sites.google.com/site/unclebobconsultingllc/getting-a-solid-start>`__"
- "`The Single Responsibility Principle <https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html>`__"
- "`The Open Closed Principle <https://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html>`__"
- "`Solid Relevance <http://blog.cleancoder.com/uncle-bob/2020/10/18/Solid-Relevance.html>`__"

.. seealso::

   - ":doc:`../crash-course-in-software-development-economics`"


.. todo::

   - https://t.me/emacsway_log/458
   - https://t.me/emacsway_log/462
   - https://t.me/emacsway_log/393
